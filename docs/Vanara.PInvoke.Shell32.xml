<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Vanara.PInvoke.Shell32</name>
  </assembly>
  <members>
    <member name="T:Vanara.PInvoke.KnownFolderIdExt">
      <summary>Extension methods for <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" />.</summary>
    </member>
    <member name="M:Vanara.PInvoke.KnownFolderIdExt.FullPath(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
      <summary>Retrieves the full path associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" />.</summary>
      <param name="id">The known folder.</param>
      <returns>The path.</returns>
    </member>
    <member name="M:Vanara.PInvoke.KnownFolderIdExt.GetRegistryProperty``1(Vanara.PInvoke.Shell32.KNOWNFOLDERID,System.String)">
      <summary>Gets a registry property associated with this known folder.</summary>
      <param name="id">The known folder.</param>
      <param name="valueName">Name of the property (value under registry key).</param>
      <typeparam name="T">Return type.</typeparam>
      <returns>Retrieved value or default(T) if no value exists.</returns>
    </member>
    <member name="M:Vanara.PInvoke.KnownFolderIdExt.Guid(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
      <summary>Retrieves the Guid associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" />.</summary>
      <param name="id">The known folder.</param>
      <returns>The GUID.</returns>
    </member>
    <member name="M:Vanara.PInvoke.KnownFolderIdExt.KnownFolderId(System.Environment.SpecialFolder)">
      <summary>Retrieves the <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" /> associated with the <see cref="T:System.Environment.SpecialFolder" />.</summary>
      <param name="spFolder">The <see cref="T:System.Environment.SpecialFolder" />.</param>
      <returns>Matching <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" />.</returns>
    </member>
    <member name="M:Vanara.PInvoke.KnownFolderIdExt.Name(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
      <summary>Retrieves the name associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" />.</summary>
      <param name="id">The known folder.</param>
      <returns>The name.</returns>
    </member>
    <member name="M:Vanara.PInvoke.KnownFolderIdExt.PIDL(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
      <summary>Retrieves the PIDL associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" />.</summary>
      <param name="id">The known folder.</param>
      <returns>The PIDL.</returns>
    </member>
    <member name="M:Vanara.PInvoke.KnownFolderIdExt.SpecialFolder(Vanara.PInvoke.Shell32.KNOWNFOLDERID)">
      <summary>Retrieves the <see cref="T:System.Environment.SpecialFolder" /> associated with a <see cref="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID" /> if it exists.</summary>
      <param name="id">The known folder.</param>
      <returns>The <see cref="T:System.Environment.SpecialFolder" /> if defined, <c>null</c> otherwise.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_AssociationArray">
      <summary>Introduced in Windows Vista: Gets an IQueryAssociations object for use with an item or an array of items.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_DataObject">
      <summary>Introduced in Windows Vista: Gets an IDataObject object for use with an item or an array of items.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_EnumAssocHandlers">
      <summary>Introduced in Windows 7: Gets an IEnumAssocHandlers object used to enumerate the recommended association handlers for the given item.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_EnumItems">
      <summary>Introduced in Windows Vista: If the item is a folder, gets an IEnumShellItems object that enumerates all items in the folder. This includes folders, nonfolders, and hidden items.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_FilePlaceholder">
      <summary>Introduced in Windows 8.1: Gets an object used to provide placeholder file functionality.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_Filter">
      <summary>Introduced in Windows Vista: Restricts usage to IFilter.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_LinkTargetItem">
      <summary>CLSID_ShellItem is initialized with the target of this item (can only be SFGAO_LINK). See GetAttributesOf for a description of SFGAO_LINK.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_PropertyStore">
      <summary>Introduced in Windows Vista: Restricts usage to IPropertyStore or IPropertyStoreFactory.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_RandomAccessStream">
      <summary>Introduced in Windows 8: Gets an IRandomAccessStream object for the item.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_SFObject">
      <summary>Restricts usage to BindToObject.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_SFUIObject">
      <summary>Restricts usage to GetUIObjectOf.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_SFViewObject">
      <summary>Restricts usage to CreateViewObject.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_Storage">
      <summary>Attempts to retrieve the storage RIID, but defaults to Shell implementation on failure.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_StorageEnum">
      <summary>If the item is a folder, gets an IEnumShellItems object with which to enumerate the storage contents.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_Stream">
      <summary>Restricts usage to IStream.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_ThumbnailHandler">
      <summary>Introduced in Windows Vista: Restricts usage to IExtractImage or IThumbnailProvider.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BHID_Transfer">
      <summary>Introduced in Windows Vista: If the item is a folder, gets an ITransferSource or ITransferDestination object.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
      <summary>
            The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.
            </summary>
      <param name="lpszFile">String that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</param>
      <param name="nIconIndex">Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.
            <para>If this value is –1 and phiconLarge and phiconSmall are both NULL, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para><para>If this value is a negative number and either phiconLarge or phiconSmall is not NULL, the function begins by extracting the icon whose resource identifier is equal to the absolute value of nIconIndex. For example, use -3 to extract the icon whose resource identifier is 3.</para></param>
      <param name="phIconLarge">An array of icon handles that receives handles to the large icons extracted from the file. If this parameter is NULL, no large icons are extracted from the file.</param>
      <param name="phIconSmall">Array of icon handles that receives handles to the small icons extracted from the file. If this parameter is NULL, no small icons are extracted from the file.</param>
      <param name="nIcons">The number of icons to extract from the file.</param>
      <returns>If the nIconIndex parameter is -1, the phiconLarge parameter is NULL, and the phiconSmall parameter is NULL, then the return value is the number of icons contained in the specified file. Otherwise, the return value is the number of icons successfully extracted from the file.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.GetCurrentProcessExplicitAppUserModelID(System.String@)">
      <summary>Retrieves the User Model AppID that has been explicitly set for the current process via SetCurrentProcessExplicitAppUserModelID</summary>
      <param name="AppID">The application identifier.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.GetCurrentProcessExplicitAppUserModelID(System.String@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILClone(System.IntPtr)">
      <summary>Clones an ITEMIDLIST structure.</summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure to be cloned.</param>
      <returns>Returns a pointer to a copy of the ITEMIDLIST structure pointed to by pidl.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILCloneFirst(System.IntPtr)">
      <summary>Clones the first SHITEMID structure in an ITEMIDLIST structure.</summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure to be cloned.</param>
      <returns>
            A pointer to an ITEMIDLIST structure that contains the first SHITEMID structure from the ITEMIDLIST structure specified by pidl. Returns NULL on failure.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILCombine(System.IntPtr,System.IntPtr)">
      <summary>Combines two ITEMIDLIST structures.</summary>
      <param name="pidl1">A pointer to the first ITEMIDLIST structure.</param>
      <param name="pidl2">A pointer to the second ITEMIDLIST structure. This structure is appended to the structure pointed to by pidl1.</param>
      <returns>
            Returns an ITEMIDLIST containing the combined structures. If you set either pidl1 or pidl2 to NULL, the returned ITEMIDLIST structure is a clone of
            the non-NULL parameter. Returns NULL if pidl1 and pidl2 are both set to NULL.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILCreateFromPath(System.String)">
      <summary>Returns the ITEMIDLIST structure associated with a specified file path.</summary>
      <param name="pszPath">
            A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the
            terminating null character.
            </param>
      <returns>Returns a pointer to an ITEMIDLIST structure that corresponds to the path.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILFindLastID(System.IntPtr)">
      <summary>Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure.</summary>
      <param name="pidl">A pointer to an ITEMIDLIST structure.</param>
      <returns>A pointer to the last SHITEMID structure in pidl.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILGetItemSize(System.IntPtr)">
      <summary>Returns the size, in bytes, of an SHITEMID structure.</summary>
      <param name="pidl">A pointer to an SHITEMID structure.</param>
      <returns>The size of the SHITEMID structure specified by pidl, in bytes.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILGetNext(System.IntPtr)">
      <summary>Retrieves the next SHITEMID structure in an ITEMIDLIST structure.</summary>
      <param name="pidl">A pointer to a particular SHITEMID structure in a larger ITEMIDLIST structure.</param>
      <returns>
            Returns a pointer to the SHITEMID structure that follows the one specified by pidl. Returns NULL if pidl points to the last SHITEMID structure.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILGetSize(System.IntPtr)">
      <summary>Returns the size, in bytes, of an ITEMIDLIST structure.</summary>
      <param name="pidl">A pointer to an ITEMIDLIST structure.</param>
      <returns>The size of the ITEMIDLIST structure specified by pidl, in bytes.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILIsChild(System.IntPtr)">
      <summary>Verifies whether a pointer to an item identifier list (PIDL) is a child PIDL, which is a PIDL with exactly one SHITEMID.</summary>
      <param name="pidl">A constant, unaligned, relative PIDL that is being checked.</param>
      <returns>Returns TRUE if the given PIDL is a child PIDL; otherwise, FALSE.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILIsEmpty(System.IntPtr)">
      <summary>Verifies whether an ITEMIDLIST structure is empty.</summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure to be checked.</param>
      <returns>TRUE if the pidl parameter is NULL or the ITEMIDLIST structure pointed to by pidl is empty; otherwise FALSE.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILIsEqual(System.IntPtr,System.IntPtr)">
      <summary>Tests whether two ITEMIDLIST structures are equal in a binary comparison.</summary>
      <param name="pidl1">The first ITEMIDLIST structure.</param>
      <param name="pidl2">The second ITEMIDLIST structure.</param>
      <returns>Returns TRUE if the two structures are equal, FALSE otherwise.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILIsParent(System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>Tests whether an ITEMIDLIST structure is the parent of another ITEMIDLIST structure.</summary>
      <param name="pidl1">A pointer to an ITEMIDLIST (PIDL) structure that specifies the parent. This must be an absolute PIDL.</param>
      <param name="pidl2">A pointer to an ITEMIDLIST (PIDL) structure that specifies the child. This must be an absolute PIDL.</param>
      <param name="fImmediate">A Boolean value that is set to TRUE to test for immediate parents of pidl2, or FALSE to test for any parents of pidl2.</param>
      <returns>
            Returns TRUE if pidl1 is a parent of pidl2. If fImmediate is set to TRUE, the function only returns TRUE if pidl1 is the immediate parent of pidl2.
            Otherwise, the function returns FALSE.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILNext(System.IntPtr)">
      <summary>Retrieves the next SHITEMID structure in an ITEMIDLIST structure.</summary>
      <param name="pidl">A constant, unaligned, relative PIDL for which the next SHITEMID structure is being retrieved.</param>
      <returns>
            When this function returns, contains one of three results: If pidl is valid and not the last SHITEMID in the ITEMIDLIST, then it contains a pointer
            to the next ITEMIDLIST structure. If the last ITEMIDLIST structure is passed, it contains NULL, which signals the end of the PIDL. For other values
            of pidl, the return value is meaningless.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ILRemoveLastID(System.IntPtr)">
      <summary>Removes the last SHITEMID structure from an ITEMIDLIST structure.</summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure to be shortened. When the function returns, this variable points to the shortened structure.</param>
      <returns>Returns TRUE if successful, FALSE otherwise.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IntILCreateFromPath(System.String)">
      <summary>Returns the ITEMIDLIST structure associated with a specified file path.</summary>
      <param name="pszPath">
            A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the
            terminating null character.
            </param>
      <returns>Returns a pointer to an ITEMIDLIST structure that corresponds to the path.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SetCurrentProcessExplicitAppUserModelID(System.String)">
      <summary>
            Specifies a unique application-defined Application User Model ID (AppUserModelID) that identifies the current process to the taskbar. This identifier
            allows an application to group its associated processes and windows under a single taskbar button.
            </summary>
      <param name="AppID">Pointer to the AppUserModelID to assign to the current process.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SetCurrentProcessExplicitAppUserModelID(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,System.String)">
      <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.
            </summary>
      <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
      <param name="pv">A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the following forms:
            <list type="bullet"><item><definition>A null-terminated string that contains the path and file name of the item.</definition></item><item><definition>A PIDL that identifies the item's file object.</definition></item><item><definition>Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information.</definition></item><item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item></list><para>Set this parameter to NULL to clear all usage data on all items.</para></param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,Vanara.PInvoke.Shell32.IShellLinkW)">
      <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.
            </summary>
      <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
      <param name="pv">A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the following forms:
            <list type="bullet"><item><definition>A null-terminated string that contains the path and file name of the item.</definition></item><item><definition>A PIDL that identifies the item's file object.</definition></item><item><definition>Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information.</definition></item><item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item></list><para>Set this parameter to NULL to clear all usage data on all items.</para></param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHAddToRecentDocs(Vanara.PInvoke.Shell32.SHARD,Vanara.PInvoke.Shell32.PIDL)">
      <summary>
            Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.
            </summary>
      <param name="uFlags">A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter.</param>
      <param name="pv">A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the following forms:
            <list type="bullet"><item><definition>A null-terminated string that contains the path and file name of the item.</definition></item><item><definition>A PIDL that identifies the item's file object.</definition></item><item><definition>Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information.</definition></item><item><definition>Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.</definition></item></list><para>Set this parameter to NULL to clear all usage data on all items.</para></param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHBrowseForFolder(Vanara.PInvoke.Shell32.BROWSEINFO@)">
      <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
      <param name="lpbi">A pointer to a BROWSEINFO structure that contains information used to display the dialog box.</param>
      <returns>
            Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the Cancel button in the
            dialog box, the return value is NULL.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromIDList(Vanara.PInvoke.Shell32.PIDL,System.Guid,System.Object@)">
      <summary>
            Creates and initializes a Shell item object from a pointer to an item identifier list (PIDL). The resulting shell item object supports the IShellItem interface.
            </summary>
      <param name="pidl">The source PIDL.</param>
      <param name="riid">A reference to the IID of the requested interface.</param>
      <param name="ppv">When this function returns, contains the interface pointer requested in riid. This will typically be IShellItem or IShellItem2.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="pszPath">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszPath</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <param name="pbc">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pbc</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <param name="riid">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>riid</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <param name="ppv">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ppv</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="psiParent">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiParent</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <param name="pbc">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pbc</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <param name="riid">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>riid</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <param name="ppv">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ppv</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemFromRelativeName(Vanara.PInvoke.Shell32.IShellItem,System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateItemInKnownFolder(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.String,System.Guid,System.Object@)">
      <summary>
            Creates a Shell item object for a single file that exists inside a known folder.
            </summary>
      <param name="kfid">A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item.</param>
      <param name="dwKFFlags">Flags that specify special options in the object retrieval. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <param name="pszItem">A pointer to a null-terminated buffer that contains the file name of the new item as a Unicode string. This parameter can also be NULL. In this case, an IShellItem that represents the known folder itself is created.</param>
      <param name="riid">A reference to an interface ID.</param>
      <param name="ppv">When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemInKnownFolder(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.String,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateItemWithParent(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Guid,System.Object@)">
      <summary>
            Create a Shell item, given a parent folder and a child item ID.
            </summary>
      <param name="pidlParent">The IDList of the parent folder of the item being created; the IDList of psfParent. This parameter can be NULL, if psfParent is specified.</param>
      <param name="psfParent">A pointer to IShellFolder interface that specifies the shell data source of the child item specified by the pidl.This parameter can be NULL, if pidlParent is specified.</param>
      <param name="pidl">A child item ID relative to its parent folder specified by psfParent or pidlParent.</param>
      <param name="riid">A reference to an interface ID.</param>
      <param name="ppvItem">When this function returns, contains the interface pointer requested in riid. This will usually be IShellItem or IShellItem2.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateItemWithParent(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArray(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,System.UInt32,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellItemArray@)">
      <summary>
            Creates a Shell item array object.
            </summary>
      <param name="pidlParent">The ID list of the parent folder of the items specified in ppidl. If psf is specified, this parameter can be NULL. If this pidlParent is not specified, it is computed from the psf parameter using IPersistFolder2.</param>
      <param name="psf">The Shell data source object that is the parent of the child items specified in ppidl. If pidlParent is specified, this parameter can be NULL.</param>
      <param name="cidl">The number of elements in the array specified by ppidl.</param>
      <param name="ppidl">The list of child item IDs for which the array is being created. This value can be NULL.</param>
      <param name="ppsiItemArray">When this function returns, contains the address of an <see cref="T:Vanara.PInvoke.Shell32.IShellItemArray" /> interface pointer.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateShellItemArray(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellFolder,System.UInt32,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.IShellItemArray@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromIDLists(System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.IShellItemArray@)">
      <summary>
            Creates a Shell item array object from a list of ITEMIDLIST structures.
            </summary>
      <param name="cidl">The number of elements in the array.</param>
      <param name="rgpidl">A list of cidl constant pointers to ITEMIDLIST structures.</param>
      <param name="ppsiItemArray">When this function returns, contains an IShellItemArray interface pointer.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromIDLists(System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.IShellItemArray@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromShellItem(Vanara.PInvoke.Shell32.IShellItem,System.Guid,Vanara.PInvoke.Shell32.IShellItemArray@)">
      <summary>
            Creates an array of one element from a single Shell item.
            </summary>
      <param name="psi">Pointer to IShellItem object that represents the item.</param>
      <param name="riid">A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItemArray.</param>
      <param name="ppv">When this method returns, contains the interface pointer requested in riid. This is typically a pointer to an IShellItemArray.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHCreateShellItemArrayFromShellItem(Vanara.PInvoke.Shell32.IShellItem,System.Guid,Vanara.PInvoke.Shell32.IShellItemArray@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHDefExtractIcon(System.String,System.Int32,System.UInt32,System.IntPtr,System.IntPtr@,System.UInt32)">
      <summary>
            Provides a default handler to extract an icon from a file.
            </summary>
      <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
      <param name="iIndex">The location of the icon within the file named in pszIconFile. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
      <param name="uFlags">A flag that controls the icon extraction.</param>
      <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the LOWORD of nIconSize. This value can be NULL.</param>
      <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the HIWORD of nIconSize.</param>
      <param name="nIconSize">A value that contains the large icon size in its LOWORD and the small icon size in its HIWORD. Size is measured in pixels. Pass 0 to specify default large and small sizes.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHDefExtractIcon(System.String,System.Int32,System.UInt32,System.IntPtr,System.IntPtr@,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHDefExtractIcon(System.String,System.Int32,System.UInt32,System.IntPtr@,System.IntPtr@,System.UInt32)">
      <summary>
            Provides a default handler to extract an icon from a file.
            </summary>
      <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
      <param name="iIndex">The location of the icon within the file named in pszIconFile. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
      <param name="uFlags">A flag that controls the icon extraction.</param>
      <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the LOWORD of nIconSize. This value can be NULL.</param>
      <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the HIWORD of nIconSize.</param>
      <param name="nIconSize">A value that contains the large icon size in its LOWORD and the small icon size in its HIWORD. Size is measured in pixels. Pass 0 to specify default large and small sizes.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHDefExtractIcon(System.String,System.Int32,System.UInt32,System.IntPtr@,System.IntPtr@,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ShellExecuteEx(Vanara.PInvoke.Shell32.SHELLEXECUTEINFO@)">
      <summary>
            Performs an operation on a specified file.
            </summary>
      <param name="lpExecInfo">A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed.</param>
      <returns>Returns TRUE if successful; otherwise, FALSE. Call GetLastError for extended error information.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetDataFromIDList(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHGetDataFormat,System.IntPtr,System.Int32)">
      <summary>
            Retrieves extended property data from a relative identifier list.
            </summary>
      <param name="psf">The address of the parent IShellFolder interface. This must be the immediate parent of the ITEMIDLIST structure referenced by the pidl parameter.</param>
      <param name="pidl">A pointer to an ITEMIDLIST structure that identifies the object relative to the folder specified in psf.</param>
      <param name="nFormat">The format in which the data is being requested. </param>
      <param name="pv">A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by nFormat.
            <para>If nFormat is SHGDFIL_NETRESOURCE, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be NULL.</para></param>
      <param name="cb">Size of the buffer at pv, in bytes.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetDataFromIDList(Vanara.PInvoke.Shell32.IShellFolder,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHGetDataFormat,System.IntPtr,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetDesktopFolder(Vanara.PInvoke.Shell32.IShellFolder@)">
      <summary>
            Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace.
            </summary>
      <param name="ppv">When this method returns, receives an IShellFolder interface pointer for the desktop folder. The calling application is responsible for eventually freeing the interface by calling its IUnknown::Release method.</param>
      <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetFileInfo(System.String,System.IO.FileAttributes,Vanara.PInvoke.Shell32.SHFILEINFO@,System.Int32,Vanara.PInvoke.Shell32.SHGFI)">
      <summary>
            Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
            </summary>
      <param name="pszPath">A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.
            <para>If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para><para>If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes.</para><para>This string can use either short (the 8.3 form) or long file names.</para></param>
      <param name="dwFileAttributes">A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored.</param>
      <param name="psfi">Pointer to a SHFILEINFO structure to receive the file information.</param>
      <param name="cbFileInfo">The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.</param>
      <param name="uFlags">The flags that specify the file information to retrieve.</param>
      <returns>Returns a value whose meaning depends on the uFlags parameter.
            <para>If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise.</para><para>If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file. It will be one of the following values.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetFileInfo(Vanara.PInvoke.Shell32.PIDL,System.IO.FileAttributes,Vanara.PInvoke.Shell32.SHFILEINFO@,System.Int32,Vanara.PInvoke.Shell32.SHGFI)">
      <summary>
            Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
            </summary>
      <param name="itemIdList">A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.
            <para>If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para><para>If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes.</para><para>This string can use either short (the 8.3 form) or long file names.</para></param>
      <param name="dwFileAttributes">A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored.</param>
      <param name="psfi">Pointer to a SHFILEINFO structure to receive the file information.</param>
      <param name="cbFileInfo">The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter.</param>
      <param name="uFlags">The flags that specify the file information to retrieve.</param>
      <returns>Returns a value whose meaning depends on the uFlags parameter.
            <para>If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise.</para><para>If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file. It will be one of the following values.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetFolderLocation(System.IntPtr,System.Int32,Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Int32,Vanara.PInvoke.Shell32.PIDL@)">
      <summary>
            Deprecated. Retrieves the path of a folder as an ITEMIDLIST structure.
            </summary>
      <param name="hwndOwner">Reserved.</param>
      <param name="nFolder">A CSIDL value that identifies the folder to be located. The folders associated with the CSIDLs might not exist on a particular system.</param>
      <param name="hToken">An access token that can be used to represent a particular user. It is usually set to NULL, but it may be needed when there are multiple users for those folders that are treated as belonging to a single user. The most commonly used folder of this type is My Documents. The calling application is responsible for correct impersonation when hToken is non-NULL. It must have appropriate security privileges for the particular user, and the user's registry hive must be currently mounted.
            <para>Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetFolderLocation to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account.</para></param>
      <param name="dwReserved">Reserved.</param>
      <param name="ppidl">The address of a pointer to an item identifier list structure that specifies the folder's location relative to the root of the namespace (the desktop). The ppidl parameter is set to NULL on failure. The calling application is responsible for freeing this resource by calling CoTaskMemFree.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetFolderLocation(System.IntPtr,System.Int32,Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Int32,Vanara.PInvoke.Shell32.PIDL@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetFolderPath(System.IntPtr,System.Int32,Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.Shell32.SHGFP,System.Text.StringBuilder)">
      <summary>
            Deprecated. Gets the path of a folder identified by a CSIDL value.
            <note>As of Windows Vista, this function is merely a wrapper for SHGetKnownFolderPath. The CSIDL value is translated to its associated KNOWNFOLDERID and then SHGetKnownFolderPath is called. New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</note></summary>
      <param name="hwndOwner">Reserved.</param>
      <param name="nFolder">A CSIDL value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's CSIDL with CSIDL_FLAG_CREATE.</param>
      <param name="hToken">An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder for the current user.
            <para>Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access Control for further discussion of access control issues.</para><para>Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para></param>
      <param name="dwFlags">Flags that specify the path to be returned. This value is used in cases where the folder associated with a KNOWNFOLDERID (or CSIDL) can be moved, renamed, redirected, or roamed across languages by a user or administrator.
            <para>The known folder system that underlies SHGetFolderPath allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling IKnownFolderManager::Redirect, which sets the "current" value of the folder associated with the SHGFP_TYPE_CURRENT flag.</para><para>The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a known folder.</para><para>For example, the default value (SHGFP_TYPE_DEFAULT) for FOLDERID_Music (CSIDL_MYMUSIC) is "C:\Users\user name\Music". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.</para></param>
      <param name="pszPath">A pointer to a null-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetFolderPath(System.IntPtr,System.Int32,Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.Shell32.SHGFP,System.Text.StringBuilder)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetFolderPathEx(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Text.StringBuilder,System.UInt32)">
      <summary>
            Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID. This extends SHGetKnownFolderPath by allowing you to set the initial size of the string buffer.
            </summary>
      <param name="rfid">A reference to the KNOWNFOLDERID that identifies the folder.</param>
      <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <param name="hToken">An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder for the current user.
            <para>Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access Control for further discussion of access control issues.</para><para>Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para></param>
      <param name="pszPath">A null-terminated, Unicode string. This buffer must be of size cchPath. When SHGetFolderPathEx returns successfully, this parameter contains the path for the known folder.</param>
      <param name="cchPath">The size of the ppszPath buffer, in characters.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetFolderPathEx(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Text.StringBuilder,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetIDListFromObject(System.Object,Vanara.PInvoke.Shell32.PIDL@)">
      <summary>Retrieves the pointer to an item identifier list (PIDL) of an object.</summary>
      <param name="iUnknown">A pointer to the IUnknown of the object from which to get the PIDL.</param>
      <param name="ppidl">When this function returns, contains a pointer to the PIDL of the given object.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetIDListFromObject(System.Object,Vanara.PInvoke.Shell32.PIDL@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetImageList(Vanara.PInvoke.Shell32.SHIL,System.Guid,Vanara.PInvoke.ComCtl32.IImageList@)">
      <summary>Retrieves an image list.</summary>
      <param name="iImageList">The image type contained in the list.</param>
      <param name="riid">Reference to the image list interface identifier, normally IID_IImageList.</param>
      <param name="ppv">When this method returns, contains the interface pointer requested in riid. This is typically IImageList.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetImageList(Vanara.PInvoke.Shell32.SHIL,System.Guid,Vanara.PInvoke.ComCtl32.IImageList@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderIDList(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.Shell32.PIDL@)">
      <summary>Retrieves the path of a known folder as an ITEMIDLIST structure.</summary>
      <param name="rfid">
            A reference to the KNOWNFOLDERID that identifies the folder. The folders associated with the known folder IDs might not exist on a particular system.
            </param>
      <param name="dwFlags">
            Flags that specify special retrieval options. This value can be 0; otherwise, it is one or more of the KNOWN_FOLDER_FLAG values.
            </param>
      <param name="hToken">
            An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current
            user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as
            belonging to a single user. The most commonly used folder of this type is Documents.
            <para>
            The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the
            particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further
            discussion of access control issues.
            </para><para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderIDList to find folder locations (such
            as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special
            folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the
            Default User folders requires administrator privileges.
            </para></param>
      <param name="ppidl">
            When this method returns, contains a pointer to the PIDL of the folder. This parameter is passed uninitialized. The caller is responsible for freeing
            the returned PIDL when it is no longer needed by calling ILFree.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetKnownFolderIDList(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.Shell32.PIDL@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderItem(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Guid,System.Object@)">
      <summary>
            Retrieves an IShellItem object that represents a known folder.
            </summary>
      <param name="rfid">A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item.</param>
      <param name="dwFlags">Flags that specify special options used in the retrieval of the known folder IShellItem. This value can be KF_FLAG_DEFAULT; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <param name="hToken">
            An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current
            user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as
            belonging to a single user. The most commonly used folder of this type is Documents.
            <para>
            The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the
            particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further
            discussion of access control issues.
            </para><para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderIDList to find folder locations (such
            as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special
            folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the
            Default User folders requires administrator privileges.
            </para></param>
      <param name="riid">A reference to the IID of the interface that represents the item, usually IID_IShellItem or IID_IShellItem2.</param>
      <param name="ppv">When this method returns, contains the interface pointer requested in riid.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetKnownFolderItem(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Guid,System.Object@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderPath(System.Guid,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.InteropServices.SafeCoTaskMemHandle@)">
      <summary>
            Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.
            </summary>
      <param name="rfid">A reference to the KNOWNFOLDERID that identifies the folder.</param>
      <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <param name="hToken">An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder for the current user.
            <para>Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access Control for further discussion of access control issues.</para><para>Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para></param>
      <param name="pszPath">When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the path of the known folder. The calling process is responsible for freeing this resource once it is no longer needed by calling CoTaskMemFree. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</param>
      <returns>Returns S_OK if successful, or an error value otherwise.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetKnownFolderPath(Vanara.PInvoke.Shell32.KNOWNFOLDERID,Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,Vanara.PInvoke.AdvApi32.SafeTokenHandle)">
      <summary>Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.</summary>
      <param name="id">A reference to the KNOWNFOLDERID that identifies the folder.</param>
      <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <param name="hToken">
            An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder
            for the current user.
            <para>
            Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient
            privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also
            need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access
            Control for further discussion of access control issues.
            </para><para>
            Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such
            as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special
            folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the
            Default User folders requires administrator privileges.
            </para></param>
      <returns>String that specifies the path of the known folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetNameFromIDList(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SIGDN,Vanara.InteropServices.SafeCoTaskMemHandle@)">
      <summary>
            Retrieves the display name of an item identified by its IDList.
            </summary>
      <param name="pidl">A PIDL that identifies the item.</param>
      <param name="sigdnName">A value from the SIGDN enumeration that specifies the type of display name to retrieve.</param>
      <param name="ppszName">A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHGetNameFromIDList(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SIGDN,Vanara.InteropServices.SafeCoTaskMemHandle@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetPathFromIDList(Vanara.PInvoke.Shell32.PIDL,System.Text.StringBuilder)">
      <summary>
            Converts an item identifier list to a file system path.
            </summary>
      <param name="pidl">The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
      <param name="pszPath">The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
      <returns>Returns TRUE if successful; otherwise, FALSE.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHGetPropertyStoreFromParsingName(System.String,System.Runtime.InteropServices.ComTypes.IBindCtx,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid,Vanara.PInvoke.PropSys.IPropertyStore@)">
      <summary>Returns a property store for an item, given a path or parsing name.</summary>
      <param name="pszPath">A pointer to a null-terminated Unicode string that specifies the item path.</param>
      <param name="pbc">A pointer to a IBindCtx object, which provides access to a bind context. This value can be NULL.</param>
      <param name="flags">One or more values from the GETPROPERTYSTOREFLAGS constants. This parameter can also be NULL.</param>
      <param name="riid">A reference to the desired interface ID.</param>
      <param name="propertyStore">
            When this function returns, contains the interface pointer requested in riid. This is typically IPropertyStore or a related interface.
            </param>
      <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHOpenFolderAndSelectItems(Vanara.PInvoke.Shell32.PIDL,System.UInt32,Vanara.PInvoke.Shell32.PIDL[],Vanara.PInvoke.Shell32.OFASI)">
      <summary>
            Opens a Windows Explorer window with specified items in a particular folder selected.
            </summary>
      <param name="pidlFolder">A pointer to a fully qualified item ID list that specifies the folder.</param>
      <param name="cidl">A count of items in the selection array, apidl. If cidl is zero, then pidlFolder must point to a fully specified ITEMIDLIST describing a single item to select. This function opens the parent folder and selects that item.</param>
      <param name="apidl">A pointer to an array of PIDL structures, each of which is an item to select in the target folder referenced by pidlFolder.</param>
      <param name="dwFlags">The optional flags. Under Windows XP this parameter is ignored. In Windows Vista, the following flags are defined.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHOpenFolderAndSelectItems(Vanara.PInvoke.Shell32.PIDL,System.UInt32,Vanara.PInvoke.Shell32.PIDL[],Vanara.PInvoke.Shell32.OFASI)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHParseDisplayName(System.String,System.IntPtr,Vanara.PInvoke.Shell32.PIDL@,Vanara.PInvoke.Shell32.SFGAO,Vanara.PInvoke.Shell32.SFGAO@)">
      <summary>
            Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object. This function is the preferred method to convert a string to a pointer to an item identifier list (PIDL).
            </summary>
      <param name="pszName">A pointer to a zero-terminated wide string that contains the display name to parse.</param>
      <param name="pbc">A bind context that controls the parsing operation. This parameter is normally set to NULL.</param>
      <param name="ppidl">The address of a pointer to a variable of type ITEMIDLIST that receives the item identifier list for the object. If an error occurs, then this parameter is set to NULL.</param>
      <param name="sfgaoIn">A ULONG value that specifies the attributes to query. To query for one or more attributes, initialize this parameter with the flags that represent the attributes of interest. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf.</param>
      <param name="psfgaoOut">A pointer to a ULONG. On return, those attributes that are true for the object and were requested in sfgaoIn are set. An object's attribute flags can be zero or a combination of SFGAO flags. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.SHParseDisplayName(System.String,System.IntPtr,Vanara.PInvoke.Shell32.PIDL@,Vanara.PInvoke.Shell32.SFGAO,Vanara.PInvoke.Shell32.SFGAO@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.APPDOCLISTTYPE">
      <summary>Values that specify from which category the list of destinations should be retrieved.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.APPDOCLISTTYPE.RECENT">
      <summary>The Recent category, which lists those items most recently accessed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.APPDOCLISTTYPE.FREQUENT">
      <summary>The Frequent category, which lists the items that have been accessed the greatest number of times.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.BrowseCallbackProc">
      <summary>
            Specifies an application-defined callback function used to send messages to, and process messages from, a Browse dialog box displayed in response to
            a call to SHBrowseForFolder.
            </summary>
      <param name="hwnd">The window handle of the browse dialog box.</param>
      <param name="uMsg">The dialog box event that generated the message.</param>
      <param name="lParam">
            A value whose meaning depends on the event specified in uMsg as follows:
            <list type="table"><listheader><term>uMsg</term><definition>lParam</definition></listheader><item><term>BFFM_INITIALIZED</term><definition>Not used, value is NULL.</definition></item><item><term>BFFM_IUNKNOWN</term><definition>A pointer to an IUnknown interface.</definition></item><item><term>BFFM_SELCHANGED</term><definition>A PIDL that identifies the newly selected item.</definition></item><item><term>BFFM_VALIDATEFAILED</term><definition>A pointer to a string that contains the invalid name. An application can use this data in an error dialog informing the user that the name was not valid.</definition></item></list></param>
      <param name="lpData">An application-defined value that was specified in the lParam member of the BROWSEINFO structure used in the call to SHBrowseForFolder.</param>
      <returns>
            Returns zero except in the case of BFFM_VALIDATEFAILED. For that flag, returns zero to dismiss the dialog or nonzero to keep the dialog displayed.
            </returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.BrowseForFolderMessages">
      <summary>Enumeration with dialog messages used by the SHBrowseForFolder dialog box.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.BROWSEINFO">
      <summary>Contains parameters for the <see cref="M:Vanara.PInvoke.Shell32.SHBrowseForFolder(Vanara.PInvoke.Shell32.BROWSEINFO@)" /> function and receives information about the folder selected by the user.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.BROWSEINFO.#ctor(System.IntPtr,System.IntPtr,System.String,Vanara.PInvoke.Shell32.BrowseInfoFlag,Vanara.PInvoke.Shell32.BrowseCallbackProc,Vanara.InteropServices.SafeCoTaskMemString)">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.BROWSEINFO" /> struct.
            </summary>
      <param name="hWnd">A handle to the owner window for the dialog box.</param>
      <param name="rootPidl">A PIDL that specifies the location of the root folder from which to start browsing.</param>
      <param name="title">The string that is displayed above the tree view control in the dialog box.</param>
      <param name="flags">Flags that specify the options for the dialog box.</param>
      <param name="callback">The callback function that the dialog box calls when an event occurs..</param>
      <param name="displayNameBuffer">Buffer that receives the display name of the folder selected by the user.</param>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.BROWSEINFO.DisplayName">
      <summary>
            Gets the display name.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.hwndOwner">
      <summary>A handle to the owner window for the dialog box.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.iImage">
      <summary>An integer value that receives the index of the image associated with the selected folder, stored in the system image list.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.lParam">
      <summary>An application-defined value that the dialog box passes to the callback function, if one is specified in <see cref="F:Vanara.PInvoke.Shell32.BROWSEINFO.lpfn" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.lpfn">
      <summary>
            Pointer to an application-defined function that the dialog box calls when an event occurs. For more information, see the BrowseCallbackProc
            function. This member can be NULL.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.lpszTitle">
      <summary>
            Pointer to a null-terminated string that is displayed above the tree view control in the dialog box. This string can be used to specify
            instructions to the user.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.pidlRoot">
      <summary>
            A PIDL that specifies the location of the root folder from which to start browsing. Only the specified folder and its subfolders in the namespace
            hierarchy appear in the dialog box. This member can be NULL; in that case, a default location is used.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.pszDisplayName">
      <summary>
            Pointer to a buffer to receive the display name of the folder selected by the user. The size of this buffer is assumed to be MAX_PATH characters.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BROWSEINFO.ulFlags">
      <summary>
            Flags that specify the options for the dialog box. This member can be 0 or a combination of the following values. Version numbers refer to the
            minimum version of Shell32.dll required for SHBrowseForFolder to recognize flags added in later releases.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.BrowseInfoFlag">
      <summary>Flags enumeration to specify the dialog style.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_RETURNONLYFSDIRS">
      <summary>
            Only return file system directories. If the user selects folders that are not part of the file system, the OK button is grayed. <note>The OK
            button remains enabled for "\\server" items, as well as "\\server\share" and directory items. However, if the user selects a "\\server" item,
            passing the PIDL returned by SHBrowseForFolder to SHGetPathFromIDList fails.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_DONTGOBELOWDOMAIN">
      <summary>Do not include network folders below the domain level in the dialog box's tree view control.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_STATUSTEXT">
      <summary>
            Include a status area in the dialog box. The callback function can set the status text by sending messages to the dialog box. This flag is not
            supported when BIF_NEWDIALOGSTYLE is specified.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_RETURNFSANCESTORS">
      <summary>
            Only return file system ancestors. An ancestor is a subfolder that is beneath the root folder in the namespace hierarchy. If the user selects an
            ancestor of the root folder that is not part of the file system, the OK button is grayed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_EDITBOX">
      <summary>Version 4.71. Include an edit control in the browse dialog box that allows the user to type the name of an item.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_VALIDATE">
      <summary>
            Version 4.71. If the user types an invalid name into the edit box, the browse dialog box calls the application's BrowseCallbackProc with the
            BFFM_VALIDATEFAILED message. This flag is ignored if BIF_EDITBOX is not specified.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_NEWDIALOGSTYLE">
      <summary>
            Version 5.0. Use the new user interface. Setting this flag provides the user with a larger dialog box that can be resized. The dialog box has
            several new capabilities, including: drag-and-drop capability within the dialog box, reordering, shortcut menus, new folders, delete, and other
            shortcut menu commands. <note>If COM is initialized through CoInitializeEx with the COINIT_MULTITHREADED flag set, SHBrowseForFolder fails if
            BIF_NEWDIALOGSTYLE is passed.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_USENEWUI">
      <summary>
            Version 5.0. Use the new user interface, including an edit box. This flag is equivalent to BIF_EDITBOX | BIF_NEWDIALOGSTYLE. <note>If COM is
            initialized through CoInitializeEx with the COINIT_MULTITHREADED flag set, SHBrowseForFolder fails if BIF_USENEWUI is passed.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEINCLUDEURLS">
      <summary>
            Version 5.0. The browse dialog box can display URLs. The BIF_USENEWUI and BIF_BROWSEINCLUDEFILES flags must also be set. If any of these three
            flags are not set, the browser dialog box rejects URLs. Even when these flags are set, the browse dialog box displays URLs only if the folder
            that contains the selected item supports URLs. When the folder's IShellFolder::GetAttributesOf method is called to request the selected item's
            attributes, the folder must set the SFGAO_FOLDER attribute flag. Otherwise, the browse dialog box will not display the URL.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_UAHINT">
      <summary>
            Version 6.0. When combined with BIF_NEWDIALOGSTYLE, adds a usage hint to the dialog box, in place of the edit box. BIF_EDITBOX overrides this flag.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_NONEWFOLDERBUTTON">
      <summary>Version 6.0. Do not include the New Folder button in the browse dialog box.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_NOTRANSLATETARGETS">
      <summary>Version 6.0. When the selected item is a shortcut, return the PIDL of the shortcut itself rather than its target.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEFORCOMPUTER">
      <summary>Only return computers. If the user selects anything other than a computer, the OK button is grayed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEFORPRINTER">
      <summary>
            Only allow the selection of printers. If the user selects anything other than a printer, the OK button is grayed.
            <para>
            In Windows XP and later systems, the best practice is to use a Windows XP-style dialog, setting the root of the dialog to the Printers and Faxes
            folder (CSIDL_PRINTERS).
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEINCLUDEFILES">
      <summary>Version 4.71. The browse dialog box displays files as well as folders.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_SHAREABLE">
      <summary>
            Version 5.0. The browse dialog box can display sharable resources on remote systems. This is intended for applications that want to expose remote
            shares on a local system. The BIF_NEWDIALOGSTYLE flag must also be set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.BrowseInfoFlag.BIF_BROWSEFILEJUNCTIONS">
      <summary>Windows 7 and later. Allow folder junctions such as a library or a compressed file with a .zip file name extension to be browsed.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.CDestinationList">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.CDestinationList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.CDestinationList.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.Shell32.CDestinationList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.CEnumerableObjectCollection">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.CEnumerableObjectCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.CEnumerableObjectCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.Shell32.CEnumerableObjectCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.CKnownFolderManager">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.CKnownFolderManager</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.CKnownFolderManager.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.Shell32.CKnownFolderManager</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC">
      <summary>Used generically to filter elements.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC.pszName">
      <summary>A pointer to a buffer that contains the friendly name of the filter.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC.pszSpec">
      <summary>A pointer to a buffer that contains the filter pattern.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.COORD">
      <summary>
            Defines the coordinates of a character cell in a console screen buffer. The origin of the coordinate system (0,0) is at the top, left cell of the buffer.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.COORD.X">
      <summary>The horizontal coordinate or column value. The units depend on the function call.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.COORD.Y">
      <summary>The vertical coordinate or row value. The units depend on the function call.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.CShellLinkW">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.CShellLinkW</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.CShellLinkW.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.Shell32.CShellLinkW</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.CTaskbarList">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.CTaskbarList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.CTaskbarList.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.Shell32.CTaskbarList</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.DATABLOCKHEADER">
      <summary>Serves as the header for some of the extra data structures used by IShellLinkDataList.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.DATABLOCKHEADER.cbSize">
      <summary>The size of the extra data block.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.DATABLOCKHEADER.dwSignature">
      <summary>A signature that identifies the type of data block that follows the header.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK">
      <summary>Holds an extra data block used by IShellLinkDataList. It holds the link's Windows Installer ID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK.dbh">
      <summary>
            DATABLOCK_HEADER structure stating the size and signature of the EXP_DARWIN_LINK structure. The following is the only recognized signature value: EXP_DARWIN_ID_SIG
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK.szDarwinID">
      <summary>The link's ID in the form of an ANSI string.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_DARWIN_LINK.szwDarwinID">
      <summary>The link's ID in the form of an Unicode string.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER">
      <summary>Holds an extra data block used by IShellLinkDataList. It holds special folder information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.cbOffset">
      <summary>The offset into the saved PIDL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.cbSize">
      <summary>The size of the EXP_SPECIAL_FOLDER structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.dwSignature">
      <summary>The structure's signature. It should be set to EXP_SPECIAL_FOLDER_SIG.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SPECIAL_FOLDER.idSpecialFolder">
      <summary>The ID of the special folder that the link points into.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.EXP_SZ_LINK">
      <summary>Holds an extra data block used by IShellLinkDataList. It holds expandable environment strings for the icon or target.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.cbSize">
      <summary>The size of the EXP_SZ_LINK structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.dwSignature">
      <summary>
            The structure's signature. It can have one of the following values: EXP_SZ_LINK_SIG = Contains the link's target path; EXP_SZ_ICON_SIG = Contains
            the links icon path.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.swzTarget">
      <summary>The null-terminated Unicode string with the path of the target or icon.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.EXP_SZ_LINK.szTarget">
      <summary>The null-terminated ANSI string with the path of the target or icon.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.FDAP">
      <summary>Specifies list placement.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FDAP.FDAP_BOTTOM">
      <summary>The place is added to the bottom of the default list.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FDAP.FDAP_TOP">
      <summary>The place is added to the top of the default list.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE">
      <summary>
            Specifies the values used by the IFileDialogEvents::OnShareViolation method to indicate an application's response to a sharing violation that occurs
            when a file is opened or saved.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE.FDESVR_DEFAULT">
      <summary>
            The application has not handled the event. The dialog displays a UI that indicates that the file is in use and a different file must be chosen.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE.FDESVR_ACCEPT">
      <summary>The application has determined that the file should be returned from the dialog.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE.FDESVR_REFUSE">
      <summary>The application has determined that the file should not be returned from the dialog.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.FFFP_MODE">
      <summary>Describes match criteria. Used by methods of the IKnownFolderManager interface.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FFFP_MODE.FFFP_EXACTMATCH">
      <summary>Exact match.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FFFP_MODE.FFFP_NEARESTPARENTMATCH">
      <summary>Nearest parent match.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS">
      <summary>Defines the set of options available to an Open or Save dialog.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_OVERWRITEPROMPT">
      <summary>When saving a file, prompt before overwriting an existing file of the same name. This is a default value for the Save dialog.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_STRICTFILETYPES">
      <summary>In the Save dialog, only allow the user to choose a file that has one of the file name extensions specified through IFileDialog::SetFileTypes.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOCHANGEDIR">
      <summary>Don't change the current working directory.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_PICKFOLDERS">
      <summary>Present an Open dialog that offers a choice of folders rather than files.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FORCEFILESYSTEM">
      <summary>Ensures that returned items are file system items (SFGAO_FILESYSTEM). Note that this does not apply to items returned by IFileDialog::GetCurrentSelection.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_ALLNONSTORAGEITEMS">
      <summary>
            Enables the user to choose any item in the Shell namespace, not just those with SFGAO_STREAM or SFAGO_FILESYSTEM attributes. This flag cannot be
            combined with FOS_FORCEFILESYSTEM.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOVALIDATE">
      <summary>
            Do not check for situations that would prevent an application from opening the selected file, such as sharing violations or access denied errors.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_ALLOWMULTISELECT">
      <summary>
            Enables the user to select multiple items in the open dialog. Note that when this flag is set, the IFileOpenDialog interface must be used to
            retrieve those items.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_PATHMUSTEXIST">
      <summary>The item returned must be in an existing folder. This is a default value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FILEMUSTEXIST">
      <summary>The item returned must exist. This is a default value for the Open dialog.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_CREATEPROMPT">
      <summary>Prompt for creation if the item returned in the save dialog does not exist. Note that this does not actually create the item.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_SHAREAWARE">
      <summary>
            In the case of a sharing violation when an application is opening a file, call the application back through OnShareViolation for guidance. This
            flag is overridden by FOS_NOVALIDATE.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOREADONLYRETURN">
      <summary>Do not return read-only items. This is a default value for the Save dialog.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NOTESTFILECREATE">
      <summary>
            Do not test whether creation of the item as specified in the Save dialog will be successful. If this flag is not set, the calling application
            must handle errors, such as denial of access, discovered when the item is created.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_HIDEMRUPLACES">
      <summary>Hide the list of places from which the user has recently opened or saved items. This value is not supported as of Windows 7.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_HIDEPINNEDPLACES">
      <summary>
            Hide items shown by default in the view's navigation pane. This flag is often used in conjunction with the IFileDialog::AddPlace method, to hide
            standard locations and replace them with custom locations.
            <para><c>Windows 7</c> and later. Hide all of the standard namespace locations (such as Favorites, Libraries, Computer, and Network) shown in the
            navigation pane.
            </para><para><c>Windows Vista.</c> Hide the contents of the Favorite Links tree in the navigation pane. Note that the category itself is still displayed, but
            shown as empty.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_NODEREFERENCELINKS">
      <summary>
            Shortcuts should not be treated as their target items. This allows an application to open a .lnk file rather than what that file is a shortcut to.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_DONTADDTORECENT">
      <summary>Do not add the item being opened or saved to the recent documents list (SHAddToRecentDocs).</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FORCESHOWHIDDEN">
      <summary>Include hidden and system items.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_DEFAULTNOMINIMODE">
      <summary>
            Indicates to the Save As dialog box that it should open in expanded mode. Expanded mode is the mode that is set and unset by clicking the button
            in the lower-left corner of the Save As dialog box that switches between Browse Folders and Hide Folders when clicked. This value is not
            supported as of Windows 7.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_FORCEPREVIEWPANEON">
      <summary>Indicates to the Open dialog box that the preview pane should always be displayed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS.FOS_SUPPORTSTREAMABLEITEMS">
      <summary>Indicates that the caller is opening a file as a stream (BHID_Stream), so there is no need to download that file.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IApplicationDestinations">
      <summary>Exposes methods that allow an application to remove one or all destinations from the Recent or Frequent categories in a Jump List.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IApplicationDestinations.RemoveAllDestinations">
      <summary>Clears all destination entries from the Recent and Frequent categories in an application's Jump List.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IApplicationDestinations.RemoveDestination(System.Object)">
      <summary>Removes a single destination from the Recent and Frequent categories in a Jump List.</summary>
      <param name="punk">A pointer to the IShellItem or IShellLink that represents the destination to remove.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IApplicationDestinations.SetAppID(System.String)">
      <summary>
            Specifies a unique AppUserModelID for the application from whose taskbar button's Jump List the methods of this interface will remove
            destinations. This method is optional.
            </summary>
      <param name="pszAppID">Pointer to the AppUserModelID of the process whose taskbar button representation receives the Jump List.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IApplicationDocumentLists">
      <summary>Allows an application to retrieve the most recent and frequent documents opened in that app, as reported via SHAddToRecentDocs</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IApplicationDocumentLists.GetList(Vanara.PInvoke.Shell32.APPDOCLISTTYPE,System.UInt32,System.Guid)">
      <summary>Retrieve an IEnumObjects or IObjectArray for IShellItems and/or IShellLinks. Items may appear in both the frequent and recent lists.</summary>
      <param name="listtype">Which of the known list types to retrieve</param>
      <param name="cItemsDesired">The number of items desired.</param>
      <param name="riid">The interface Id that the return value should be queried for.</param>
      <returns>A COM object based on the IID passed for the riid parameter.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IApplicationDocumentLists.SetAppID(System.String)">
      <summary>
            Set the App User Model ID for the application retrieving this list. If an AppID is not provided via this method, the system will use a
            heuristically determined ID. This method must be called before GetList.
            </summary>
      <param name="pszAppID">App Id.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ICustomDestinationList">
      <summary>Exposes methods that allow an application to provide a custom Jump List, including destinations and tasks, for display in the taskbar.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AbortList">
      <summary>Discontinues a Jump List building session initiated by ICustomDestinationList::BeginList without committing any changes.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AddUserTasks(Vanara.PInvoke.Shell32.IObjectArray)">
      <summary>Specifies items to include in the Tasks category of a custom Jump List.</summary>
      <param name="poa">
            A pointer to an IObjectArray that represents one or more IShellLink (or, more rarely, IShellItem) objects that represent the tasks. <note>Any
            IShellLink used here must declare an argument list through SetArguments. Adding an IShellLink object with no arguments to a custom category is
            not supported. A user cannot pin or unpin this type of item from a Jump List, nor can they be added or removed.</note></param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AppendCategory(System.String,Vanara.PInvoke.Shell32.IObjectArray)">
      <summary>Defines a custom category and the destinations that it contains, for inclusion in a custom Jump List.</summary>
      <param name="pszCategory">
            A pointer to a string that contains the display name of the custom category. This string is shown in the category's header in the Jump List. The
            string can directly hold the display name or it can be an indirect string representation, such as "@shell32.dll,-1324", to use a stored string.
            An indirect string enables the category header to be displayed in the user's selected language. <note>Each custom category must have a unique
            name. Duplicate category names will cause presentation issues in the Jump List.</note></param>
      <param name="poa">
            A pointer to an IObjectArray that represents one or more IShellItem objects that represent the destinations in the category. Some destinations in
            the list might also be represented by IShellLink objects, although less often. <note>Any IShellLink used here must declare an argument list
            through SetArguments. Adding an IShellLink object with no arguments to a custom category is not supported since a user cannot pin or unpin this
            type of item from a Jump List, nor can they be added or removed.</note></param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.AppendKnownCategory(Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY)">
      <summary>Specifies that the Frequent or Recent category should be included in a custom Jump List.</summary>
      <param name="category">One of the KNOWNDESTCATEGORY values that indicate which known category to add to the list.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.BeginList(System.UInt32@,System.Guid)">
      <summary>Initiates a building session for a custom Jump List.</summary>
      <param name="pcMaxSlots">
            A pointer that, when this method returns, points to the current user setting for the Number of recent items to display in Jump Lists option in
            the Taskbar and Start Menu Properties window. The default value is 10. This is the maximum number of destinations that will be shown, and it is a
            total of all destinations, regardless of category. More destinations can be added, but they will not be shown in the UI.
            <para>A Jump List will always show at least this many slots—destinations and, if there is room, tasks.</para><para>
            This number does not include separators and section headers as long as the total number of separators and headers does not exceed four.
            Separators and section headers beyond the first four might reduce the number of destinations displayed if space is constrained. This number does
            not affect the standard command entries for pinning or unpinning, closing the window, or launching a new instance. It also does not affect tasks
            or pinned items, the number of which that can be displayed is based on the space available to the Jump List.
            </para></param>
      <param name="riid">
            A reference to the IID of an interface to be retrieved in ppv, typically IID_IObjectArray, that will represent all items currently stored in the
            list of removed destinations for the application. This information is used to ensure that removed items are not part of the new Jump List.
            </param>
      <returns>
            When this method returns, contains the interface pointer requested in riid. This is typically an IObjectArray, which represents a collection of
            IShellItem and IShellLink objects that represent the removed items.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.CommitList">
      <summary>Declares that the Jump List initiated by a call to ICustomDestinationList::BeginList is complete and ready for display.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.DeleteList(System.String)">
      <summary>Deletes a custom Jump List for a specified application.</summary>
      <param name="pszAppID">
            A pointer to the AppUserModelID of the process whose taskbar button representation displays the custom Jump List. In the beta release of Windows
            7, this AppUserModelID must be explicitly provided because this method is intended to be called from an uninstaller, which runs in a separate
            process. Because it is in a separate process, the system cannot reliably deduce the AppUserModelID. This restriction is expected to be removed in
            later releases.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.GetRemovedDestinations(System.Guid)">
      <summary>
            Retrieves the current list of destinations that have been removed by the user from the existing Jump List that this custom Jump List is meant to replace.
            </summary>
      <param name="riid">A reference to the IID of the interface to retrieve through ppv, typically IID_IObjectArray.</param>
      <returns>
            When this method returns, contains the interface pointer requested in riid. This is typically an IObjectArray, which represents a collection of
            IShellItem or IShellLink objects that represent the items in the list of removed destinations.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ICustomDestinationList.SetAppID(System.String)">
      <summary>
            Specifies a unique Application User Model ID (AppUserModelID) for the application whose taskbar button will hold the custom Jump List built
            through the methods of this interface. This method is optional.
            </summary>
      <param name="pszAppID">A pointer to the AppUserModelID of the process or application whose taskbar representation receives the Jump List.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IEnumIDList">
      <summary>
            Exposes a standard set of methods used to enumerate the pointers to item identifier lists (PIDLs) of the items in a Shell folder. When a folder's
            IShellFolder::EnumObjects method is called, it creates an enumeration object and passes a pointer to the object's IEnumIDList interface back to the
            calling application.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Clone">
      <summary>Creates a new item enumeration object with the same contents and state as the current one.</summary>
      <returns>
            The address of a pointer to the new enumeration object. The calling application must eventually free the new object by calling its Release member function.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Next(System.UInt32,System.IntPtr@,System.UInt32@)">
      <summary>
            Retrieves the specified number of item identifiers in the enumeration sequence and advances the current position by the number of items retrieved.
            </summary>
      <param name="celt">The number of elements in the array referenced by the rgelt parameter.</param>
      <param name="rgelt">
            The address of a pointer to an array of ITEMIDLIST pointers that receive the item identifiers. The implementation must allocate these item
            identifiers using CoTaskMemAlloc. The calling application is responsible for freeing the item identifiers using CoTaskMemFree.
            </param>
      <param name="pceltFetched">
            A pointer to a value that receives a count of the item identifiers actually returned in rgelt. The count can be smaller than the value specified
            in the celt parameter. This parameter can be NULL on entry only if celt = 1, because in that case the method can only retrieve one (S_OK) or zero
            (S_FALSE) items.
            </param>
      <returns>
            Returns S_OK if the method successfully retrieved the requested celt elements. This method only returns S_OK if the full count of requested items
            are successfully retrieved. S_FALSE indicates that more items were requested than remained in the enumeration.The value pointed to by the
            pceltFetched parameter specifies the actual number of items retrieved. Note that the value will be 0 if there are no more items to retrieve.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Reset">
      <summary>Returns to the beginning of the enumeration sequence.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumIDList.Skip(System.UInt32)">
      <summary>Skips the specified number of elements in the enumeration sequence.</summary>
      <param name="celt">The number of item identifiers to skip.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IEnumShellItems">
      <summary>Exposes enumeration of IShellItem interfaces. This interface is typically obtained by calling the IEnumShellItems method.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Clone">
      <summary>Gets a copy of the current enumeration.</summary>
      <returns>The address of a pointer that receives a copy of this enumeration.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Next(System.UInt32,Vanara.PInvoke.Shell32.IShellItem[],System.UInt32@)">
      <summary>Gets an array of one or more IShellItem interfaces from the enumeration.</summary>
      <param name="celt">The number of elements in the array referenced by the rgelt parameter.</param>
      <param name="rgelt">
            The address of an array of pointers to IShellItem interfaces that receive the enumerated item or items. The calling application is responsible
            for freeing the IShellItem interfaces by calling the IUnknown::Release method.
            </param>
      <param name="pceltFetched">
            A pointer to a value that receives the number of IShellItem interfaces successfully retrieved. The count can be smaller than the value specified
            in the celt parameter. This parameter can be NULL on entry only if celt is one, because in that case the method can only retrieve one item and
            return S_OK, or zero items and return S_FALSE.
            </param>
      <returns>
            Returns S_OK if the method successfully retrieved the requested celt elements. This method only returns S_OK if the full count of requested items
            are successfully retrieved. S_FALSE indicates that more items were requested than remained in the enumeration. The value pointed to by the
            pceltFetched parameter specifies the actual number of items retrieved. Note that the value will be 0 if there are no more items to retrieve.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Reset">
      <summary>Returns to the beginning of the enumeration sequence.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IEnumShellItems.Skip(System.UInt32)">
      <summary>Skips the specified number of elements in the enumeration sequence.</summary>
      <param name="celt">The number of IShellItem interfaces to skip.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IFileDialog">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.IFileDialog</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.AddPlace(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDAP)">
      <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
      <param name="psi">A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.</param>
      <param name="fdap">Specifies where the folder is placed within the list.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Advise(Vanara.PInvoke.Shell32.IFileDialogEvents)">
      <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
      <param name="pfde">A pointer to an IFileDialogEvents implementation that will receive events from the dialog.</param>
      <returns>
            A DWORD value identiying this event handler. When the client is finished with the dialog, that client must call the IFileDialog::Unadvise method
            with this value.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.ClearClientData">
      <summary>Instructs the dialog to clear all persisted state information.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Close(Vanara.PInvoke.HRESULT)">
      <summary>Closes the dialog.</summary>
      <param name="hr">The code that will be returned by Show to indicate that the dialog was closed before a selection was made.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetCurrentSelection">
      <summary>Gets the user's current selection in the dialog.</summary>
      <returns>
            The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file or folder selected
            in the view window, or something that the user has entered into the dialog's edit box. The latter case may require a parsing operation
            (cancelable by the user) that blocks the current thread.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetFileName">
      <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
      <returns>The address of a pointer to a buffer that, when this method returns successfully, receives the text.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetFileTypeIndex">
      <summary>Gets the currently selected file type.</summary>
      <returns>
            A UINT value that receives the index of the selected file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetFolder">
      <summary>
            Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to be selected when the
            dialog is opened.
            </summary>
      <returns>The address of a pointer to the interface that represents the folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetOptions">
      <summary>Gets the current flags that are set to control dialog behavior.</summary>
      <returns>When this method returns successfully, points to a value made up of one or more of the FILEOPENDIALOGOPTIONS values.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.GetResult">
      <summary>Gets the choice that the user made in the dialog.</summary>
      <returns>The address of a pointer to an IShellItem that represents the user's choice.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetClientGuid(System.Guid)">
      <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
      <param name="guid">The GUID to associate with this dialog state.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetDefaultExtension(System.String)">
      <summary>Sets the default extension to be added to file names.</summary>
      <param name="pszDefaultExtension">
            A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg" is correct, while
            ".jpg" is not.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetDefaultFolder(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
      <param name="psi">A pointer to the interface that represents the folder.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileName(System.String)">
      <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
      <param name="pszName">A pointer to the name of the file.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileNameLabel(System.String)">
      <summary>Sets the text of the label next to the file name edit box.</summary>
      <param name="pszLabel">A pointer to a buffer that contains the label text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileTypeIndex(System.UInt32)">
      <summary>Sets the file type that appears as selected in the dialog.</summary>
      <param name="iFileType">
            The index of the file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter. Note that this is a one-based
            index, not zero-based.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFileTypes(System.UInt32,Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC[])">
      <summary>Sets the file types that the dialog can open or save.</summary>
      <param name="cFileTypes">The number of elements in the array specified by rgFilterSpec.</param>
      <param name="rgFilterSpec">A pointer to an array of COMDLG_FILTERSPEC structures, each representing a file type.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFilter(System.Object)">
      <summary>Sets the filter. <note>Deprecated. SetFilter is no longer available for use as of Windows 7.</note></summary>
      <param name="pFilter">A pointer to the IShellItemFilter that is to be set.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetFolder(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
      <param name="psi">A pointer to the interface that represents the folder.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetOkButtonLabel(System.String)">
      <summary>Sets the text of the Open or Save button.</summary>
      <param name="pszText">A pointer to a buffer that contains the button text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetOptions(Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS)">
      <summary>Sets flags to control the behavior of the dialog.</summary>
      <param name="fos">One or more of the FILEOPENDIALOGOPTIONS values.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.SetTitle(System.String)">
      <summary>Sets the title of the dialog.</summary>
      <param name="pszTitle">A pointer to a buffer that contains the title text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Show(System.IntPtr)">
      <summary>Launches the modal window.</summary>
      <param name="parent">The handle of the owner window. This value can be NULL.</param>
      <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by canceling the operation.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialog.Unadvise(System.UInt32)">
      <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
      <param name="dwCookie">
            The DWORD value that represents the event handler. This value is obtained through the pdwCookie parameter of the IFileDialog::Advise method.
            </param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IFileDialogEvents">
      <summary>Exposes methods that allow notification of events within a common file dialog.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnFileOk(Vanara.PInvoke.Shell32.IFileDialog)">
      <summary>Called just before the dialog is about to return with a result.</summary>
      <param name="pfd">A pointer to the interface that represents the dialog.</param>
      <returns>
            Implementations should return S_OK to accept the current result in the dialog or S_FALSE to refuse it. In the case of S_FALSE, the dialog should
            remain open.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnFolderChange(Vanara.PInvoke.Shell32.IFileDialog)">
      <summary>Called when the user navigates to a new folder.</summary>
      <param name="pfd">A pointer to the interface that represents the dialog.</param>
      <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnFolderChanging(Vanara.PInvoke.Shell32.IFileDialog,Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Called before IFileDialogEvents::OnFolderChange. This allows the implementer to stop navigation to a particular location.</summary>
      <param name="pfd">A pointer to the interface that represents the dialog.</param>
      <param name="psiFolder">A pointer to an interface that represents the folder to which the dialog is about to navigate.</param>
      <returns>
            Returns S_OK if successful, or an error value otherwise. A return value of S_OK or E_NOTIMPL indicates that the folder change can proceed.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnOverwrite(Vanara.PInvoke.Shell32.IFileDialog,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE@)">
      <summary>Called from the save dialog when the user chooses to overwrite a file.</summary>
      <param name="pfd">A pointer to the interface that represents the dialog.</param>
      <param name="psi">A pointer to the interface that represents the item that will be overwritten.</param>
      <param name="pResponse">
            A pointer to a value from the FDE_OVERWRITE_RESPONSE enumeration indicating the response to the potential overwrite action.
            </param>
      <returns>The implementer should return E_NOTIMPL if this method is not implemented; S_OK or an appropriate error code otherwise.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnSelectionChange(Vanara.PInvoke.Shell32.IFileDialog)">
      <summary>Called when the user changes the selection in the dialog's view.</summary>
      <param name="pfd">A pointer to the interface that represents the dialog.</param>
      <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnShareViolation(Vanara.PInvoke.Shell32.IFileDialog,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDE_SHAREVIOLATION_RESPONSE@)">
      <summary>Enables an application to respond to sharing violations that arise from Open or Save operations.</summary>
      <param name="pfd">A pointer to the interface that represents the dialog.</param>
      <param name="psi">A pointer to the interface that represents the item that has the sharing violation.</param>
      <param name="pResponse">A pointer to a value from the FDE_SHAREVIOLATION_RESPONSE enumeration indicating the response to the sharing violation.</param>
      <returns>The implementer should return E_NOTIMPL if this method is not implemented; S_OK or an appropriate error code otherwise.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileDialogEvents.OnTypeChange(Vanara.PInvoke.Shell32.IFileDialog)">
      <summary>Called when the dialog is opened to notify the application of the initial chosen filetype.</summary>
      <param name="pfd">A pointer to the interface that represents the dialog.</param>
      <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IFileOpenDialog">
      <summary>Extends the IFileDialog interface by adding methods specific to the open dialog.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.AddPlace(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDAP)">
      <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
      <param name="psi">A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.</param>
      <param name="fdap">Specifies where the folder is placed within the list.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Advise(Vanara.PInvoke.Shell32.IFileDialogEvents)">
      <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
      <param name="pfde">A pointer to an IFileDialogEvents implementation that will receive events from the dialog.</param>
      <returns>
            A DWORD value identiying this event handler. When the client is finished with the dialog, that client must call the IFileDialog::Unadvise method
            with this value.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.ClearClientData">
      <summary>Instructs the dialog to clear all persisted state information.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Close(Vanara.PInvoke.HRESULT)">
      <summary>Closes the dialog.</summary>
      <param name="hr">The code that will be returned by Show to indicate that the dialog was closed before a selection was made.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetCurrentSelection">
      <summary>Gets the user's current selection in the dialog.</summary>
      <returns>
            The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file or folder selected
            in the view window, or something that the user has entered into the dialog's edit box. The latter case may require a parsing operation
            (cancelable by the user) that blocks the current thread.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetFileName">
      <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
      <returns>The address of a pointer to a buffer that, when this method returns successfully, receives the text.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetFileTypeIndex">
      <summary>Gets the currently selected file type.</summary>
      <returns>
            A UINT value that receives the index of the selected file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetFolder">
      <summary>
            Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to be selected when the
            dialog is opened.
            </summary>
      <returns>The address of a pointer to the interface that represents the folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetOptions">
      <summary>Gets the current flags that are set to control dialog behavior.</summary>
      <returns>When this method returns successfully, points to a value made up of one or more of the FILEOPENDIALOGOPTIONS values.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetResult">
      <summary>Gets the choice that the user made in the dialog.</summary>
      <returns>The address of a pointer to an IShellItem that represents the user's choice.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetResults">
      <summary>Gets the user's choices in a dialog that allows multiple selection.</summary>
      <returns>The address of a pointer to an IShellItemArray through which the items selected in the dialog can be accessed.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.GetSelectedItems">
      <summary>
            Gets the currently selected items in the dialog. These items may be items selected in the view, or text selected in the file name edit box.
            </summary>
      <returns>The address of a pointer to an IShellItemArray through which the selected items can be accessed.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetClientGuid(System.Guid)">
      <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
      <param name="guid">The GUID to associate with this dialog state.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetDefaultExtension(System.String)">
      <summary>Sets the default extension to be added to file names.</summary>
      <param name="pszDefaultExtension">
            A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg" is correct, while
            ".jpg" is not.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetDefaultFolder(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
      <param name="psi">A pointer to the interface that represents the folder.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileName(System.String)">
      <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
      <param name="pszName">A pointer to the name of the file.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileNameLabel(System.String)">
      <summary>Sets the text of the label next to the file name edit box.</summary>
      <param name="pszLabel">A pointer to a buffer that contains the label text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileTypeIndex(System.UInt32)">
      <summary>Sets the file type that appears as selected in the dialog.</summary>
      <param name="iFileType">
            The index of the file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter. Note that this is a one-based
            index, not zero-based.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFileTypes(System.UInt32,Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC[])">
      <summary>Sets the file types that the dialog can open or save.</summary>
      <param name="cFileTypes">The number of elements in the array specified by rgFilterSpec.</param>
      <param name="rgFilterSpec">A pointer to an array of COMDLG_FILTERSPEC structures, each representing a file type.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFilter(System.Object)">
      <summary>Sets the filter. <note>Deprecated. SetFilter is no longer available for use as of Windows 7.</note></summary>
      <param name="pFilter">A pointer to the IShellItemFilter that is to be set.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetFolder(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
      <param name="psi">A pointer to the interface that represents the folder.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetOkButtonLabel(System.String)">
      <summary>Sets the text of the Open or Save button.</summary>
      <param name="pszText">A pointer to a buffer that contains the button text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetOptions(Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS)">
      <summary>Sets flags to control the behavior of the dialog.</summary>
      <param name="fos">One or more of the FILEOPENDIALOGOPTIONS values.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.SetTitle(System.String)">
      <summary>Sets the title of the dialog.</summary>
      <param name="pszTitle">A pointer to a buffer that contains the title text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Show(System.IntPtr)">
      <summary>Launches the modal window.</summary>
      <param name="parent">The handle of the owner window. This value can be NULL.</param>
      <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by canceling the operation.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOpenDialog.Unadvise(System.UInt32)">
      <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
      <param name="dwCookie">
            The DWORD value that represents the event handler. This value is obtained through the pdwCookie parameter of the IFileDialog::Advise method.
            </param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IFileOperationProgressSink">
      <summary>
            Exposes methods that provide a rich notification system used by callers of IFileOperation to monitor the details of the operations they are
            performing through that interface.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.FinishOperations(System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.FinishOperations(System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hrResult">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hrResult</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.FinishOperations(System.UInt32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PauseTimer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PauseTimer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiDestinationFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiDestinationFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="hrCopy">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hrCopy</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiNewlyCreated">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiNewlyCreated</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="hrDelete">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hrDelete</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiNewlyCreated">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiNewlyCreated</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiDestinationFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiDestinationFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="hrMove">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hrMove</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiNewlyCreated">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiNewlyCreated</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiDestinationFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiDestinationFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszTemplateName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszTemplateName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="dwFileAttributes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFileAttributes</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="hrNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hrNew</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiNewItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiNewItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.String,System.UInt32,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="hrRename">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hrRename</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiNewlyCreated">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiNewlyCreated</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PostRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String,System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiDestinationFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiDestinationFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreCopyItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreDeleteItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiDestinationFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiDestinationFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreMoveItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiDestinationFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiDestinationFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreNewItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dwFlags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dwFlags</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="psiItem">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>psiItem</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszNewName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszNewName</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.PreRenameItem(System.UInt32,Vanara.PInvoke.Shell32.IShellItem,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.ResetTimer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.ResetTimer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.ResumeTimer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.ResumeTimer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.StartOperations">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.StartOperations</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.UpdateProgress(System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.UpdateProgress(System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="iWorkTotal">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>iWorkTotal</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.UpdateProgress(System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="iWorkSoFar">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>iWorkSoFar</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IFileOperationProgressSink.UpdateProgress(System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IFileSaveDialog">
      <summary>
            Extends the IFileDialog interface by adding methods specific to the save dialog, which include those that provide support for the collection of
            metadata to be persisted with the file.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.AddPlace(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.FDAP)">
      <summary>Adds a folder to the list of places available for the user to open or save items.</summary>
      <param name="psi">A pointer to an IShellItem that represents the folder to be made available to the user. This can only be a folder.</param>
      <param name="fdap">Specifies where the folder is placed within the list.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Advise(Vanara.PInvoke.Shell32.IFileDialogEvents)">
      <summary>Assigns an event handler that listens for events coming from the dialog.</summary>
      <param name="pfde">A pointer to an IFileDialogEvents implementation that will receive events from the dialog.</param>
      <returns>
            A DWORD value identiying this event handler. When the client is finished with the dialog, that client must call the IFileDialog::Unadvise method
            with this value.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.ApplyProperties(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.PropSys.IPropertyStore,System.IntPtr,Vanara.PInvoke.Shell32.IFileOperationProgressSink)">
      <summary>Applies a set of properties to an item using the Shell's copy engine.</summary>
      <param name="psi">Pointer to the IShellItem that represents the file being saved. This is usually the item retrieved by GetResult.</param>
      <param name="pStore">
            Pointer to the IPropertyStore that represents the property values to be applied to the file. This can be the property store returned by IFileSaveDialog::GetProperties.
            </param>
      <param name="hwnd">The handle of the application window.</param>
      <param name="pSink">
            Pointer to an optional IFileOperationProgressSink that the calling application can use if they want to be notified of the progress of the
            property stamping. This value may be NULL.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.ClearClientData">
      <summary>Instructs the dialog to clear all persisted state information.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Close(Vanara.PInvoke.HRESULT)">
      <summary>Closes the dialog.</summary>
      <param name="hr">The code that will be returned by Show to indicate that the dialog was closed before a selection was made.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetCurrentSelection">
      <summary>Gets the user's current selection in the dialog.</summary>
      <returns>
            The address of a pointer to the interface that represents the item currently selected in the dialog. This item can be a file or folder selected
            in the view window, or something that the user has entered into the dialog's edit box. The latter case may require a parsing operation
            (cancelable by the user) that blocks the current thread.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetFileName">
      <summary>Retrieves the text currently entered in the dialog's File name edit box.</summary>
      <returns>The address of a pointer to a buffer that, when this method returns successfully, receives the text.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetFileTypeIndex">
      <summary>Gets the currently selected file type.</summary>
      <returns>
            A UINT value that receives the index of the selected file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetFolder">
      <summary>
            Gets either the folder currently selected in the dialog, or, if the dialog is not currently displayed, the folder that is to be selected when the
            dialog is opened.
            </summary>
      <returns>The address of a pointer to the interface that represents the folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetOptions">
      <summary>Gets the current flags that are set to control dialog behavior.</summary>
      <returns>When this method returns successfully, points to a value made up of one or more of the FILEOPENDIALOGOPTIONS values.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetProperties">
      <summary>Retrieves the set of property values for a saved item or an item in the process of being saved.</summary>
      <returns>Address of a pointer to an IPropertyStore that receives the property values.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.GetResult">
      <summary>Gets the choice that the user made in the dialog.</summary>
      <returns>The address of a pointer to an IShellItem that represents the user's choice.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetClientGuid(System.Guid)">
      <summary>Enables a calling application to associate a GUID with a dialog's persisted state.</summary>
      <param name="guid">The GUID to associate with this dialog state.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetCollectedProperties(Vanara.PInvoke.PropSys.IPropertyDescriptionList,System.Boolean)">
      <summary>Specifies which properties will be collected in the save dialog.</summary>
      <param name="pList">Pointer to the interface that represents the list of properties to collect. This parameter can be NULL.</param>
      <param name="fAppendDefault">
            TRUE to show default properties for the currently selected filetype in addition to the properties specified by pList. FALSE to show only
            properties specified by pList.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetDefaultExtension(System.String)">
      <summary>Sets the default extension to be added to file names.</summary>
      <param name="pszDefaultExtension">
            A pointer to a buffer that contains the extension text. This string should not include a leading period. For example, "jpg" is correct, while
            ".jpg" is not.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetDefaultFolder(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Sets the folder used as a default if there is not a recently used folder value available.</summary>
      <param name="psi">A pointer to the interface that represents the folder.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileName(System.String)">
      <summary>Sets the file name that appears in the File name edit box when that dialog box is opened.</summary>
      <param name="pszName">A pointer to the name of the file.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileNameLabel(System.String)">
      <summary>Sets the text of the label next to the file name edit box.</summary>
      <param name="pszLabel">A pointer to a buffer that contains the label text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileTypeIndex(System.UInt32)">
      <summary>Sets the file type that appears as selected in the dialog.</summary>
      <param name="iFileType">
            The index of the file type in the file type array passed to IFileDialog::SetFileTypes in its cFileTypes parameter. Note that this is a one-based
            index, not zero-based.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFileTypes(System.UInt32,Vanara.PInvoke.Shell32.COMDLG_FILTERSPEC[])">
      <summary>Sets the file types that the dialog can open or save.</summary>
      <param name="cFileTypes">The number of elements in the array specified by rgFilterSpec.</param>
      <param name="rgFilterSpec">A pointer to an array of COMDLG_FILTERSPEC structures, each representing a file type.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFilter(System.Object)">
      <summary>Sets the filter. <note>Deprecated. SetFilter is no longer available for use as of Windows 7.</note></summary>
      <param name="pFilter">A pointer to the IShellItemFilter that is to be set.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetFolder(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Sets a folder that is always selected when the dialog is opened, regardless of previous user action.</summary>
      <param name="psi">A pointer to the interface that represents the folder.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetOkButtonLabel(System.String)">
      <summary>Sets the text of the Open or Save button.</summary>
      <param name="pszText">A pointer to a buffer that contains the button text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetOptions(Vanara.PInvoke.Shell32.FILEOPENDIALOGOPTIONS)">
      <summary>Sets flags to control the behavior of the dialog.</summary>
      <param name="fos">One or more of the FILEOPENDIALOGOPTIONS values.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetProperties(Vanara.PInvoke.PropSys.IPropertyStore)">
      <summary>Provides a property store that defines the default values to be used for the item being saved.</summary>
      <param name="pStore">Pointer to the interface that represents the property store that contains the associated metadata.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetSaveAsItem(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>Sets an item to be used as the initial entry in a Save As dialog.</summary>
      <param name="psi">Pointer to an IShellItem that represents the item.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.SetTitle(System.String)">
      <summary>Sets the title of the dialog.</summary>
      <param name="pszTitle">A pointer to a buffer that contains the title text.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Show(System.IntPtr)">
      <summary>Launches the modal window.</summary>
      <param name="parent">The handle of the owner window. This value can be NULL.</param>
      <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by canceling the operation.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IFileSaveDialog.Unadvise(System.UInt32)">
      <summary>Removes an event handler that was attached through the IFileDialog::Advise method.</summary>
      <param name="dwCookie">
            The DWORD value that represents the event handler. This value is obtained through the pdwCookie parameter of the IFileDialog::Advise method.
            </param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IKnownFolder">
      <summary>
            Exposes methods that allow an application to retrieve information about a known folder's category, type, GUID, pointer to an item identifier list
            (PIDL) value, redirection capabilities, and definition. It provides a method for the retrival of a known folder's IShellItem object. It also provides
            methods to get or set the path of the known folder.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetCategory">
      <summary>Retrieves the category—virtual, fixed, common, or per-user—of the selected folder.</summary>
      <returns>When this method returns, contains a pointer to the KF_CATEGORY of the selected folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetFolderDefinition">
      <summary>
            Retrieves a structure that contains the defining elements of a known folder, which includes the folder's category, name, path, description,
            tooltip, icon, and other properties.
            </summary>
      <returns>
            When this method returns, contains a pointer to the KNOWNFOLDER_DEFINITION structure. When no longer needed, the calling application is
            responsible for calling FreeKnownFolderDefinitionFields to free this resource.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetFolderType">
      <summary>Retrieves the folder type.</summary>
      <returns>When this returns, contains a pointer to a FOLDERTYPEID (a GUID) that identifies the known folder type.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetId">
      <summary>Gets the ID of the selected folder.</summary>
      <returns>When this method returns, returns the KNOWNFOLDERID value of the known folder. Note, KNOWNFOLDERID values are GUIDs.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetIDList(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG)">
      <summary>Gets the location of the Shell namespace folder in the IDList (ITEMIDLIST) form.</summary>
      <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <returns>
            When this method returns, contains the address of an absolute PIDL. This parameter is passed uninitialized. The calling application is
            responsible for freeing this resource when it is no longer needed.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetPath(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG)">
      <summary>Retrieves the path of a known folder as a string.</summary>
      <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <returns>
            When this method returns, contains the address of a pointer to a null-terminated buffer that contains the path. The calling application is
            responsible for calling CoTaskMemFree to free this resource when it is no longer needed.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetRedirectionCapabilities">
      <summary>
            Gets a value that states whether the known folder can have its path set to a new value or what specific restrictions or prohibitions are placed
            on that redirection.
            </summary>
      <returns>
            When this method returns, contains a pointer to a KF_REDIRECTION_CAPABILITIES value that indicates the redirection capabilities for this folder.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.GetShellItem(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.Guid)">
      <summary>Retrieves the location of a known folder in the Shell namespace in the form of a Shell item (IShellItem or derived interface).</summary>
      <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values.</param>
      <param name="riid">A reference to the IID of the requested interface.</param>
      <returns>When this method returns, contains the interface pointer requested in riid. This is typically IShellItem or IShellItem2.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolder.SetPath(Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG,System.String)">
      <summary>Assigns a new path to a known folder.</summary>
      <param name="dwFlags">Either zero or the following value: KF_FLAG_DONT_UNEXPAND</param>
      <param name="pszPath">The PSZ path.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IKnownFolderManager">
      <summary>Exposes methods that create, enumerate or manage existing known folders.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FindFolderFromIDList(Vanara.PInvoke.Shell32.PIDL)">
      <summary>
            Gets an object that represents a known folder based on an IDList. The object allows you to query certain folder properties, get the current path
            of the folder, redirect the folder to another location, and get the path of the folder as an ITEMIDLIST.
            </summary>
      <param name="pidl">A pointer to the IDList.</param>
      <returns>When this method returns, contains the address of a pointer to the IKnownFolder object that represents the known folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FindFolderFromPath(System.String,Vanara.PInvoke.Shell32.FFFP_MODE)">
      <summary>
            Gets an object that represents a known folder based on a file system path. The object allows you to query certain folder properties, get the
            current path of the folder, redirect the folder to another location, and get the path of the folder as an ITEMIDLIST.
            </summary>
      <param name="pszPath">Pointer to a null-terminated Unicode string of length MAX_PATH that contains a path to a known folder.</param>
      <param name="mode">
            One of the following values that specify the precision of the match of path and known folder: FFFP_EXACTMATCH = Retrieve only the specific known
            folder for the given file path; FFFP_NEARESTPARENTMATCH = If an exact match is not found for the given file path, retrieve the first known folder
            that matches one of its parent folders walking up the parent tree.
            </param>
      <returns>When this method returns, contains the address of a pointer to the IKnownFolder object that represents the known folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FolderIdFromCsidl(System.Int32)">
      <summary>Gets the KNOWNFOLDERID that is the equivalent of a legacy CSIDL value.</summary>
      <param name="nCsidl">The CSIDL value.</param>
      <returns>When this method returns, contains a pointer to the KNOWNFOLDERID. This pointer is passed uninitialized.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.FolderIdToCsidl(System.Guid)">
      <summary>Gets the legacy CSIDL value that is the equivalent of a given KNOWNFOLDERID.</summary>
      <param name="rfid">Reference to the KNOWNFOLDERID.</param>
      <returns>When this method returns, contains a pointer to the CSIDL value. This pointer is passed uninitialized.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.GetFolder(System.Guid)">
      <summary>
            Gets an object that represents a known folder identified by its KNOWNFOLDERID. The object allows you to query certain folder properties, get the
            current path of the folder, redirect the folder to another location, and get the path of the folder as an ITEMIDLIST.
            </summary>
      <param name="rfid">Reference to the KNOWNFOLDERID.</param>
      <returns>When this method returns, contains an interface pointer to the IKnownFolder object that represents the folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.GetFolderByName(System.String)">
      <summary>
            Gets an object that represents a known folder identified by its canonical name. The object allows you to query certain folder properties, get the
            current path of the folder, redirect the folder to another location, and get the path of the folder as an ITEMIDLIST.
            </summary>
      <param name="pszCanonicalName">
            A pointer to the non-localized, canonical name for the known folder, stored as a null-terminated Unicode string. If this folder is a common or
            per-user folder, this value is also used as the value name of the "User Shell Folders" registry settings. This value is retrieved through the
            pszName member of the folder's KNOWNFOLDER_DEFINITION structure.
            </param>
      <returns>When this method returns, contains the address of a pointer to the IKnownFolder object that represents the known folder.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.GetFolderIds(Vanara.InteropServices.SafeCoTaskMemHandle@)">
      <summary>Gets an array of all registered known folder IDs. This can be used in enumerating all known folders.</summary>
      <param name="ppKFId">
            When this method returns, contains a pointer to an array of all KNOWNFOLDERID values registered with the system. Use CoTaskMemFree to free these
            resources when they are no longer needed.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IKnownFolderManager.GetFolderIds(Vanara.InteropServices.SafeCoTaskMemHandle@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.Redirect(System.Guid,System.IntPtr,Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS,System.String,System.UInt32,System.Guid)">
      <summary>Redirects folder requests for common and per-user folders.</summary>
      <param name="rfid">A reference to the KNOWNFOLDERID of the folder to be redirected.</param>
      <param name="hwnd">
            The handle of the parent window used to display copy engine progress UI dialogs when KF_REDIRECT_WITH_UI i passed in the flags parameter. If no
            progress dialog is needed, this value can be NULL.
            </param>
      <param name="flags">The KF_REDIRECT_FLAGS options for redirection.</param>
      <param name="pszTargetPath">A pointer to the new path for the folder. This is a null-terminated Unicode string. This value can be NULL.</param>
      <param name="cFolders">The number of KNOWNFOLDERID values in the array at pExclusion.</param>
      <param name="pExclusion">
            Pointer to an array of KNOWNFOLDERID values that refer to subfolders of rfid that should be excluded from the redirection. If no subfolders are
            excluded, this value can be NULL.
            </param>
      <returns>
            When this method returns, contains the address of a pointer to a null-terminated Unicode string that contains an error message if one was
            generated. This value can be NULL.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.RegisterFolder(System.Guid,Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION@)">
      <summary>
            Adds a new known folder to the registry. Used particularly by independent software vendors (ISVs) that are adding one of their own folders to the
            known folder system.
            </summary>
      <param name="rfid">A GUID that represents the known folder.</param>
      <param name="pKFD">A pointer to a valid KNOWNFOLDER_DEFINITION structure that provides the details of the new folder.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IKnownFolderManager.UnregisterFolder(System.Guid)">
      <summary>
            Remove a known folder from the registry, which makes it unknown to the known folder system. This method does not remove the folder itself.
            </summary>
      <param name="rfid">GUID or KNOWNFOLDERID that represents the known folder.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IModalWindow">
      <summary>Exposes a method that represents a modal window. This interface is used in the Windows XP Passport Wizard.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IModalWindow.Show(System.IntPtr)">
      <summary>Launches the modal window.</summary>
      <param name="parent">The handle of the owner window. This value can be NULL.</param>
      <returns>
            If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:
            HRESULT_FROM_WIN32(ERROR_CANCELLED) = The user closed the window by cancelling the operation.
            </returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IObjectArray">
      <summary>Exposes methods that enable clients to access items in a collection of objects that support IUnknown.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectArray.GetAt(System.UInt32,System.Guid)">
      <summary>Provides a pointer to a specified object's interface. The object and interface are specified by index and interface ID.</summary>
      <param name="uiIndex">The index of the object</param>
      <param name="riid">Reference to the desired interface ID.</param>
      <returns>Receives the interface pointer requested in riid.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectArray.GetCount">
      <summary>Provides a count of the objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IObjectCollection">
      <summary>Extends the IObjectArray interface by providing methods that enable clients to add and remove objects that support IUnknown in a collection.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.AddFromArray(Vanara.PInvoke.Shell32.IObjectArray)">
      <summary>Adds the objects contained in an IObjectArray to the collection.</summary>
      <param name="poaSource">Pointer to the IObjectArray whose contents are to be added to the collection.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.AddObject(System.Object)">
      <summary>Adds a single object to the collection.</summary>
      <param name="punk">Pointer to the IUnknown of the object to be added to the collection.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.GetAt(System.UInt32,System.Guid)">
      <summary>Provides a pointer to a specified object's interface. The object and interface are specified by index and interface ID.</summary>
      <param name="uiIndex">The index of the object</param>
      <param name="riid">Reference to the desired interface ID.</param>
      <returns>Receives the interface pointer requested in riid.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.GetCount">
      <summary>Provides a count of the objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectCollection.RemoveObjectAt(System.UInt32)">
      <summary>Removes a single, specified object from the collection.</summary>
      <param name="uiIndex">A pointer to the index of the object within the collection.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IObjectWithAppUserModelId">
      <summary>
            Exposes methods that allow implementers of a custom IAssocHandler object to provide access to its explicit Application User Model ID
            (AppUserModelID). This information is used to determine whether a particular file type can be added to an application's Jump List.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectWithAppUserModelId.GetAppID">
      <summary>Retrieves a file type handler's explicit Application User Model ID (AppUserModelID), if one has been declared.</summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IObjectWithAppUserModelId.GetAppID</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectWithAppUserModelId.SetAppID(System.String)">
      <summary>Sets the application identifier.</summary>
      <param name="pszAppID">The PSZ application identifier.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IObjectWithProgId">
      <summary>Exposes methods that provide access to the ProgID associated with an object.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectWithProgId.GetProgID">
      <summary>Retrieves the ProgID associated with an object.</summary>
      <returns>A pointer to a string that, when this method returns successfully, contains the ProgID.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IObjectWithProgId.SetProgID(System.String)">
      <summary>Sets the ProgID of an object.</summary>
      <param name="pszProgID">A pointer to a string that contains the new ProgID.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IQueryInfo">
      <summary>
            Exposes methods that the Shell uses to retrieve flags and info tip information for an item that resides in an IShellFolder implementation. Info tips
            are usually displayed inside a tooltip control.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IQueryInfo.GetInfoFlags">
      <summary>Gets the information flags for an item. This method is not currently used.</summary>
      <returns>A pointer to a value that receives the flags for the item. If no flags are to be returned, this value should be set to zero.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IQueryInfo.GetInfoTip(Vanara.PInvoke.Shell32.QITIP)">
      <summary>Gets the information tip.</summary>
      <param name="dwFlags">
            Flags that direct the handling of the item from which you're retrieving the info tip text. This value is commonly zero (QITIPF_DEFAULT).
            </param>
      <returns>
            The address of a Unicode string pointer that, when this method returns successfully, receives the tip string pointer. Applications that implement
            this method must allocate memory for ppwszTip by calling CoTaskMemAlloc. Calling applications must call CoTaskMemFree to free the memory when it
            is no longer needed.
            </returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IShellFolder">
      <summary>Exposed by all Shell namespace folder objects, its methods are used to manage folders.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.BindToObject(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid)">
      <summary>
            Retrieves a handler, typically the Shell folder object that implements IShellFolder for a particular item. Optional parameters that control the
            construction of the handler are passed in the bind context.
            </summary>
      <param name="pidl">
            The address of an ITEMIDLIST structure (PIDL) that identifies the subfolder. This value can refer to an item at any level below the parent folder
            in the namespace hierarchy. The structure contains one or more SHITEMID structures, followed by a terminating NULL.
            </param>
      <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object that can be used to pass parameters to the construction of the handler. If this
            parameter is not used, set it to NULL. Because support for this parameter is optional for folder object implementations, some folders may not
            support the use of bind contexts.
            <para>
            Information that can be provided in the bind context includes a BIND_OPTS structure that includes a grfMode member that indicates the access mode
            when binding to a stream handler. Other parameters can be set and discovered using IBindCtx::RegisterObjectParam and IBindCtx::GetObjectParam.
            </para></param>
      <param name="riid">
            The identifier of the interface to return. This may be IID_IShellFolder, IID_IStream, or any other interface that identifies a particular handler.
            </param>
      <returns>
            When this method returns, contains the address of a pointer to the requested interface. If an error occurs, a NULL pointer is returned at this address.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.BindToStorage(Vanara.PInvoke.Shell32.PIDL,System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid)">
      <summary>Requests a pointer to an object's storage interface.</summary>
      <param name="pidl">
            The address of an ITEMIDLIST structure that identifies the subfolder relative to its parent folder. The structure must contain exactly one
            SHITEMID structure followed by a terminating zero.
            </param>
      <param name="pbc">
            The optional address of an IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it to
            NULL. Because support for pbc is optional for folder object implementations, some folders may not support the use of bind contexts.
            </param>
      <param name="riid">
            The IID of the requested storage interface. To retrieve an IStream, IStorage, or IPropertySetStorage interface pointer, set riid to IID_IStream,
            IID_IStorage, or IID_IPropertySetStorage, respectively.
            </param>
      <returns>The address that receives the interface pointer specified by riid. If an error occurs, a NULL pointer is returned in this address.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.CompareIDs(System.IntPtr,Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
      <summary>Determines the relative order of two file objects or folders, given their item identifier lists.</summary>
      <param name="lParam">
            A value that specifies how the comparison should be performed.
            <para>
            The lower sixteen bits of lParam define the sorting rule. Most applications set the sorting rule to the default value of zero, indicating that
            the two items should be compared by name. The system does not define any other sorting rules. Some folder objects might allow calling
            applications to use the lower sixteen bits of lParam to specify folder-specific sorting rules. The rules and their associated lParam values are
            defined by the folder.
            </para><para>
            When the system folder view object calls IShellFolder::CompareIDs, the lower sixteen bits of lParam are used to specify the column to be used for
            the comparison.
            </para><para>The upper sixteen bits of lParam are used for flags that modify the sorting rule. The system currently defines these modifier flags.</para><list><item><term>SHCIDS_ALLFIELDS</term><description>
            Version 5.0. Compare all the information contained in the ITEMIDLIST structure, not just the display names. This flag is valid only for folder
            objects that support the IShellFolder2 interface. For instance, if the two items are files, the folder should compare their names, sizes, file
            times, attributes, and any other information in the structures. If this flag is set, the lower sixteen bits of lParam must be zero.
            </description></item><item><term>SHCIDS_CANONICALONLY</term><description>
            Version 5.0. When comparing by name, compare the system names but not the display names. When this flag is passed, the two items are compared by
            whatever criteria the Shell folder determines are most efficient, as long as it implements a consistent sort function. This flag is useful when
            comparing for equality or when the results of the sort are not displayed to the user. This flag cannot be combined with other flags.
            </description></item></list></param>
      <param name="pidl1">
            A pointer to the first item's ITEMIDLIST structure. It will be relative to the folder. This ITEMIDLIST structure can contain more than one
            element; therefore, the entire structure must be compared, not just the first element.
            </param>
      <param name="pidl2">
            A pointer to the second item's ITEMIDLIST structure. It will be relative to the folder. This ITEMIDLIST structure can contain more than one
            element; therefore, the entire structure must be compared, not just the first element.
            </param>
      <returns>
            If this method is successful, the CODE field of the HRESULT contains one of the following values. For information regarding the extraction of the
            CODE field from the returned HRESULT, see Remarks. If this method is unsuccessful, it returns a COM error code.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.CreateViewObject(System.IntPtr,System.Guid)">
      <summary>Requests an object that can be used to obtain information from or interact with a folder object.</summary>
      <param name="hwndOwner">
            A handle to the owner window. If you have implemented a custom folder view object, your folder view window should be created as a child of hwndOwner.
            </param>
      <param name="riid">A reference to the IID of the interface to retrieve through ppv, typically IID_IShellView.</param>
      <returns>
            When this method returns successfully, contains the interface pointer requested in riid. This is typically IShellView. See the Remarks section
            for more details.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.EnumObjects(System.IntPtr,Vanara.PInvoke.Shell32.SHCONTF)">
      <summary>
            Enables a client to determine the contents of a folder by creating an item identifier enumeration object and returning its IEnumIDList interface.
            The methods supported by that interface can then be used to enumerate the folder's contents.
            </summary>
      <param name="hwnd">
            If user input is required to perform the enumeration, this window handle should be used by the enumeration object as the parent window to take
            user input. An example would be a dialog box to ask for a password or prompt the user to insert a CD or floppy disk. If hwndOwner is set to NULL,
            the enumerator should not post any messages, and if user input is required, it should silently fail.
            </param>
      <param name="grfFlags">
            Flags indicating which items to include in the enumeration. For a list of possible values, see the SHCONTF enumerated type.
            </param>
      <returns>
            The address that receives a pointer to the IEnumIDList interface of the enumeration object created by this method. If an error occurs or no
            suitable subobjects are found, ppenumIDList is set to NULL.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.GetAttributesOf(System.UInt32,System.IntPtr[],Vanara.PInvoke.Shell32.SFGAO@)">
      <summary>Gets the attributes of one or more file or folder objects contained in the object represented by IShellFolder.</summary>
      <param name="cidl">The number of items from which to retrieve attributes.</param>
      <param name="apidl">
            The address of an array of pointers to ITEMIDLIST structures, each of which uniquely identifies an item relative to the parent folder. Each
            ITEMIDLIST structure must contain exactly one SHITEMID structure followed by a terminating zero.
            </param>
      <param name="rgfInOut">
            Pointer to a single ULONG value that, on entry, contains the bitwise SFGAO attributes that the calling application is requesting. On exit, this
            value contains the requested attributes that are common to all of the specified items.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.GetDisplayNameOf(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.SHGDNF)">
      <summary>Retrieves the display name for the specified file object or subfolder.</summary>
      <param name="pidl">PIDL that uniquely identifies the file object or subfolder relative to the parent folder.</param>
      <param name="uFlags">Flags used to request the type of display name to return. For a list of possible values, see the SHGDNF enumerated type.</param>
      <returns>
            When this method returns, contains a pointer to a STRRET structure in which to return the display name. The type of name returned in this
            structure can be the requested type, but the Shell folder might return a different type.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.GetUIObjectOf(System.IntPtr,System.UInt32,System.IntPtr[],System.Guid,System.IntPtr)">
      <summary>Gets an object that can be used to carry out actions on the specified file objects or folders.</summary>
      <param name="hwndOwner">A handle to the owner window that the client should specify if it displays a dialog box or message box.</param>
      <param name="cidl">The number of file objects or subfolders specified in the apidl parameter.</param>
      <param name="apidl">
            The address of an array of pointers to ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to the parent
            folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero.
            </param>
      <param name="riid">
            A reference to the IID of the interface to retrieve through ppv. This can be any valid interface identifier that can be created for an item. The
            most common identifiers used by the Shell are listed in the comments at the end of this reference.
            </param>
      <param name="rgfReserved">Reserved.</param>
      <returns>When this method returns successfully, contains the interface pointer requested in riid.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.ParseDisplayName(System.IntPtr,System.Runtime.InteropServices.ComTypes.IBindCtx,System.String,System.UInt32@,Vanara.PInvoke.Shell32.PIDL@,Vanara.PInvoke.Shell32.SFGAO@)">
      <summary>Translates the display name of a file object or a folder into an item identifier list.</summary>
      <param name="hwnd">
            A window handle. The client should provide a window handle if it displays a dialog or message box. Otherwise set hwnd to NULL
            </param>
      <param name="pbc">
            Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed parameters are often
            specific to the data source and are documented by the data source owners. For example, the file system data source accepts the name being parsed
            (as a WIN32_FIND_DATA structure), using the STR_FILE_SYS_BIND_DATA bind context parameter. STR_PARSE_PREFER_FOLDER_BROWSING can be passed to
            indicate that URLs are parsed using the file system data source when possible. Construct a bind context object using CreateBindCtx and populate
            the values using IBindCtx::RegisterObjectParam. See Bind Context String Keys for a complete list of these. If no data is being passed to or
            received from the parsing function, this value can be NULL.
            </param>
      <param name="pszDisplayName">
            A null-terminated Unicode string with the display name. Because each Shell folder defines its own parsing syntax, the form this string can take
            may vary. The desktop folder, for instance, accepts paths such as "C:\My Docs\My File.txt". It also will accept references to items in the
            namespace that have a GUID associated with them using the "::{GUID}" syntax.
            </param>
      <param name="pchEaten">
            A pointer to a ULONG value that receives the number of characters of the display name that was parsed. If your application does not need this
            information, set pchEaten to NULL, and no value will be returned.
            </param>
      <param name="ppidl">
            When this method returns, contains a pointer to the PIDL for the object. The returned item identifier list specifies the item relative to the
            parsing folder. If the object associated with pszDisplayName is within the parsing folder, the returned item identifier list will contain only
            one SHITEMID structure. If the object is in a subfolder of the parsing folder, the returned item identifier list will contain multiple SHITEMID
            structures. If an error occurs, NULL is returned in this address.
            <para>When it is no longer needed, it is the responsibility of the caller to free this resource by calling CoTaskMemFree.</para></param>
      <param name="pdwAttributes">
            The value used to query for file attributes. If not used, it should be set to NULL. To query for one or more attributes, initialize this
            parameter with the SFGAO flags that represent the attributes of interest. On return, those attributes that are true and were requested will be set.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellFolder.SetNameOf(System.IntPtr,Vanara.PInvoke.Shell32.PIDL,System.String,Vanara.PInvoke.Shell32.SHGDNF,Vanara.PInvoke.Shell32.PIDL@)">
      <summary>Sets the display name of a file object or subfolder, changing the item identifier in the process.</summary>
      <param name="hwnd">A handle to the owner window of any dialog or message box that the client displays.</param>
      <param name="pidl">
            A pointer to an ITEMIDLIST structure that uniquely identifies the file object or subfolder relative to the parent folder. The structure must
            contain exactly one SHITEMID structure followed by a terminating zero.
            </param>
      <param name="pszName">A pointer to a null-terminated string that specifies the new display name.</param>
      <param name="uFlags">
            Flags that indicate the type of name specified by the pszName parameter. For a list of possible values and combinations of values, see SHGDNF.
            </param>
      <param name="ppidlOut">
            Optional. If specified, the address of a pointer to an ITEMIDLIST structure that receives the ITEMIDLIST of the renamed item. The caller requests
            this value by passing a non-null ppidlOut. Implementations of IShellFolder::SetNameOf must return a pointer to the new ITEMIDLIST in the ppidlOut parameter.
            </param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IShellItem">
      <summary>
            Exposes methods that retrieve information about a Shell item. IShellItem and IShellItem2 are the preferred representations of items in any new code.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)">
      <summary>Binds to a handler for an item as specified by the handler ID value (BHID).</summary>
      <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of the bind context
            are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate the mode of access desired (read or read/write).
            </param>
      <param name="bhid">Reference to a GUID that specifies which handler will be created.</param>
      <param name="riid">IID of the object type to retrieve.</param>
      <returns>When this method returns, contains a pointer of type riid that is returned by the handler specified by rbhid.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem.Compare(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SICHINTF)">
      <summary>Compares two IShellItem objects.</summary>
      <param name="psi">A pointer to an IShellItem object to compare with the existing IShellItem object.</param>
      <param name="hint">
            One of the SICHINTF values that determines how to perform the comparison. See SICHINTF for the list of possible values for this parameter.
            </param>
      <returns>
            This parameter receives the result of the comparison. If the two items are the same this parameter equals zero; if they are different the
            parameter is nonzero.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem.GetAttributes(Vanara.PInvoke.Shell32.SFGAO)">
      <summary>Gets a requested set of attributes of the IShellItem object.</summary>
      <param name="sfgaoMask">
            Specifies the attributes to retrieve. One or more of the SFGAO values. Use a bitwise OR operator to determine the attributes to retrieve.
            </param>
      <returns>
            A pointer to a value that, when this method returns successfully, contains the requested attributes. One or more of the SFGAO values. Only those
            attributes specified by sfgaoMask are returned; other attribute values are undefined.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem.GetDisplayName(Vanara.PInvoke.Shell32.SIGDN)">
      <summary>Gets the display name of the IShellItem object.</summary>
      <param name="sigdnName">One of the SIGDN values that indicates how the name should look.</param>
      <returns>A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem.GetParent">
      <summary>Gets the parent of an IShellItem object.</summary>
      <returns>The address of a pointer to the parent of an IShellItem interface.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IShellItem2">
      <summary>
            Extends IShellItem with methods that retrieve various property values of the item. IShellItem and IShellItem2 are the preferred representations of
            items in any new code.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)">
      <summary>Binds to a handler for an item as specified by the handler ID value (BHID).</summary>
      <param name="pbc">
            A pointer to an IBindCtx interface on a bind context object. Used to pass optional parameters to the handler. The contents of the bind context
            are handler-specific. For example, when binding to BHID_Stream, the STGM flags in the bind context indicate the mode of access desired (read or read/write).
            </param>
      <param name="bhid">Reference to a GUID that specifies which handler will be created.</param>
      <param name="riid">IID of the object type to retrieve.</param>
      <returns>When this method returns, contains a pointer of type riid that is returned by the handler specified by rbhid.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.Compare(Vanara.PInvoke.Shell32.IShellItem,Vanara.PInvoke.Shell32.SICHINTF)">
      <summary>Compares two IShellItem objects.</summary>
      <param name="psi">A pointer to an IShellItem object to compare with the existing IShellItem object.</param>
      <param name="hint">
            One of the SICHINTF values that determines how to perform the comparison. See SICHINTF for the list of possible values for this parameter.
            </param>
      <returns>
            This parameter receives the result of the comparison. If the two items are the same this parameter equals zero; if they are different the
            parameter is nonzero.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetAttributes(Vanara.PInvoke.Shell32.SFGAO)">
      <summary>Gets a requested set of attributes of the IShellItem object.</summary>
      <param name="sfgaoMask">
            Specifies the attributes to retrieve. One or more of the SFGAO values. Use a bitwise OR operator to determine the attributes to retrieve.
            </param>
      <returns>
            A pointer to a value that, when this method returns successfully, contains the requested attributes. One or more of the SFGAO values. Only those
            attributes specified by sfgaoMask are returned; other attribute values are undefined.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetBool(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets the boolean value of a specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>A pointer to a boolean value.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetCLSID(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets the class identifier (CLSID) value of specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>A pointer to a CLSID value.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetDisplayName(Vanara.PInvoke.Shell32.SIGDN)">
      <summary>Gets the display name of the IShellItem object.</summary>
      <param name="sigdnName">One of the SIGDN values that indicates how the name should look.</param>
      <returns>A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetFileTime(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets the date and time value of a specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>A pointer to a date and time value.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetInt32(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets the Int32 value of specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>A pointer to an Int32 value.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetParent">
      <summary>Gets the parent of an IShellItem object.</summary>
      <returns>The address of a pointer to the parent of an IShellItem interface.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetProperty(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets a PROPVARIANT structure from a specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>Contains a pointer to a PROPVARIANT structure.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyDescriptionList(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Guid)">
      <summary>Gets a property description list object given a reference to a property key.</summary>
      <param name="keyType">A reference to a PROPERTYKEY structure.</param>
      <param name="riid">A reference to a desired IID.</param>
      <returns>Contains the address of an IPropertyDescriptionList interface pointer.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyStore(Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid)">
      <summary>Gets a property store object for specified property store flags.</summary>
      <param name="flags">The GETPROPERTYSTOREFLAGS constants that modify the property store object.</param>
      <param name="riid">A reference to the IID of the object to be retrieved.</param>
      <returns>When this method returns, contains the address of an IPropertyStore interface pointer.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyStoreForKeys(Vanara.PInvoke.Ole32.PROPERTYKEY[],System.UInt32,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid)">
      <summary>Gets property store object for specified property keys.</summary>
      <param name="rgKeys">
            A pointer to an array of PROPERTYKEY structures. Each structure contains a unique identifier for each property used in creating the property store.
            </param>
      <param name="cKeys">The number of PROPERTYKEY structures in the array pointed to by rgKeys.</param>
      <param name="flags">The GETPROPERTYSTOREFLAGS constants that modify the property store object.</param>
      <param name="riid">A reference to the IID of the object to be retrieved.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyStoreForKeys(Vanara.PInvoke.Ole32.PROPERTYKEY[],System.UInt32,Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetPropertyStoreWithCreateObject(Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Object,System.Guid)">
      <summary>
            Uses the specified ICreateObject instead of CoCreateInstance to create an instance of the property handler associated with the Shell item on
            which this method is called. Most calling applications do not need to call this method, and can call IShellItem2::GetPropertyStore instead.
            </summary>
      <param name="flags">The GETPROPERTYSTOREFLAGS constants that modify the property store object.</param>
      <param name="punkCreateObject">
            A pointer to a factory for low-rights creation of type ICreateObject.
            <para>
            The method CreateObject creates an instance of a COM object. The implementation of IShellItem2::GetPropertyStoreWithCreateObject uses
            CreateObject instead of CoCreateInstance to create the property handler, which is a Shell extension, for a given file type. The property handler
            provides many of the important properties in the property store that this method returns.
            </para><para>
            This method is useful only if the ICreateObject object is created in a separate process (as a LOCALSERVER instead of an INPROCSERVER), and also
            if this other process has lower rights than the process calling IShellItem2::GetPropertyStoreWithCreateObject.
            </para></param>
      <param name="riid">A reference to the IID of the object to be retrieved.</param>
      <returns>When this method returns, contains the address of the requested IPropertyStore interface pointer.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetString(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets the string value of a specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>A pointer to a Unicode string value.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetUInt32(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets the UInt32 value of specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>A pointer to an UInt32 value.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.GetUInt64(Vanara.PInvoke.Ole32.PROPERTYKEY@)">
      <summary>Gets the UInt64 value of specified property key.</summary>
      <param name="key">A reference to a PROPERTYKEY structure.</param>
      <returns>A pointer to an UInt64 value.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItem2.Update(System.Runtime.InteropServices.ComTypes.IBindCtx)">
      <summary>Ensures that any cached information in this item is updated.</summary>
      <param name="pbc">A pointer to an IBindCtx interface on a bind context object.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IShellItemArray">
      <summary>Exposes methods that create and manipulate Shell item arrays.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)</parameter>
          </include>
        </markup>
      </summary>
      <param name="pbc">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pbc</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)</parameter>
          </include>
        </markup>
      </param>
      <param name="rbhid">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rbhid</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)</parameter>
          </include>
        </markup>
      </param>
      <param name="riid">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>riid</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.IShellItemArray.BindToHandler(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Guid,System.Guid)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.EnumItems">
      <summary>Gets an enumerator of the items in the array.</summary>
      <returns>When this method returns, contains an IEnumShellItems pointer that enumerates the shell items that are in the array.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetAttributes(Vanara.PInvoke.Shell32.SIATTRIBFLAGS,Vanara.PInvoke.Shell32.SFGAO)">
      <summary>
            Gets the attributes of the set of items contained in an IShellItemArray. If the array contains more than one item, the attributes retrieved by
            this method are not the attributes of single items, but a logical combination of all of the requested attributes of all of the items.
            </summary>
      <param name="dwAttribFlags">
            If the array contains a single item, this method provides the same results as GetAttributes. However, if the array contains multiple items, the
            attribute sets of all the items are combined into a single attribute set and returned in the value pointed to by psfgaoAttribs. This parameter
            takes one of the following values to define how that final attribute set is determined:
            </param>
      <param name="sfgaoMask">A mask that specifies what particular attributes are being requested. A bitwise OR of one or more of the SFGAO values.</param>
      <returns>A bitmap that, when this method returns successfully, contains the values of the requested attributes.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetCount">
      <summary>Gets the number of items in the given IShellItem array.</summary>
      <returns>When this method returns, contains the number of items in the IShellItemArray.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetItemAt(System.UInt32)">
      <summary>Gets the item at the given index in the IShellItemArray.</summary>
      <param name="dwIndex">The index of the IShellItem requested in the IShellItemArray</param>
      <returns>When this method returns, contains the requested IShellItem pointer.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetPropertyDescriptionList(Vanara.PInvoke.Ole32.PROPERTYKEY@,System.Guid)">
      <summary>Gets a property description list for the items in the shell item array.</summary>
      <param name="keyType">A reference to the PROPERTYKEY structure specifying which property list to retrieve.</param>
      <param name="riid">The IID of the object type to retrieve.</param>
      <returns>When this method returns, contains the interface requested in riid. This will typically be IPropertyDescriptionList.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellItemArray.GetPropertyStore(Vanara.PInvoke.PropSys.GETPROPERTYSTOREFLAGS,System.Guid)">
      <summary>Gets a property store.</summary>
      <param name="flags">One of the GETPROPERTYSTOREFLAGS constants.</param>
      <param name="riid">The IID of the object type to retrieve.</param>
      <returns>When this method returns, contains interface pointer requested in riid. This is typically IPropertyStore or IPropertyStoreCapabilities.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IShellLinkDataList">
      <summary>Exposes methods that allow an application to attach extra data blocks to a Shell link. These methods add, copy, or remove data blocks.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.AddDataBlock(System.IntPtr)">
      <summary>Adds a data block to a link.</summary>
      <param name="pDataBlock">The data block structure. For a list of supported structures, see IShellLinkDataList.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.CopyDataBlock(Vanara.PInvoke.Shell32.ShellDataBlockSignature)">
      <summary>Retrieves a copy of a link's data block.</summary>
      <param name="dwSig">
            The data block's signature. The signature value for a particular type of data block can be found in its structure reference. For a list of
            supported data block types and their associated structures, see IShellLinkDataList.
            </param>
      <returns>
            The address of a pointer to a copy of the data block structure. If IShellLinkDataList::CopyDataBlock returns a successful result, the calling
            application must free the memory when it is no longer needed by calling LocalFree.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.GetFlags">
      <summary>Gets the current option settings.</summary>
      <returns>Pointer to one or more of the SHELL_LINK_DATA_FLAGS that indicate the current option settings.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.RemoveDataBlock(Vanara.PInvoke.Shell32.ShellDataBlockSignature)">
      <summary>Removes a data block from a link.</summary>
      <param name="dwSig">
            The data block's signature. The signature value for a particular type of data block can be found in its structure reference. For a list of
            supported data block types and their associated structures, see IShellLinkDataList.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkDataList.SetFlags(Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS)">
      <summary>Sets the current option settings.</summary>
      <param name="dwFlags">One or more of the SHELL_LINK_DATA_FLAGS that indicate the option settings.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.IShellLinkW">
      <summary>Exposes methods that create, modify, and resolve Shell links.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)">
      <summary>Gets the command-line arguments associated with a Shell link object.</summary>
      <param name="pszArgs">A pointer to the buffer that, when this method returns successfully, receives the command-line arguments.</param>
      <param name="cchMaxPath">
            The maximum number of characters that can be copied to the buffer supplied by the pszArgs parameter. In the case of a Unicode string, there is no
            limitation on maximum string length. In the case of an ANSI string, the maximum length of the returned string varies depending on the version of
            Windows—MAX_PATH prior to Windows 2000 and INFOTIPSIZE (defined in Commctrl.h) in Windows 2000 and later.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)">
      <summary>Gets the description string for a Shell link object.</summary>
      <param name="pszFile">A pointer to the buffer that receives the description string.</param>
      <param name="cchMaxName">The maximum number of characters to copy to the buffer pointed to by the pszName parameter.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetHotKey">
      <summary>Gets the keyboard shortcut (hot key) for a Shell link object.</summary>
      <returns>
            The address of the keyboard shortcut. The virtual key code is in the low-order byte, and the modifier flags are in the high-order byte.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
      <summary>Gets the location (path and index) of the icon for a Shell link object.</summary>
      <param name="pszIconPath">The address of a buffer that receives the path of the file containing the icon.</param>
      <param name="cchIconPath">The maximum number of characters to copy to the buffer pointed to by the pszIconPath parameter.</param>
      <param name="piIcon">The address of a value that receives the index of the icon.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetIDList">
      <summary>Gets the list of item identifiers for the target of a Shell link object.</summary>
      <returns>When this method returns, contains the address of a PIDL.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,Vanara.PInvoke.WIN32_FIND_DATA,Vanara.PInvoke.Shell32.SLGP)">
      <summary>Gets the path and file name of the target of a Shell link object.</summary>
      <param name="pszFile">The address of a buffer that receives the path and file name of the target of the Shell link object.</param>
      <param name="cchMaxPath">
            The size, in characters, of the buffer pointed to by the pszFile parameter, including the terminating null character. The maximum path size that
            can be returned is MAX_PATH. This parameter is commonly set by calling ARRAYSIZE(pszFile). The ARRAYSIZE macro is defined in Winnt.h.
            </param>
      <param name="pfd">
            A pointer to a WIN32_FIND_DATA structure that receives information about the target of the Shell link object. If this parameter is NULL, then no
            additional information is returned.
            </param>
      <param name="fFlags">Flags that specify the type of path information to retrieve.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetShowCmd">
      <summary>Gets the show command for a Shell link object.</summary>
      <returns>
            A pointer to the command. The following commands are supported.
            <list><item><term>SW_SHOWNORMAL</term><description>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An
            application should specify this flag when displaying the window for the first time.
            </description></item><item><term>SW_SHOWMAXIMIZED</term><description>Activates the window and displays it as a maximized window.</description></item><item><term>SW_SHOWMINIMIZED</term><description>Activates the window and displays it as a minimized window.</description></item></list></returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
      <summary>Gets the name of the working directory for a Shell link object.</summary>
      <param name="pszDir">The address of a buffer that receives the name of the working directory.</param>
      <param name="cchMaxPath">
            The maximum number of characters to copy to the buffer pointed to by the pszDir parameter. The name of the working directory is truncated if it
            is longer than the maximum specified by this parameter.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.Resolve(System.IntPtr,Vanara.PInvoke.Shell32.SLR_FLAGS)">
      <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed.</summary>
      <param name="hwnd">
            A handle to the window that the Shell will use as the parent for a dialog box. The Shell displays the dialog box if it needs to prompt the user
            for more information while resolving a Shell link.
            </param>
      <param name="fFlags">Action flags.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetArguments(System.String)">
      <summary>Sets the command-line arguments for a Shell link object.</summary>
      <param name="pszArgs">
            A pointer to a buffer that contains the new command-line arguments. In the case of a Unicode string, there is no limitation on maximum string
            length. In the case of an ANSI string, the maximum length of the returned string varies depending on the version of Windows—MAX_PATH prior to
            Windows 2000 and INFOTIPSIZE (defined in Commctrl.h) in Windows 2000 and later.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetDescription(System.String)">
      <summary>Sets the description for a Shell link object. The description can be any application-defined string.</summary>
      <param name="pszName">A pointer to a buffer containing the new description string.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetHotKey(System.UInt16)">
      <summary>Sets a keyboard shortcut (hot key) for a Shell link object.</summary>
      <param name="wHotKey">
            The new keyboard shortcut. The virtual key code is in the low-order byte, and the modifier flags are in the high-order byte. The modifier flags
            can be a combination of the values specified in the description of the IShellLink::GetHotkey method.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetIconLocation(System.String,System.Int32)">
      <summary>Sets the location (path and index) of the icon for a Shell link object.</summary>
      <param name="pszIconPath">The address of a buffer to contain the path of the file containing the icon.</param>
      <param name="iIcon">The index of the icon.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetIDList(Vanara.PInvoke.Shell32.PIDL)">
      <summary>Sets the pointer to an item identifier list (PIDL) for a Shell link object.</summary>
      <param name="pidl">The object's fully qualified PIDL.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetPath(System.String)">
      <summary>Sets the path and file name for the target of a Shell link object.</summary>
      <param name="pszFile">The address of a buffer that contains the new path.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetRelativePath(System.String,System.UInt32)">
      <summary>Sets the relative path to the Shell link object.</summary>
      <param name="pszPathRel">
            The address of a buffer that contains the fully-qualified path of the shortcut file, relative to which the shortcut resolution should be
            performed. It should be a file name, not a folder name.
            </param>
      <param name="dwReserved">Reserved. Set this parameter to zero.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetShowCmd(Vanara.PInvoke.ShowWindowCommand)">
      <summary>Sets the show command for a Shell link object. The show command sets the initial show state of the window.</summary>
      <param name="iShowCmd">
            SetShowCmd accepts one of the following ShowWindow commands.
            <list><item><term>SW_SHOWNORMAL</term><description>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An
            application should specify this flag when displaying the window for the first time.
            </description></item><item><term>SW_SHOWMAXIMIZED</term><description>Activates the window and displays it as a maximized window.</description></item><item><term>SW_SHOWMINIMIZED</term><description>Activates the window and displays it as a minimized window.</description></item></list></param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.IShellLinkW.SetWorkingDirectory(System.String)">
      <summary>Sets the name of the working directory for a Shell link object.</summary>
      <param name="pszDir">The address of a buffer that contains the name of the new working directory.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ITaskbarList">
      <summary>Exposes methods that control the taskbar. It allows you to dynamically add, remove, and activate items on the taskbar.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.ActivateTab(System.IntPtr)">
      <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed as active.
            </summary>
      <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.AddTab(System.IntPtr)">
      <summary>Adds an item to the taskbar.</summary>
      <param name="hwnd">A handle to the window to be added to the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.DeleteTab(System.IntPtr)">
      <summary>Deletes an item from the taskbar.</summary>
      <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.HrInit">
      <summary>Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList.SetActiveAlt(System.IntPtr)">
      <summary>Marks a taskbar item as active but does not visually activate it.</summary>
      <param name="hwnd">A handle to the window to be marked as active.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ITaskbarList2">
      <summary>Extends the ITaskbarList interface by exposing a method to mark a window as a full-screen display.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.ActivateTab(System.IntPtr)">
      <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed as active.
            </summary>
      <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.AddTab(System.IntPtr)">
      <summary>Adds an item to the taskbar.</summary>
      <param name="hwnd">A handle to the window to be added to the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.DeleteTab(System.IntPtr)">
      <summary>Deletes an item from the taskbar.</summary>
      <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.HrInit">
      <summary>Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.MarkFullscreenWindow(System.IntPtr,System.Boolean)">
      <summary>Marks a window as full-screen.</summary>
      <param name="hwnd">The handle of the window to be marked.</param>
      <param name="fFullscreen">A Boolean value marking the desired full-screen status of the window.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList2.SetActiveAlt(System.IntPtr)">
      <summary>Marks a taskbar item as active but does not visually activate it.</summary>
      <param name="hwnd">A handle to the window to be marked as active.</param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ITaskbarList3">
      <summary>
            Extends ITaskbarList2 by exposing methods that support the unified launching and switching taskbar button functionality added in Windows 7. This
            functionality includes thumbnail representations and switch targets based on individual tabs in a tabbed application, thumbnail toolbars,
            notification and status overlays, and progress indicators.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ActivateTab(System.IntPtr)">
      <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed as active.
            </summary>
      <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.AddTab(System.IntPtr)">
      <summary>Adds an item to the taskbar.</summary>
      <param name="hwnd">A handle to the window to be added to the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.DeleteTab(System.IntPtr)">
      <summary>Deletes an item from the taskbar.</summary>
      <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.HrInit">
      <summary>Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.MarkFullscreenWindow(System.IntPtr,System.Boolean)">
      <summary>Marks a window as full-screen.</summary>
      <param name="hwnd">The handle of the window to be marked.</param>
      <param name="fFullscreen">A Boolean value marking the desired full-screen status of the window.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.RegisterTab(System.IntPtr,System.IntPtr)">
      <summary>Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.</summary>
      <param name="hwndTab">Handle of the tab or document window. This value is required and cannot be NULL.</param>
      <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which application's preview group to attach the new thumbnail to. This
            value is required and cannot be NULL.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetActiveAlt(System.IntPtr)">
      <summary>Marks a taskbar item as active but does not visually activate it.</summary>
      <param name="hwnd">A handle to the window to be marked as active.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetOverlayIcon(System.IntPtr,System.IntPtr,System.String)">
      <summary>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</summary>
      <param name="hwnd">
            The handle of the window whose associated taskbar button receives the overlay. This handle must belong to a calling process associated with the
            button's application and must be a valid HWND or the call is ignored.
            </param>
      <param name="hIcon">
            The handle of an icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dpi. If an overlay icon is already applied
            to the taskbar button, that existing overlay is replaced.
            <para>This value can be NULL.How a NULL value is handled depends on whether the taskbar button represents a single window or a group of windows.</para><list type="bullet"><item><term>If the taskbar button represents a single window, the overlay icon is removed from the display.</term></item><item><term>
            If the taskbar button represents a group of windows and a previous overlay is still available (received earlier than the current overlay, but not
            yet freed by a NULL value), then that previous overlay is displayed in place of the current overlay.
            </term></item></list><para>
            It is the responsibility of the calling application to free hIcon when it is no longer needed.This can generally be done after you call
            SetOverlayIcon because the taskbar makes and uses its own copy of the icon.
            </para></param>
      <param name="pszDescription">
            A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetProgressState(System.IntPtr,Vanara.PInvoke.Shell32.TBPFLAG)">
      <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
      <param name="hwnd">
            The handle of the window in which the progress of an operation is being shown. This window's associated taskbar button will display the progress bar.
            </param>
      <param name="tbpFlags">
            Flags that control the current state of the progress button. Specify only one of the following flags; all states are mutually exclusive of all others.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetProgressValue(System.IntPtr,System.UInt64,System.UInt64)">
      <summary>Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.</summary>
      <param name="hwnd">The handle of the window whose associated taskbar button is being used as a progress indicator.</param>
      <param name="ullCompleted">
            An application-defined value that indicates the proportion of the operation that has been completed at the time the method is called.
            </param>
      <param name="ullTotal">An application-defined value that specifies the value ullCompleted will have when the operation is complete.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetTabActive(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>Informs the taskbar that a tab or document window has been made the active window.</summary>
      <param name="hwndTab">
            Handle of the active tab window. This handle must already be registered through ITaskbarList3::RegisterTab. This value can be NULL if no tab is active.
            </param>
      <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which group the thumbnail is a member of. This value is required and cannot
            be NULL.
            </param>
      <param name="dwReserved">Reserved; set to 0.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetTabOrder(System.IntPtr,System.IntPtr)">
      <summary>
            Inserts a new thumbnail into a tabbed-document interface (TDI) or multiple-document interface (MDI) application's group flyout or moves an
            existing thumbnail to a new position in the application's group.
            </summary>
      <param name="hwndTab">
            The handle of the tab window whose thumbnail is being placed. This value is required, must already be registered through
            ITaskbarList3::RegisterTab, and cannot be NULL.
            </param>
      <param name="hwndInsertBefore">
            The handle of the tab window whose thumbnail that hwndTab is inserted to the left of. This handle must already be registered through
            ITaskbarList3::RegisterTab. If this value is NULL, the new thumbnail is added to the end of the list.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetThumbnailClip(System.IntPtr,Vanara.PInvoke.RECT@)">
      <summary>Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.</summary>
      <param name="hwnd">The handle to a window represented in the taskbar.</param>
      <param name="prcClip">
            A pointer to a RECT structure that specifies a selection within the window's client area, relative to the upper-left corner of that client area.
            To clear a clip that is already in place and return to the default display of the thumbnail, set this parameter to NULL.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.SetThumbnailTooltip(System.IntPtr,System.String)">
      <summary>
            Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview thumbnail in a taskbar
            button flyout.
            </summary>
      <param name="hwnd">The handle to the window whose thumbnail displays the tooltip. This handle must belong to the calling process.</param>
      <param name="pszTip">
            The pointer to the text to be displayed in the tooltip. This value can be NULL, in which case the title of the window specified by hwnd is used
            as the tooltip.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ThumbBarAddButtons(System.IntPtr,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
      <summary>Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.</summary>
      <param name="hwnd">
            The handle of the window whose thumbnail representation will receive the toolbar. This handle must belong to the calling process.
            </param>
      <param name="cButtons">The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7.</param>
      <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button to be added to the toolbar. Buttons cannot be
            added or deleted later, so this must be the full defined set. Buttons also cannot be reordered, so their order in the array, which is the order
            in which they are displayed left to right, will be their permanent order.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ThumbBarSetImageList(System.IntPtr,System.IntPtr)">
      <summary>
            Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
      <param name="hwnd">
            The handle of the window whose thumbnail representation contains the toolbar to be updated. This handle must belong to the calling process.
            </param>
      <param name="himl">The handle of the image list that contains all button images to be used in the toolbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.ThumbBarUpdateButtons(System.IntPtr,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
      <summary>
            Shows, enables, disables, or hides buttons in a thumbnail toolbar as required by the window's current state. A thumbnail toolbar is a toolbar
            embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
      <param name="hwnd">The handle of the window whose thumbnail representation contains the toolbar.</param>
      <param name="cButtons">
            The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7. This array contains only structures
            that represent existing buttons that are being updated.
            </param>
      <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button. If the button already exists (the iId value is
            already defined), then that existing button is updated with the information provided in the structure.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList3.UnregisterTab(System.IntPtr)">
      <summary>Removes a thumbnail from an application's preview group when that tab or document is closed in the application.</summary>
      <param name="hwndTab">
            The handle of the tab window whose thumbnail is being removed. This is the same value with which the thumbnail was registered as part the group
            through ITaskbarList3::RegisterTab. This value is required and cannot be NULL.
            </param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ITaskbarList4">
      <summary>Extends ITaskbarList3 by providing a method that allows the caller to control two property values for the tab thumbnail and peek feature.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ActivateTab(System.IntPtr)">
      <summary>
            Activates an item on the taskbar. The window is not actually activated; the window's item on the taskbar is merely displayed as active.
            </summary>
      <param name="hwnd">A handle to the window on the taskbar to be displayed as active.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.AddTab(System.IntPtr)">
      <summary>Adds an item to the taskbar.</summary>
      <param name="hwnd">A handle to the window to be added to the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.DeleteTab(System.IntPtr)">
      <summary>Deletes an item from the taskbar.</summary>
      <param name="hwnd">A handle to the window to be deleted from the taskbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.HrInit">
      <summary>Initializes the taskbar list object. This method must be called before any other ITaskbarList methods can be called.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.MarkFullscreenWindow(System.IntPtr,System.Boolean)">
      <summary>Marks a window as full-screen.</summary>
      <param name="hwnd">The handle of the window to be marked.</param>
      <param name="fFullscreen">A Boolean value marking the desired full-screen status of the window.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.RegisterTab(System.IntPtr,System.IntPtr)">
      <summary>Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.</summary>
      <param name="hwndTab">Handle of the tab or document window. This value is required and cannot be NULL.</param>
      <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which application's preview group to attach the new thumbnail to. This
            value is required and cannot be NULL.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetActiveAlt(System.IntPtr)">
      <summary>Marks a taskbar item as active but does not visually activate it.</summary>
      <param name="hwnd">A handle to the window to be marked as active.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetOverlayIcon(System.IntPtr,System.IntPtr,System.String)">
      <summary>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</summary>
      <param name="hwnd">
            The handle of the window whose associated taskbar button receives the overlay. This handle must belong to a calling process associated with the
            button's application and must be a valid HWND or the call is ignored.
            </param>
      <param name="hIcon">
            The handle of an icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dpi. If an overlay icon is already applied
            to the taskbar button, that existing overlay is replaced.
            <para>This value can be NULL.How a NULL value is handled depends on whether the taskbar button represents a single window or a group of windows.</para><list type="bullet"><item><term>If the taskbar button represents a single window, the overlay icon is removed from the display.</term></item><item><term>
            If the taskbar button represents a group of windows and a previous overlay is still available (received earlier than the current overlay, but not
            yet freed by a NULL value), then that previous overlay is displayed in place of the current overlay.
            </term></item></list><para>
            It is the responsibility of the calling application to free hIcon when it is no longer needed.This can generally be done after you call
            SetOverlayIcon because the taskbar makes and uses its own copy of the icon.
            </para></param>
      <param name="pszDescription">
            A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetProgressState(System.IntPtr,Vanara.PInvoke.Shell32.TBPFLAG)">
      <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
      <param name="hwnd">
            The handle of the window in which the progress of an operation is being shown. This window's associated taskbar button will display the progress bar.
            </param>
      <param name="tbpFlags">
            Flags that control the current state of the progress button. Specify only one of the following flags; all states are mutually exclusive of all others.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetProgressValue(System.IntPtr,System.UInt64,System.UInt64)">
      <summary>Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.</summary>
      <param name="hwnd">The handle of the window whose associated taskbar button is being used as a progress indicator.</param>
      <param name="ullCompleted">
            An application-defined value that indicates the proportion of the operation that has been completed at the time the method is called.
            </param>
      <param name="ullTotal">An application-defined value that specifies the value ullCompleted will have when the operation is complete.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetTabActive(System.IntPtr,System.IntPtr,System.UInt32)">
      <summary>Informs the taskbar that a tab or document window has been made the active window.</summary>
      <param name="hwndTab">
            Handle of the active tab window. This handle must already be registered through ITaskbarList3::RegisterTab. This value can be NULL if no tab is active.
            </param>
      <param name="hwndMDI">
            Handle of the application's main window. This value tells the taskbar which group the thumbnail is a member of. This value is required and cannot
            be NULL.
            </param>
      <param name="dwReserved">Reserved; set to 0.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetTabOrder(System.IntPtr,System.IntPtr)">
      <summary>
            Inserts a new thumbnail into a tabbed-document interface (TDI) or multiple-document interface (MDI) application's group flyout or moves an
            existing thumbnail to a new position in the application's group.
            </summary>
      <param name="hwndTab">
            The handle of the tab window whose thumbnail is being placed. This value is required, must already be registered through
            ITaskbarList3::RegisterTab, and cannot be NULL.
            </param>
      <param name="hwndInsertBefore">
            The handle of the tab window whose thumbnail that hwndTab is inserted to the left of. This handle must already be registered through
            ITaskbarList3::RegisterTab. If this value is NULL, the new thumbnail is added to the end of the list.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetTabProperties(System.IntPtr,Vanara.PInvoke.Shell32.STPFLAG)">
      <summary>
            Allows a tab to specify whether the main application frame window or the tab window should be used as a thumbnail or in the peek feature under
            certain circumstances.
            </summary>
      <param name="hwndTab">The handle of the tab window that is to have properties set. This handle must already be registered through RegisterTab.</param>
      <param name="stpFlags">
            One or more members of the STPFLAG enumeration that specify the displayed thumbnail and peek image source of the tab thumbnail.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetThumbnailClip(System.IntPtr,Vanara.PInvoke.RECT@)">
      <summary>Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.</summary>
      <param name="hwnd">The handle to a window represented in the taskbar.</param>
      <param name="prcClip">
            A pointer to a RECT structure that specifies a selection within the window's client area, relative to the upper-left corner of that client area.
            To clear a clip that is already in place and return to the default display of the thumbnail, set this parameter to NULL.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.SetThumbnailTooltip(System.IntPtr,System.String)">
      <summary>
            Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview thumbnail in a taskbar
            button flyout.
            </summary>
      <param name="hwnd">The handle to the window whose thumbnail displays the tooltip. This handle must belong to the calling process.</param>
      <param name="pszTip">
            The pointer to the text to be displayed in the tooltip. This value can be NULL, in which case the title of the window specified by hwnd is used
            as the tooltip.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ThumbBarAddButtons(System.IntPtr,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
      <summary>Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.</summary>
      <param name="hwnd">
            The handle of the window whose thumbnail representation will receive the toolbar. This handle must belong to the calling process.
            </param>
      <param name="cButtons">The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7.</param>
      <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button to be added to the toolbar. Buttons cannot be
            added or deleted later, so this must be the full defined set. Buttons also cannot be reordered, so their order in the array, which is the order
            in which they are displayed left to right, will be their permanent order.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ThumbBarSetImageList(System.IntPtr,System.IntPtr)">
      <summary>
            Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
      <param name="hwnd">
            The handle of the window whose thumbnail representation contains the toolbar to be updated. This handle must belong to the calling process.
            </param>
      <param name="himl">The handle of the image list that contains all button images to be used in the toolbar.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.ThumbBarUpdateButtons(System.IntPtr,System.UInt32,Vanara.PInvoke.Shell32.THUMBBUTTON[])">
      <summary>
            Shows, enables, disables, or hides buttons in a thumbnail toolbar as required by the window's current state. A thumbnail toolbar is a toolbar
            embedded in a thumbnail image of a window in a taskbar button flyout.
            </summary>
      <param name="hwnd">The handle of the window whose thumbnail representation contains the toolbar.</param>
      <param name="cButtons">
            The number of buttons defined in the array pointed to by pButton. The maximum number of buttons allowed is 7. This array contains only structures
            that represent existing buttons that are being updated.
            </param>
      <param name="pButtons">
            A pointer to an array of THUMBBUTTON structures. Each THUMBBUTTON defines an individual button. If the button already exists (the iId value is
            already defined), then that existing button is updated with the information provided in the structure.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ITaskbarList4.UnregisterTab(System.IntPtr)">
      <summary>Removes a thumbnail from an application's preview group when that tab or document is closed in the application.</summary>
      <param name="hwndTab">
            The handle of the tab window whose thumbnail is being removed. This is the same value with which the thumbnail was registered as part the group
            through ITaskbarList3::RegisterTab. This value is required and cannot be NULL.
            </param>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ITEMIDLIST">
      <summary>Contains a list of item identifiers.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ITEMIDLIST.mkid">
      <summary>A list of item identifiers.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KF_CATEGORY">
      <summary>Value that represent a category by which a folder registered with the Known Folder system can be classified.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_VIRTUAL">
      <summary>
            Virtual folders are not part of the file system, which is to say that they have no path. For example, Control Panel and Printers are virtual
            folders. A number of features such as folder path and redirection do not apply to this category.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_FIXED">
      <summary>
            Fixed file system folders are not managed by the Shell and are usually given a permanent path when the system is installed. For example, the
            Windows and Program Files folders are fixed folders. A number of features such as redirection do not apply to this category.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_COMMON">
      <summary>
            Common folders are those file system folders used for sharing data and settings, accessible by all users of a system. For example, all users
            share a common Documents folder as well as their per-user Documents folder.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_CATEGORY.KF_CATEGORY_PERUSER">
      <summary>
            Per-user folders are those stored under each user's profile and accessible only by that user. For example, %USERPROFILE%\Pictures. This category
            of folder usually supports many features including aliasing, redirection and customization.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS">
      <summary>Flags that specify certain known folder behaviors. Used with the KNOWNFOLDER_DEFINITION structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_LOCAL_REDIRECT_ONLY">
      <summary>
            Prevent a per-user known folder from being redirected to a network location. Note that if the known folder has been flagged with
            KFDF_LOCAL_REDIRECT_ONLY but it is a subfolder of a known folder that is redirected to a network location, this subfolder is redirected also.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_ROAMABLE">
      <summary>Can be roamed through a PC-to-PC synchronization.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_PRECREATE">
      <summary>
            Create the folder when the user first logs on. Normally a known folder is not created until it is first called. At that time, an API such as
            SHCreateItemInKnownFolder or IKnownFolder::GetShellItem is called with the KF_FLAG_CREATE flag. However, some known folders need to exist
            immediately. An example is those known folders under %USERPROFILE%, which must exist to provide a proper view. In those cases, KFDF_PRECREATE is
            set and Windows Explorer calls the creation API during its user initialization.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_STREAM">
      <summary>Introduced in Windows 7. The known folder is a file rather than a folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_PUBLISHEXPANDEDPATH">
      <summary>
            Introduced in Windows 7. The full path of the known folder, with any environment variables fully expanded, is stored in the registry under HKEY_CURRENT_USER.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_DEFINITION_FLAGS.KFDF_NO_REDIRECT_UI">
      <summary>Introduced in Windows 8.1. Prevent showing the Locations tab in the property dialog of the known folder.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS">
      <summary>
            Flags used by IKnownFolderManager::Redirect to specify details of a known folder redirection such as permissions and ownership for the redirected folder.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_USER_EXCLUSIVE">
      <summary>Ensure that only the user has permission to access the redirected folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_COPY_SOURCE_DACL">
      <summary>Copy the DACL of the source folder to the target to maintain current access permissions.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_OWNER_USER">
      <summary>
            Sets the user as the owner of a newly created target folder unless the user is a member of the Administrator group, in which case Administrator
            is set as the owner. Must be called with KF_REDIRECT_SET_OWNER_EXPLICIT.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_SET_OWNER_EXPLICIT">
      <summary>
            Set the owner of a newly created target folder. If the user belongs to the Administrators group, Administrators is assigned as the owner. Must be
            called with KF_REDIRECT_OWNER_USER.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_CHECK_ONLY">
      <summary>
            Do not perform a redirection, simply check whether redirection has occurred. If so, IKnownFolderManager::Redirect returns S_OK; if not, or if
            some actions remain to be completed, it returns S_FALSE.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_WITH_UI">
      <summary>Display UI during the redirection.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_UNPIN">
      <summary>Unpin the source folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_PIN">
      <summary>Pin the target folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_COPY_CONTENTS">
      <summary>Copy the existing contents—both files and subfolders—of the known folder to the redirected folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_DEL_SOURCE_CONTENTS">
      <summary>
            Delete the contents of the source folder after they have been copied to the redirected folder. This flag is valid only if
            KF_REDIRECT_COPY_CONTENTS is set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECT_FLAGS.KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS">
      <summary>Reserved. Do not use.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES">
      <summary>Flags that specify the current redirection capabilities of a known folder. Used by IKnownFolder::GetRedirectionCapabilities.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_ALLOW_ALL">
      <summary>
            The folder can be redirected if any of the bits in the lower byte of the value are set but no DENY flag is set. DENY flags are found in the upper
            byte of the value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_REDIRECTABLE">
      <summary>
            The folder can be redirected. Currently, redirection exists for only common and user folders; fixed and virtual folders cannot be redirected.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_ALL">
      <summary>Redirection is not allowed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED">
      <summary>The folder cannot be redirected because it is already redirected by group policy.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_POLICY">
      <summary>The folder cannot be redirected because the policy prohibits redirecting this folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KF_REDIRECTION_CAPABILITIES.KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS">
      <summary>The folder cannot be redirected because the calling application does not have sufficient permissions.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG">
      <summary>Specify special retrieval options for known folders. These values supersede CSIDL values, which have parallel meanings.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT">
      <summary>No flags.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_SIMPLE_IDLIST">
      <summary>
            Build a simple IDList (PIDL) This value can be used when you want to retrieve the file system path but do not specify this value if you are
            retrieving the localized display name of the folder because it might not resolve correctly.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_NOT_PARENT_RELATIVE">
      <summary>Gets the folder's default path independent of the current location of its parent. KF_FLAG_DEFAULT_PATH must also be set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DEFAULT_PATH">
      <summary>
            Gets the default path for a known folder. If this flag is not set, the function retrieves the current—and possibly redirected—path of the folder.
            The execution of this flag includes a verification of the folder's existence unless KF_FLAG_DONT_VERIFY is set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_INIT">
      <summary>
            Initializes the folder using its Desktop.ini settings. If the folder cannot be initialized, the function returns a failure code and no path is
            returned. This flag should always be combined with KF_FLAG_CREATE. If the folder is located on a network, the function might take a longer time
            to execute.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_NO_ALIAS">
      <summary>
            Gets the true system path for the folder, free of any aliased placeholders such as %USERPROFILE%, returned by SHGetKnownFolderIDList and
            IKnownFolder::GetIDList. This flag has no effect on paths returned by SHGetKnownFolderPath and IKnownFolder::GetPath. By default, known folder
            retrieval functions and methods return the aliased path if an alias exists.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DONT_UNEXPAND">
      <summary>
            Stores the full path in the registry without using environment strings. If this flag is not set, portions of the path may be represented by
            environment strings such as %USERPROFILE%. This flag can only be used with SHSetKnownFolderPath and IKnownFolder::SetPath.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_DONT_VERIFY">
      <summary>
            Do not verify the folder's existence before attempting to retrieve the path or IDList. If this flag is not set, an attempt is made to verify that
            the folder is truly present at the path. If that verification fails due to the folder being absent or inaccessible, the function returns a
            failure code and no path is returned. If the folder is located on a network, the function might take a longer time to execute. Setting this flag
            can reduce that lag time.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_CREATE">
      <summary>
            Forces the creation of the specified folder if that folder does not already exist. The security provisions predefined for that folder are
            applied. If the folder does not exist and cannot be created, the function returns a failure code and no path is returned. This value can be used
            only with the following functions and methods: SHGetKnownFolderPath, SHGetKnownFolderIDList, IKnownFolder::GetIDList, IKnownFolder::GetPath, and IKnownFolder::GetShellItem.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_NO_APPCONTAINER_REDIRECTION">
      <summary>
            Introduced in Windows 7: When running inside an app container, or when providing an app container token, this flag prevents redirection to app
            container folders. Instead, it retrieves the path that would be returned where it not running inside an app container.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWN_FOLDER_FLAG.KF_FLAG_ALIAS_ONLY">
      <summary>Introduced in Windows 7. Return only aliased PIDLs. Do not use the file system path.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY">
      <summary>One of the following values that indicate which known category to add to the list</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY.KDC_FREQUENT">
      <summary>Add the Frequent category.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNDESTCATEGORY.KDC_RECENT">
      <summary>Add the Recent category.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION">
      <summary>Defines the specifics of a known folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.category">
      <summary>A single value from the KF_CATEGORY constants that classifies the folder as virtual, fixed, common, or per-user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.dwAttributes">
      <summary>
            Optional. Default file system attributes given to the folder when it is created. For example, the file could be hidden and read-only
            (FILE_ATTRIBUTE_HIDDEN and FILE_ATTRIBUTE_READONLY). For a complete list of possible values, see the dwFlagsAndAttributes parameter of the
            CreateFile function. Set to -1 if not needed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.fidParent">
      <summary>
            A KNOWNFOLDERID value that names another known folder to serve as the parent folder. Applies to common and per-user folders only. This value is
            used in conjunction with pszRelativePath. See Remarks for more details. This value is optional if no value is provided for pszRelativePath.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.ftidType">
      <summary>
            One of the FOLDERTYPEID values that identifies the known folder type based on its contents (such as documents, music, or photographs). This value
            is a GUID.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.kfdFlags">
      <summary>
            Optional. One of more values from the KF_DEFINITION_FLAGS enumeration that allow you to restrict redirection, allow PC-to-PC roaming, and control
            the time at which the known folder is created. Set to 0 if not needed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszDescription">
      <summary>
            A pointer to a short description of the known folder, stored as a null-terminated Unicode string. This description should include the folder's
            purpose and usage.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszIcon">
      <summary>
            Optional. A pointer to the default icon resource used when the folder is created. This is a null-terminated Unicode string in this form:
            <para><c>Module name, Resource ID</c></para><para>When the folder is created, this string is stored in that folder's copy of Desktop.ini. It can be changed later by other Shell APIs.</para><para>This information is not required for virtual folders.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszLocalizedName">
      <summary>
            Optional. A pointer to the default localized name resource used when the folder is created. This is a null-terminated Unicode string in this form:
            <para><c>Module name, Resource ID</c></para><para>When the folder is created, this string is stored in that folder's copy of Desktop.ini. It can be changed later by other Shell APIs.</para><para>This information is not required for virtual folders.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszName">
      <summary>
            A pointer to the non-localized, canonical name for the known folder, stored as a null-terminated Unicode string. If this folder is a common or
            per-user folder, this value is also used as the value name of the "User Shell Folders" registry settings. This name is meant to be a unique,
            human-readable name. Third parties are recommended to follow the format Company.Application.Name. The name given here should not be confused with
            the display name.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszParsingName">
      <summary>
            A pointer to the Shell namespace folder path of the folder, stored as a null-terminated Unicode string. Applies to virtual folders only. For
            example, Control Panel has a parsing name of ::%CLSID_MyComputer%\::%CLSID_ControlPanel%.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszRelativePath">
      <summary>
            Optional. A pointer to a path relative to the parent folder specified in fidParent. This is a null-terminated Unicode string, refers to the
            physical file system path, and is not localized. Applies to common and per-user folders only. See Remarks for more details.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszSecurity">
      <summary>
            Optional. A pointer to a Security Descriptor Definition Language format string. This is a null-terminated Unicode string that describes the
            default security descriptor that the folder receives when it is created. If this parameter is NULL, the new folder inherits the security
            descriptor of its parent. This is particularly useful for common folders that are accessed by all users.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDER_DEFINITION.pszTooltip">
      <summary>
            Optional. A pointer to the default tooltip resource used for this known folder when it is created. This is a null-terminated Unicode string in
            this form:
            <para><c>Module name, Resource ID</c></para><para>
            For example, @%_SYS_MOD_PATH%,-12688 is the tooltip for Common Pictures.When the folder is created, this string is stored in that folder's copy
            of Desktop.ini. It can be changed later by other Shell APIs. This resource might be localized.
            </para><para>This information is not required for virtual folders.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.KNOWNFOLDERID">
      <summary>
            The KNOWNFOLDERID constants represent GUIDs that identify standard folders registered with the system as Known Folders. These folders are installed
            with Windows Vista and later operating systems, and a computer will have only folders appropriate to it installed. For descriptions of these folders,
            see CSIDL.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AccountPictures">
      <summary>Account Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AddNewPrograms">
      <summary>Get Programs</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppsFolder">
      <summary>Applications</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_AppUpdates">
      <summary>Installed Updates</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CameraRoll">
      <summary>Camera Roll</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CDBurning">
      <summary>Temporary Burn Folder</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ChangeRemovePrograms">
      <summary>Programs and Features</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonAdminTools">
      <summary>Administrative Tools</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonOEMLinks">
      <summary>OEM Links</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonPrograms">
      <summary>Programs</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonStartMenu">
      <summary>Start Menu</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonStartup">
      <summary>Startup</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_CommonTemplates">
      <summary>Templates</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ComputerFolder">
      <summary>Computer</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ConflictFolder">
      <summary>Conflicts</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ConnectionsFolder">
      <summary>Network Connections</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Contacts">
      <summary>Contacts</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ControlPanelFolder">
      <summary>Control Panel</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Cookies">
      <summary>Cookies</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Desktop">
      <summary>Desktop</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_DeviceMetadataStore">
      <summary>DeviceMetadataStore</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Documents">
      <summary>Documents</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_DocumentsLibrary">
      <summary>Documents</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Downloads">
      <summary>Downloads</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Favorites">
      <summary>Favorites</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Fonts">
      <summary>Fonts</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Games">
      <summary>Games</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_GameTasks">
      <summary>GameExplorer</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_History">
      <summary>History</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_HomeGroup">
      <summary>Homegroup</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_HomeGroupCurrentUser">
      <summary>The user's username (%USERNAME%)</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ImplicitAppShortcuts">
      <summary>ImplicitAppShortcuts</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_InternetCache">
      <summary>Temporary Internet Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_InternetFolder">
      <summary>The Internet</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Libraries">
      <summary>Libraries</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Links">
      <summary>Links</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalAppData">
      <summary>Local</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalAppDataLow">
      <summary>LocalLow</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_LocalizedResourcesDir">
      <summary>None</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Music">
      <summary>Music</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_MusicLibrary">
      <summary>Music</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_NetHood">
      <summary>Network Shortcuts</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_NetworkFolder">
      <summary>Network</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_OriginalImages">
      <summary>Original Images</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PhotoAlbums">
      <summary>Slide Shows</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PicturesLibrary">
      <summary>Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Pictures">
      <summary>Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Playlists">
      <summary>Playlists</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PrintersFolder">
      <summary>Printers</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PrintHood">
      <summary>Printer Shortcuts</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Profile">
      <summary>The user's username (%USERNAME%)</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramData">
      <summary>ProgramData</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFiles">
      <summary>Program Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesX64">
      <summary>Program Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesX86">
      <summary>Program Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesCommon">
      <summary>Common Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesCommonX64">
      <summary>Common Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ProgramFilesCommonX86">
      <summary>Common Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Programs">
      <summary>Programs</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Public">
      <summary>Public</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicDesktop">
      <summary>Public Desktop</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicDocuments">
      <summary>Public Documents</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicDownloads">
      <summary>Public Downloads</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicGameTasks">
      <summary>GameExplorer</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicLibraries">
      <summary>Libraries</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicMusic">
      <summary>Public Music</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicPictures">
      <summary>Public Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicRingtones">
      <summary>Ringtones</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicUserTiles">
      <summary>Public Account Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_PublicVideos">
      <summary>Public Videos</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_QuickLaunch">
      <summary>Quick Launch</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Recent">
      <summary>Recent Items</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RecordedTVLibrary">
      <summary>Recorded TV</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RecycleBinFolder">
      <summary>Recycle Bin</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_ResourceDir">
      <summary>Resources</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Ringtones">
      <summary>Ringtones</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RoamingAppData">
      <summary>Roaming</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RoamedTileImages">
      <summary>RoamedTileImages</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_RoamingTiles">
      <summary>RoamingTiles</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SampleMusic">
      <summary>Sample Music</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SamplePictures">
      <summary>Sample Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SamplePlaylists">
      <summary>Sample Playlists</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SampleVideos">
      <summary>Sample Videos</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedGames">
      <summary>Saved Games</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedPictures">
      <summary>Saved Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedPicturesLibrary">
      <summary>Saved Pictures Library</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SavedSearches">
      <summary>Searches</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Screenshots">
      <summary>Screenshots</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SEARCH_CSC">
      <summary>Offline Files</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SearchHistory">
      <summary>History</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SearchHome">
      <summary>Search Results</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SEARCH_MAPI">
      <summary>Microsoft Office Outlook</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SearchTemplates">
      <summary>Templates</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SendTo">
      <summary>SendTo</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SidebarDefaultParts">
      <summary>Gadgets</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SidebarParts">
      <summary>Gadgets</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDrive">
      <summary>OneDrive</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDriveCameraRoll">
      <summary>Camera Roll</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDriveDocuments">
      <summary>Documents</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SkyDrivePictures">
      <summary>Pictures</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_StartMenu">
      <summary>Start Menu</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Startup">
      <summary>Startup</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SyncManagerFolder">
      <summary>Sync Center</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SyncResultsFolder">
      <summary>Sync Results</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SyncSetupFolder">
      <summary>Sync Setup</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_System">
      <summary>System32</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_SystemX86">
      <summary>System32</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Templates">
      <summary>Templates</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserPinned">
      <summary>User Pinned</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserProfiles">
      <summary>Users</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserProgramFiles">
      <summary>Programs</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UserProgramFilesCommon">
      <summary>Programs</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UsersFiles">
      <summary>The user's full name (for instance, Jean Philippe Bagel) entered when the user account was created.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_UsersLibraries">
      <summary>Libraries</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Videos">
      <summary>Videos</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_VideosLibrary">
      <summary>Videos</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.KNOWNFOLDERID.FOLDERID_Windows">
      <summary>Windows</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS">
      <summary>Holds an extra data block used by IShellLinkDataList. It holds console properties.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bAutoPosition">
      <summary>A boolean value that is set to TRUE if the console is in auto-position mode, or FALSE otherwise.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bFullScreen">
      <summary>A boolean value that is set to TRUE if the console is in full-screen mode, or FALSE otherwise.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bHistoryNoDup">
      <summary>A boolean value that is set to TRUE if old duplicate history lists should be discarded, or FALSE otherwise.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bInsertMode">
      <summary>A boolean value that is set to TRUE if the console is in insert mode, or FALSE otherwise.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.bQuickEdit">
      <summary>A boolean value that is set to TRUE if the console is in quick-edit mode, or FALSE otherwise.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.ColorTable">
      <summary>An array of COLORREF values with the console's color settings.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dbh">
      <summary>
            The DATABLOCK_HEADER structure with the NT_CONSOLE_PROPS structure's size and signature. The signature for an NT_CONSOLE_PROPS structure is NT_CONSOLE_PROPS_SIG.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwFontSize">
      <summary>A COORD structure with the font size.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwScreenBufferSize">
      <summary>A COORD structure with the console's screen buffer size.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwWindowOrigin">
      <summary>A COORD structure with the console's window origin.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.dwWindowSize">
      <summary>A COORD structure with the console's window size.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.FaceName">
      <summary>A character array that contains the font's face name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.nFont">
      <summary>The font.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.nInputBufferSize">
      <summary>The input buffer size.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uCursorSize">
      <summary>The cursor size.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uFontFamily">
      <summary>The font family/</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uFontWeight">
      <summary>The font weight.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uHistoryBufferSize">
      <summary>The size of the history buffer.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.uNumberOfHistoryBuffers">
      <summary>The number of history buffers.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.wFillAttribute">
      <summary>Fill attribute for the console.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_CONSOLE_PROPS.wPopupFillAttribute">
      <summary>Fill attribute for console pop-ups.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.NT_FE_CONSOLE_PROPS">
      <summary>Holds an extra data block used by IShellLinkDataList. It holds the console's code page.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_FE_CONSOLE_PROPS.dbh">
      <summary>
            The DATABLOCK_HEADER structure with the NT_FE_CONSOLE_PROPS structure's size and signature. The signature for an NT_FE_CONSOLE_PROPS structure is NT_FE_CONSOLE_PROPS_SIG.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.NT_FE_CONSOLE_PROPS.uCodePage">
      <summary>The console's code page.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.OFASI">
      <summary>Used for options in SHOpenFolderAndSelectItems.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.OFASI.OFASI_NONE">
      <summary>No options.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.OFASI.OFASI_EDIT">
      <summary>
            Select an item and put its name in edit mode. This flag can only be used when a single item is being selected. For multiple item selections, it
            is ignored.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.OFASI.OFASI_OPENDESKTOP">
      <summary>
            Select the item or items on the desktop rather than in a Windows Explorer window. Note that if the desktop is obscured behind open windows, it
            will not be made visible.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.PIDL">
      <summary>
            Represents a managed pointer to an ITEMIDLIST.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(System.IntPtr,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> class.</summary>
      <param name="pidl">The raw pointer to a native ITEMIDLIST.</param>
      <param name="clone">if set to <c>true</c> clone the list before storing it.</param>
      <param name="own">if set to <c>true</c><see cref="T:Vanara.PInvoke.Shell32.PIDL" /> will release the memory associated with the ITEMIDLIST when done.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> class from a file path.</summary>
      <param name="path">A string that contains the path.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.#ctor(Vanara.PInvoke.Shell32.PIDL)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> class.</summary>
      <param name="pidl">An existing <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> that will be copied and managed.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.Append(Vanara.PInvoke.Shell32.PIDL)">
      <summary>Appends the specified <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> to the existing list.</summary>
      <param name="appendPidl">The <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> to append.</param>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.Combine(Vanara.PInvoke.Shell32.PIDL,Vanara.PInvoke.Shell32.PIDL)">
      <summary>Combines the specified <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> instances to create a new one.</summary>
      <param name="firstPidl">The first <see cref="T:Vanara.PInvoke.Shell32.PIDL" />.</param>
      <param name="secondPidl">The second <see cref="T:Vanara.PInvoke.Shell32.PIDL" />.</param>
      <returns>A managed <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> instance that contains both supplied lists in their respective order.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.Dump">
      <summary>Dumps this instance to a string a list of binary values.</summary>
      <returns>A binary string of the contents.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.Equals(System.IntPtr)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.Equals(Vanara.PInvoke.Shell32.PIDL)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator{PIDL}" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.Insert(Vanara.PInvoke.Shell32.PIDL)">
      <summary>Inserts the specified <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> before the existing list.</summary>
      <param name="insertPidl">The <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> to insert.</param>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.PIDL.IsEmpty">
      <summary>Gets a value indicating whether this list is empty.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.PIDL.LastId">
      <summary>Gets the last SHITEMID in this ITEMIDLIST.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.PIDL.Null">
      <summary>Gets a value representing a NULL PIDL.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.op_Explicit(Vanara.PInvoke.Shell32.PIDL)~System.IntPtr">
      <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> to <see cref="T:System.IntPtr" />.</summary>
      <param name="pidl">The current <see cref="T:Vanara.PInvoke.Shell32.PIDL" />.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.op_Implicit(System.IntPtr)~Vanara.PInvoke.Shell32.PIDL">
      <summary>Performs an implicit conversion from <see cref="T:System.IntPtr" /> to <see cref="T:Vanara.PInvoke.Shell32.PIDL" />.</summary>
      <param name="p">The pointer to a raw ITEMIDLIST.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a
            releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.RemoveLastId">
      <summary>
            Removes the last identifier from the list.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.PIDL.RemoveLastId</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDL.ToString(Vanara.PInvoke.Shell32.SIGDN)">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance base according to the format provided by <paramref name="displayNameFormat" />.</summary>
      <param name="displayNameFormat">The desired display name format.</param>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.PIDLUtil">
      <summary>
            Utilities to work with <see cref="T:Vanara.PInvoke.Shell32.PIDL" /> and raw ITEMIDLIST pointers.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILClone(System.IntPtr)">
      <summary>Clones an ITEMIDLIST structure</summary>
      <param name="pidl">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pidl</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.PIDLUtil.ILClone(System.IntPtr)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.PIDLUtil.ILClone(System.IntPtr)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILCloneFirst(System.IntPtr)">
      <summary>
            Clones the first SHITEMID structure in an ITEMIDLIST structure
            </summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure that you want to clone.</param>
      <returns>A pointer to an ITEMIDLIST structure that contains the first SHITEMID structure from the ITEMIDLIST structure specified by pidl. Returns NULL on failure.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILCombine(System.IntPtr,System.IntPtr)">
      <summary>
            Combines two ITEMIDLIST structures.
            </summary>
      <param name="pidl1">A pointer to the first ITEMIDLIST structure.</param>
      <param name="pidl2">A pointer to the second ITEMIDLIST structure. This structure is appended to the structure pointed to by pidl1.</param>
      <returns>Returns an ITEMIDLIST containing the combined structures. If you set either pidl1 or pidl2 to NULL, the returned ITEMIDLIST structure is a clone of the non-NULL parameter. Returns NULL if pidl1 and pidl2 are both set to NULL.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILFindLastId(System.IntPtr)">
      <summary>
            Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure
            </summary>
      <param name="pidl">A pointer to an ITEMIDLIST structure.</param>
      <returns>A pointer to the last SHITEMID structure in pidl.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILGetNext(System.IntPtr)">
      <summary>
            Gets the next SHITEMID structure in an ITEMIDLIST structure
            </summary>
      <param name="pidl">A pointer to a particular SHITEMID structure in a larger ITEMIDLIST structure.</param>
      <returns>Returns a pointer to the SHITEMID structure that follows the one specified by pidl. Returns NULL if pidl points to the last SHITEMID structure.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILIsEmpty(System.IntPtr)">
      <summary>Determines whether the specified ITEMIDLIST has no children.</summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure to be evaluated.</param>
      <returns>
        <c>true</c> if the specified ITEMIDLIST is empty; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.ILRemoveLastId(System.IntPtr)">
      <summary>
            Removes the last SHITEMID structure from an ITEMIDLIST structure
            </summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure to be shortened. When the function returns, this variable points to the shortened structure.</param>
      <returns>Returns TRUE if successful, FALSE otherwise.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.PIDLUtil.SplitPidl(System.IntPtr,System.IntPtr@,System.IntPtr@)">
      <summary>
            Separates an ITEMIDLIST into the parent SHITEMID and the children SHITEMIDs
            </summary>
      <param name="pidl">A pointer to the ITEMIDLIST structure to be evaluated.</param>
      <param name="parent">The parent.</param>
      <param name="child">The children.</param>
      <returns>Returns TRUE if successful, FALSE otherwise.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.QITIP">
      <summary>Flags that direct the handling of the item from which you're retrieving the info tip text. This value is commonly zero (QITIPF_DEFAULT).</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_DEFAULT">
      <summary>No special handling.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_USENAME">
      <summary>Provide the name of the item in ppwszTip rather than the info tip text.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_LINKNOTARGET">
      <summary>If the item is a shortcut, retrieve the info tip text of the shortcut rather than its target.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_LINKUSETARGET">
      <summary>If the item is a shortcut, retrieve the info tip text of the shortcut's target.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_USESLOWTIP">
      <summary>Search the entire namespace for the information. This value can result in a delayed response time.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.QITIP.QITIPF_SINGLELINE">
      <summary>
        <c>Windows Vista and later.</c> Put the info tip on a single line.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SFGAO">
      <summary>Attributes that can be retrieved on an item (file or folder) or set of items.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_BROWSABLE">
      <summary>The specified items can be hosted inside a web browser or Windows Explorer frame.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANCOPY">
      <summary>The specified items can be copied.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANDELETE">
      <summary>The specified items can be deleted.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANLINK">
      <summary>
            Shortcuts can be created for the specified items. This attribute has the same value as DROPEFFECT_LINK.
            <para>
            If a namespace extension returns this attribute, a Create Shortcut entry with a default handler is added to the shortcut menu that is displayed
            during drag-and-drop operations. The extension can also implement its own handler for the link verb in place of the default. If the extension
            does so, it is responsible for creating the shortcut.
            </para><para>A Create Shortcut item is also added to the Windows Explorer File menu and to normal shortcut menus.</para><para>
            If the item is selected, your application's IContextMenu::InvokeCommand method is invoked with the lpVerb member of the CMINVOKECOMMANDINFO
            structure set to link. Your application is responsible for creating the link.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANMONIKER">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANMOVE">
      <summary>The specified items can be moved.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CANRENAME">
      <summary>
            The specified items can be renamed. Note that this value is essentially a suggestion; not all namespace clients allow items to be renamed.
            However, those that do must have this attribute set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CAPABILITYMASK">
      <summary>
            This flag is a mask for the capability attributes: SFGAO_CANCOPY, SFGAO_CANMOVE, SFGAO_CANLINK, SFGAO_CANRENAME, SFGAO_CANDELETE,
            SFGAO_HASPROPSHEET, and SFGAO_DROPTARGET. Callers normally do not use this value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_COMPRESSED">
      <summary>The specified items are compressed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_CONTENTSMASK">
      <summary>This flag is a mask for content attributes, at present only SFGAO_HASSUBFOLDER. Callers normally do not use this value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_DISPLAYATTRMASK">
      <summary>Do not use.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_DROPTARGET">
      <summary>The specified items are drop targets.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_ENCRYPTED">
      <summary>The specified items are encrypted and might require special presentation.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_FILESYSANCESTOR">
      <summary>
            The specified folders are either file system folders or contain at least one descendant (child, grandchild, or later) that is a file system
            (SFGAO_FILESYSTEM) folder.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_FILESYSTEM">
      <summary>
            The specified folders or files are part of the file system (that is, they are files, directories, or root directories). The parsed names of the
            items can be assumed to be valid Win32 file system paths. These paths can be either UNC or drive-letter based.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_FOLDER">
      <summary>
            The specified items are folders. Some items can be flagged with both SFGAO_STREAM and SFGAO_FOLDER, such as a compressed file with a .zip file
            name extension. Some applications might include this flag when testing for items that are both files and containers.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_GHOSTED">
      <summary>The specified items are shown as dimmed and unavailable to the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HASPROPSHEET">
      <summary>The specified items have property sheets.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HASSTORAGE">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HASSUBFOLDER">
      <summary>
            The specified folders have subfolders. The SFGAO_HASSUBFOLDER attribute is only advisory and might be returned by Shell folder implementations
            even if they do not contain subfolders. Note, however, that the converse—failing to return SFGAO_HASSUBFOLDER—definitively states that the folder
            objects do not have subfolders.
            <para>
            Returning SFGAO_HASSUBFOLDER is recommended whenever a significant amount of time is required to determine whether any subfolders exist. For
            example, the Shell always returns SFGAO_HASSUBFOLDER when a folder is located on a network drive.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_HIDDEN">
      <summary>The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_ISSLOW">
      <summary>
            Accessing the item (through IStream or other storage interfaces) is expected to be a slow operation. Applications should avoid accessing items
            flagged with SFGAO_ISSLOW. <note>Opening a stream for an item is generally a slow operation at all times. SFGAO_ISSLOW indicates that it is
            expected to be especially slow, for example in the case of slow network connections or offline (FILE_ATTRIBUTE_OFFLINE) files. However, querying
            SFGAO_ISSLOW is itself a slow operation. Applications should query SFGAO_ISSLOW only on a background thread. An alternate method, such as
            retrieving the PKEY_FileAttributes property and testing for FILE_ATTRIBUTE_OFFLINE, could be used in place of a method call that involves SFGAO_ISSLOW.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_LINK">
      <summary>The specified items are shortcuts.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_NEWCONTENT">
      <summary>The items contain new content, as defined by the particular application.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_NONENUMERATED">
      <summary>
            The items are nonenumerated items and should be hidden. They are not returned through an enumerator such as that created by the
            IShellFolder::EnumObjects method.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_PKEYSFGAOMASK">
      <summary>
            Mask used by the PKEY_SFGAOFlags property to determine attributes that are considered to cause slow calculations or lack context: SFGAO_ISSLOW,
            SFGAO_READONLY, SFGAO_HASSUBFOLDER, and SFGAO_VALIDATE. Callers normally do not use this value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_READONLY">
      <summary>
            The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders. This should not be
            confused with the behavior specified by the FILE_ATTRIBUTE_READONLY flag retrieved by IColumnProvider::GetItemData in a SHCOLUMNDATA structure.
            FILE_ATTRIBUTE_READONLY has no meaning for Win32 file system folders.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_REMOVABLE">
      <summary>The specified items are on removable media or are themselves removable devices.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_SHARE">
      <summary>The specified objects are shared.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STORAGE">
      <summary>
            The specified items can be bound to an IStorage object through IShellFolder::BindToObject. For more information about namespace manipulation
            capabilities, see IStorage.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STORAGEANCESTOR">
      <summary>Children of this item are accessible through IStream or IStorage. Those children are flagged with SFGAO_STORAGE or SFGAO_STREAM.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STORAGECAPMASK">
      <summary>
            This flag is a mask for the storage capability attributes: SFGAO_STORAGE, SFGAO_LINK, SFGAO_READONLY, SFGAO_STREAM, SFGAO_STORAGEANCESTOR,
            SFGAO_FILESYSANCESTOR, SFGAO_FOLDER, and SFGAO_FILESYSTEM. Callers normally do not use this value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_STREAM">
      <summary>
            Indicates that the item has a stream associated with it. That stream can be accessed through a call to IShellFolder::BindToObject or
            IShellItem::BindToHandler with IID_IStream in the riid parameter.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_SYSTEM">
      <summary>Windows 7 and later. The specified items are system items.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SFGAO.SFGAO_VALIDATE">
      <summary>
            When specified as input, SFGAO_VALIDATE instructs the folder to validate that the items contained in a folder or Shell item array exist. If one
            or more of those items do not exist, IShellFolder::GetAttributesOf and IShellItemArray::GetAttributes return a failure code. This flag is never
            returned as an [out] value.
            <para>
            When used with the file system folder, SFGAO_VALIDATE instructs the folder to discard cached properties retrieved by clients of
            IShellFolder2::GetDetailsEx that might have accumulated for the specified items.
            </para></summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHARD">
      <summary>
            Indicates the interpretation of the data passed by SHAddToRecentDocs in its pv parameter to identify the item whose usage statistics are being tracked.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_APPIDINFO">
      <summary>
        <c>Windows 7 and later.</c> The pv parameter points to a SHARDAPPIDINFO structure that pairs an IShellItem that identifies the item with an
            AppUserModelID that associates it with a particular process or application.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_APPIDINFOIDLIST">
      <summary>
        <c>Windows 7 and later.</c> The pv parameter points to a SHARDAPPIDINFOIDLIST structure that pairs an absolute PIDL that identifies the item with
            an AppUserModelID that associates it with a particular process or application.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_APPIDINFOLINK">
      <summary>
        <c>Windows 7 and later.</c> The pv parameter points to a SHARDAPPIDINFOLINK structure that pairs an IShellLink that identifies the item with an
            AppUserModelID that associates it with a particular process or application.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_LINK">
      <summary>
        <c>Windows 7 and later.</c> The pv parameter is an interface pointer to an IShellLink object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_PATHA">
      <summary>The pv parameter points to a null-terminated ANSI string with the path and file name of the object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_PATHW">
      <summary>The pv parameter points to a null-terminated Unicode string with the path and file name of the object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_PIDL">
      <summary>The pv parameter points to a PIDL that identifies the document's file object. PIDLs that identify non-file objects are not accepted.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHARD.SHARD_SHELLITEM">
      <summary>
        <c>Windows 7 and later.</c> The pv parameter is an interface pointer to an IShellItem object.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHCONTF">
      <summary>Determines the types of items included in an enumeration. These values are used with the IShellFolder::EnumObjects method.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_CHECKING_FOR_CHILDREN">
      <summary>Windows 7 and later. The calling application is checking for the existence of child items in the folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_FOLDERS">
      <summary>Include items that are folders in the enumeration.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_NONFOLDERS">
      <summary>Include items that are not folders in the enumeration.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_INCLUDEHIDDEN">
      <summary>Include hidden items in the enumeration. This does not include hidden system items. (To include hidden system items, use SHCONTF_INCLUDESUPERHIDDEN.)</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_INIT_ON_FIRST_NEXT">
      <summary>
            No longer used; always assumed. IShellFolder::EnumObjects can return without validating the enumeration object. Validation can be postponed until
            the first call to IEnumIDList::Next. Use this flag when a user interface might be displayed prior to the first IEnumIDList::Next call. For a user
            interface to be presented, hwnd must be set to a valid window handle.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_NETPRINTERSRCH">
      <summary>The calling application is looking for printer objects.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_SHAREABLE">
      <summary>The calling application is looking for resources that can be shared.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_STORAGE">
      <summary>Include items with accessible storage and their ancestors, including hidden items.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_NAVIGATION_ENUM">
      <summary>Windows 7 and later. Child folders should provide a navigation enumeration.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_FASTITEMS">
      <summary>Windows Vista and later. The calling application is looking for resources that can be enumerated quickly.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_FLATLIST">
      <summary>Windows Vista and later. Enumerate items as a simple list even if the folder itself is not structured in that way.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_ENABLE_ASYNC">
      <summary>
            Windows Vista and later. The calling application is monitoring for change notifications. This means that the enumerator does not have to return
            all results. Items can be reported through change notifications.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHCONTF.SHCONTF_INCLUDESUPERHIDDEN">
      <summary>
            Windows 7 and later. Include hidden system items in the enumeration. This value does not include hidden non-system items. (To include hidden
            non-system items, use SHCONTF_INCLUDEHIDDEN.)
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS">
      <summary>Specifies option settings. Used with IShellLinkDataList::GetFlags and IShellLinkDataList::SetFlags.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_DEFAULT">
      <summary>Default value used when no other flag is explicitly set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_ID_LIST">
      <summary>The Shell link was saved with an ID list.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_LINK_INFO">
      <summary>
            The Shell link was saved with link information to enable distributed tracking. This information is used by .lnk files to locate the target if the
            targets's path has changed. It includes information such as volume label and serial number, although the specific stored information can change
            from release to release.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_NAME">
      <summary>The link has a name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_RELPATH">
      <summary>The link has a relative path.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_WORKINGDIR">
      <summary>The link has a working directory.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_ARGS">
      <summary>The link has arguments.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_ICONLOCATION">
      <summary>The link has an icon location.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_UNICODE">
      <summary>Stored strings are Unicode.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_FORCE_NO_LINKINFO">
      <summary>
            Prevents the storage of link tracking information. If this flag is set, it is less likely, though not impossible, that a target can be found by
            the link if that target is moved.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_EXP_SZ">
      <summary>The link contains expandable environment strings such as %windir%.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_RUN_IN_SEPARATE">
      <summary>Causes a 16-bit target application to run in a separate Virtual DOS Machine (VDM)/Windows on Windows (WOW).</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_LOGO3ID">
      <summary>Not supported. Note that as of Windows Vista, this value is no longer defined.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_DARWINID">
      <summary>The link is a special Windows Installer link.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_RUNAS_USER">
      <summary>Causes the target application to run as a different user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_HAS_EXP_ICON_SZ">
      <summary>The icon path in the link contains an expandable environment string such as such as %windir%.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_NO_PIDL_ALIAS">
      <summary>Prevents the use of ID list alias mapping when parsing the ID list from the path.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_FORCE_UNCNAME">
      <summary>Forces the use of the UNC name (a full network resource name), rather than the local name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_RUN_WITH_SHIMLAYER">
      <summary>
            Causes the target of this link to launch with a shim layer active. A shim is an intermediate DLL that facilitates compatibility between otherwise
            incompatible software services. Shims are typically used to provide version compatibility.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_FORCE_NO_LINKTRACK">
      <summary>Introduced in Windows Vista. Disable object ID distributed tracking information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_ENABLE_TARGET_METADATA">
      <summary>Introduced in Windows Vista. Enable the caching of target metadata into the link file.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_DISABLE_LINK_PATH_TRACKING">
      <summary>Introduced in Windows 7. Disable shell link tracking.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING">
      <summary>Introduced in Windows Vista. Disable known folder tracking information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_NO_KF_ALIAS">
      <summary>Introduced in Windows 7. Disable known folder alias mapping when loading the IDList during deserialization.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_ALLOW_LINK_TO_LINK">
      <summary>Introduced in Windows 7. Allow link to point to another shell link as long as this does not create cycles.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_UNALIAS_ON_SAVE">
      <summary>Introduced in Windows 7. Remove alias when saving the IDList.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_PREFER_ENVIRONMENT_PATH">
      <summary>
            Introduced in Windows 7. Recalculate the IDList from the path with the environmental variables at load time, rather than persisting the IDList.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET">
      <summary>
            Introduced in Windows 7. If the target is a UNC location on a local machine, keep the local IDList target in addition to the remote target.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELL_LINK_DATA_FLAGS.SLDF_PERSIST_VOLUME_ID_RELATIVE">
      <summary>Introduced in Windows 8. Persist the target IDlist in its volume-ID-relative form to avoid a dependency on drive letters.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ShellDataBlockSignature">
      <summary>Defines which data block is supported.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_SZ_LINK_SIG">
      <summary>The target name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.NT_CONSOLE_PROPS_SIG">
      <summary>Console properties</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.NT_FE_CONSOLE_PROPS_SIG">
      <summary>The console's code page.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_SPECIAL_FOLDER_SIG">
      <summary>Special folder information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_DARWIN_ID_SIG">
      <summary>The link's Windows Installer ID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_SZ_ICON_SIG">
      <summary>The icon path.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellDataBlockSignature.EXP_PROPERTYSTORAGE_SIG">
      <summary>Stores information about the Shell link state.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO">
      <summary>
            Contains information used by ShellExecuteEx.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="!:Vanara.PInvoke.SHELLEXECUTEINFO" /> struct.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.cbSize">
      <summary>
            Required. The size of this structure, in bytes.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.dwHotKey">
      <summary>
            A keyboard shortcut to associate with the application. The low-order word is the virtual key code, and the high-order word is a modifier flag (HOTKEYF_). For a list of modifier flags, see the description of the WM_SETHOTKEY message. This member is ignored if fMask does not include SEE_MASK_HOTKEY.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.fMask">
      <summary>
            Flags that indicate the content and validity of the other structure members.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hIcon">
      <summary>
            A handle to the icon for the file type. This member is ignored if fMask does not include SEE_MASK_ICON. This value is used only in Windows XP and earlier. It is ignored as of Windows Vista.
            <para><c>OR</c></para><para>A handle to the monitor upon which the document is to be displayed. This member is ignored if fMask does not include SEE_MASK_HMONITOR.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hInstApp">
      <summary>
            [out] If SEE_MASK_NOCLOSEPROCESS is set and the ShellExecuteEx call succeeds, it sets this member to a value greater than 32. If the function fails, it is set to an SE_ERR_XXX error value that indicates the cause of the failure. Although hInstApp is declared as an HINSTANCE for compatibility with 16-bit Windows applications, it is not a true HINSTANCE. It can be cast only to an int and compared to either 32 or the following SE_ERR_XXX error codes.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hkeyClass">
      <summary>
            A handle to the registry key for the file type. The access rights for this registry key should be set to KEY_READ. This member is ignored if fMask does not include SEE_MASK_CLASSKEY.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hProcess">
      <summary>
            A handle to the newly started application. This member is set on return and is always NULL unless fMask is set to SEE_MASK_NOCLOSEPROCESS. Even if fMask is set to SEE_MASK_NOCLOSEPROCESS, hProcess will be NULL if no process was launched. For example, if a document to be launched is a URL and an instance of Internet Explorer is already running, it will display the document. No new process is launched, and hProcess will be NULL.
            <note>ShellExecuteEx does not always return an hProcess, even if a process is launched as the result of the call. For example, an hProcess does not return when you use SEE_MASK_INVOKEIDLIST to invoke IContextMenu.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.hwnd">
      <summary>
            Optional. A handle to the parent window, used to display any message boxes that the system might produce while executing this function. This value can be NULL.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpClass">
      <summary>
            The address of a null-terminated string that specifies one of the following:
            <list type="bullet"><item><term>A ProgId. For example, "Paint.Picture".</term></item><item><term>A URI protocol scheme. For example, "http".</term></item><item><term>A file extension. For example, ".txt".</term></item><item><term>A registry path under HKEY_CLASSES_ROOT that names a subkey that contains one or more Shell verbs. This key will have a subkey that conforms to the Shell verb registry schema, such as <c>shell\verb name</c>.</term></item></list><para>This member is ignored if fMask does not include SEE_MASK_CLASSNAME.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpDirectory">
      <summary>
            Optional. The address of a null-terminated string that specifies the name of the working directory. If this member is NULL, the current directory is used as the working directory.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpFile">
      <summary>
            The address of a null-terminated string that specifies the name of the file or object on which ShellExecuteEx will perform the action specified by the lpVerb parameter. The system registry verbs that are supported by the ShellExecuteEx function include "open" for executable files and document files and "print" for document files for which a print handler has been registered. Other applications might have added Shell verbs through the system registry, such as "play" for .avi and .wav files. To specify a Shell namespace object, pass the fully qualified parse name and set the SEE_MASK_INVOKEIDLIST flag in the fMask parameter.
            <note>If the SEE_MASK_INVOKEIDLIST flag is set, you can use either lpFile or lpIDList to identify the item by its file system path or its PIDL respectively. One of the two values—lpFile or lpIDList—must be set.</note><note>If the path is not included with the name, the current directory is assumed.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpIDList">
      <summary>
            The address of an absolute ITEMIDLIST structure (PCIDLIST_ABSOLUTE) to contain an item identifier list that uniquely identifies the file to execute. This member is ignored if the fMask member does not include SEE_MASK_IDLIST or SEE_MASK_INVOKEIDLIST.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpParameters">
      <summary>
            Optional. The address of a null-terminated string that contains the application parameters. The parameters must be separated by spaces. If the lpFile member specifies a document file, lpParameters should be NULL.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.lpVerb">
      <summary>
            A string, referred to as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. This parameter can be NULL, in which case the default verb is used if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry. The following verbs are commonly used:
            <list><item><term>edit</term><definition>Launches an editor and opens the document for editing.If lpFile is not a document file, the function will fail.</definition></item><item><term>explore</term><definition>Explores the folder specified by lpFile.</definition></item><item><term>find</term><definition>Initiates a search starting from the specified directory.</definition></item><item><term>open</term><definition>Opens the file specified by the lpFile parameter. The file can be an executable file, a document file, or a folder.</definition></item><item><term>print</term><definition>Prints the document file specified by lpFile.If lpFile is not a document file, the function will fail.</definition></item><item><term>properties</term><definition>Displays the file or folder's properties.</definition></item></list></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO.nShellExecuteShow">
      <summary>
            Required. Flags that specify how an application is to be shown when it is opened; one of the SW_ values listed for the ShellExecute function. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags">
      <summary>Flags that indicate the content and validity of the other structure members in <see cref="T:Vanara.PInvoke.Shell32.SHELLEXECUTEINFO" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_DEFAULT">
      <summary>Use default values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_CLASSNAME">
      <summary>Use the class name given by the lpClass member. If both SEE_MASK_CLASSKEY and SEE_MASK_CLASSNAME are set, the class key is used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_CLASSKEY">
      <summary>Use the class key given by the hkeyClass member. If both SEE_MASK_CLASSKEY and SEE_MASK_CLASSNAME are set, the class key is used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_IDLIST">
      <summary>Use the item identifier list given by the lpIDList member. The lpIDList member must point to an ITEMIDLIST structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_INVOKEIDLIST">
      <summary>
            Use the IContextMenu interface of the selected item's shortcut menu handler. Use either lpFile to identify the item by its file system path or
            lpIDList to identify the item by its PIDL. This flag allows applications to use ShellExecuteEx to invoke verbs from shortcut menu extensions
            instead of the static verbs listed in the registry. <note>SEE_MASK_INVOKEIDLIST overrides and implies SEE_MASK_IDLIST.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_ICON">
      <summary>
            Use the icon given by the hIcon member. This flag cannot be combined with SEE_MASK_HMONITOR. <note>This flag is used only in Windows XP and
            earlier. It is ignored as of Windows Vista.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_HOTKEY">
      <summary>Use the keyboard shortcut given by the dwHotKey member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOCLOSEPROCESS">
      <summary>
            Use to indicate that the hProcess member receives the process handle. This handle is typically used to allow an application to find out when a
            process created with ShellExecuteEx terminates. In some cases, such as when execution is satisfied through a DDE conversation, no handle will be
            returned. The calling application is responsible for closing the handle when it is no longer needed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_CONNECTNETDRV">
      <summary>
            Validate the share and connect to a drive letter. This enables reconnection of disconnected network drives. The lpFile member is a UNC path of a
            file on a network.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOASYNC">
      <summary>
            Wait for the execute operation to complete before returning. This flag should be used by callers that are using ShellExecute forms that might
            result in an async activation, for example DDE, and create a process that might be run on a background thread. (Note: ShellExecuteEx runs on a
            background thread by default if the caller's threading model is not Apartment.) Calls to ShellExecuteEx from processes already running on
            background threads should always pass this flag. Also, applications that exit immediately after calling ShellExecuteEx should specify this flag.
            <para>
            If the execute operation is performed on a background thread and the caller did not specify the SEE_MASK_ASYNCOK flag, then the calling thread
            waits until the new process has started before returning. This typically means that either CreateProcess has been called, the DDE communication
            has completed, or that the custom execution delegate has notified ShellExecuteEx that it is done. If the SEE_MASK_WAITFORINPUTIDLE flag is
            specified, then ShellExecuteEx calls WaitForInputIdle and waits for the new process to idle before returning, with a maximum timeout of 1 minute.
            </para><para>For further discussion on when this flag is necessary, see the Remarks section.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_DDEWAIT">
      <summary>Do not use; use SEE_MASK_NOASYNC instead.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_DOENVSUBST">
      <summary>Expand any environment variables specified in the string given by the lpDirectory or lpFile member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_NO_UI">
      <summary>Do not display an error message box if an error occurs.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_UNICODE">
      <summary>Use this flag to indicate a Unicode application.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NO_CONSOLE">
      <summary>
            Use to inherit the parent's console for the new process instead of having it create a new console. It is the opposite of using a
            CREATE_NEW_CONSOLE flag with CreateProcess.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_ASYNCOK">
      <summary>
            The execution can be performed on a background thread and the call should return immediately without waiting for the background thread to finish.
            Note that in certain cases ShellExecuteEx ignores this flag and waits for the process to finish before returning.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_HMONITOR">
      <summary>
            Use this flag when specifying a monitor on multi-monitor systems. The monitor is specified in the hMonitor member. This flag cannot be combined
            with SEE_MASK_ICON.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOZONECHECKS">
      <summary>
            Introduced in Windows XP. Do not perform a zone check. This flag allows ShellExecuteEx to bypass zone checking put into place by IAttachmentExecute.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_NOQUERYCLASSSTORE">
      <summary>Not used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_WAITFORINPUTIDLE">
      <summary>
            After the new process is created, wait for the process to become idle before returning, with a one minute timeout. See WaitForInputIdle for more details.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_LOG_USAGE">
      <summary>
            Introduced in Windows XP. Keep track of the number of times this application has been launched. Applications with sufficiently high counts appear
            in the Start Menu's list of most frequently used programs.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.ShellExecuteMaskFlags.SEE_MASK_FLAG_HINST_IS_SITE">
      <summary>
            The hInstApp member is used to specify the IUnknown of an object that implements IServiceProvider. This object will be used as a site pointer.
            The site pointer is used to provide services to the ShellExecute function, the handler binding process, and invoked verb handlers.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.ShellUtil">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.ShellUtil</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromGuid(System.Guid)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromGuid(System.Guid)</parameter>
          </include>
        </markup>
      </summary>
      <param name="knownFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>knownFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromGuid(System.Guid)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromGuid(System.Guid)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromPath(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromPath(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="path">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromPath(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetKnownFolderFromPath(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetPathForKnownFolder(System.Guid)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetPathForKnownFolder(System.Guid)</parameter>
          </include>
        </markup>
      </summary>
      <param name="knownFolder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>knownFolder</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetPathForKnownFolder(System.Guid)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetPathForKnownFolder(System.Guid)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetPathFromShellItem(Vanara.PInvoke.Shell32.IShellItem)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetPathFromShellItem(Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </summary>
      <param name="item">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>item</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetPathFromShellItem(Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetPathFromShellItem(Vanara.PInvoke.Shell32.IShellItem)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.ShellUtil.GetShellItemForPath(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetShellItemForPath(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="path">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetShellItemForPath(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Shell32.ShellUtil.GetShellItemForPath(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHFILEINFO">
      <summary>Contains information about a file object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.dwAttributes">
      <summary>
            An array of values that indicates the attributes of the file object. For information about these values, see the IShellFolder::GetAttributesOf method.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.hIcon">
      <summary>
            A handle to the icon that represents the file. You are responsible for destroying this handle with DestroyIcon when you no longer need it.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.iIcon">
      <summary>The index of the icon image within the system image list.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Shell32.SHFILEINFO.Size">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Vanara.PInvoke.Shell32.SHFILEINFO.Size</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.szDisplayName">
      <summary>
            A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon
            representing the file.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHFILEINFO.szTypeName">
      <summary>A string that describes the type of file.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHGDNF">
      <summary>
            Defines the values used with the IShellFolder::GetDisplayNameOf and IShellFolder::SetNameOf methods to specify the type of file or folder names used
            by those methods.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_FORADDRESSBAR">
      <summary>The name is displayed in an address bar combo box.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_FOREDITING">
      <summary>The name is used for in-place editing when the user renames the item.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_FORPARSING">
      <summary>
            The name is used for parsing. That is, it can be passed to IShellFolder::ParseDisplayName to recover the object's PIDL. The form this name takes
            depends on the particular object. When SHGDN_FORPARSING is used alone, the name is relative to the desktop. When combined with SHGDN_INFOLDER,
            the name is relative to the folder from which the request was made.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_INFOLDER">
      <summary>
            The name is relative to the folder from which the request was made. This is the name display to the user when used in the context of the folder.
            For example, it is used in the view and in the address bar path segment for the folder. This name should not include disambiguation
            information—for instance "username" instead of "username (on Machine)" for a particular user's folder. Use this flag in combinations with
            SHGDN_FORPARSING and SHGDN_FOREDITING.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGDNF.SHGDN_NORMAL">
      <summary>
            When not combined with another flag, return the parent-relative name that identifies the item, suitable for displaying to the user. This name
            often does not include extra information such as the file name extension and does not need to be unique. This name might include information that
            identifies the folder that contains the item. For instance, this flag could cause IShellFolder::GetDisplayNameOf to return the string "username
            (on Machine)" for a particular user's folder.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHGetDataFormat">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.SHGetDataFormat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGetDataFormat.SHGDFIL_FINDDATA">
      <summary>Format used for file system objects. The pv parameter is the address of a WIN32_FIND_DATA structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGetDataFormat.SHGDFIL_NETRESOURCE">
      <summary>Format used for network resources. The pv parameter is the address of a NETRESOURCE structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGetDataFormat.SHGDFIL_DESCRIPTIONID">
      <summary>Version 4.71. Format used for network resources. The pv parameter is the address of an SHDESCRIPTIONID structure.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHGFI">
      <summary>The flags that specify the file information to retrieve from <see cref="!:Vanara.SHGetFileInfo(string,System.IO.FileAttributes,ref SHFILEINFO,int,Vanara.PInvoke.SHGFI)" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ICON">
      <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the
            hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_DISPLAYNAME">
      <summary>
            Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the szDisplayName member of
            the structure specified in psfi. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name.
            Note that the display name can be affected by settings such as whether extensions are shown.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_TYPENAME">
      <summary>
            Retrieve the string that describes the file's type. The string is copied to the szTypeName member of the structure specified in psfi.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ATTRIBUTES">
      <summary>
            Retrieve the item attributes. The attributes are copied to the dwAttributes member of the structure specified in the psfi parameter. These are
            the same attributes that are obtained from IShellFolder::GetAttributesOf.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ICONLOCATION">
      <summary>
            Retrieve the name of the file that contains the icon representing the file specified by pszPath, as returned by the IExtractIcon::GetIconLocation
            method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the
            szDisplayName member of the structure specified by psfi. The icon's index is copied to that structure's iIcon member.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_EXETYPE">
      <summary>
            Retrieve the type of the executable file if pszPath identifies an executable file. The information is packed into the return value. This flag
            cannot be specified with any other flags.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SYSICONINDEX">
      <summary>
            Retrieve the index of a system image list icon. If successful, the index is copied to the iIcon member of psfi. The return value is a handle to
            the system image list. Only those images whose indices are successfully copied to iIcon are valid. Attempting to access other images in the
            system image list will result in undefined behavior.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_LINKOVERLAY">
      <summary>Modify SHGFI_ICON, causing the function to add the link overlay to the file's icon. The SHGFI_ICON flag must also be set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SELECTED">
      <summary>
            Modify SHGFI_ICON, causing the function to blend the file's icon with the system highlight color. The SHGFI_ICON flag must also be set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ATTR_SPECIFIED">
      <summary>
            Modify SHGFI_ATTRIBUTES to indicate that the dwAttributes member of the SHFILEINFO structure at psfi contains the specific attributes that are
            desired. These attributes are passed to IShellFolder::GetAttributesOf. If this flag is not specified, 0xFFFFFFFF is passed to
            IShellFolder::GetAttributesOf, requesting all attributes. This flag cannot be specified with the SHGFI_ICON flag.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_LARGEICON">
      <summary>Modify SHGFI_ICON, causing the function to retrieve the file's large icon. The SHGFI_ICON flag must also be set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SMALLICON">
      <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's small icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return
            the handle to the system image list that contains small icon images. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_OPENICON">
      <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's open icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return
            the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the
            container is open. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_SHELLICONSIZE">
      <summary>
            Modify SHGFI_ICON, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to
            the system metric values. The SHGFI_ICON flag must also be set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_PIDL">
      <summary>Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_USEFILEATTRIBUTES">
      <summary>
            Indicates that the function should not attempt to access the file specified by pszPath. Rather, it should act as if the file specified by pszPath
            exists with the file attributes passed in dwFileAttributes. This flag cannot be combined with the SHGFI_ATTRIBUTES, SHGFI_EXETYPE, or SHGFI_PIDL flags.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_ADDOVERLAYS">
      <summary>Apply the appropriate overlays to the file's icon. The SHGFI_ICON flag must also be set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFI.SHGFI_OVERLAYINDEX">
      <summary>
            Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure
            specified by psfi. This flag requires that the SHGFI_ICON be set as well.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHGFP">
      <summary>Flags used by <see cref="M:Vanara.PInvoke.Shell32.SHGetFolderPath(System.IntPtr,System.Int32,Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.Shell32.SHGFP,System.Text.StringBuilder)" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFP.SHGFP_TYPE_CURRENT">
      <summary>Retrieve the folder's current path.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHGFP.SHGFP_TYPE_DEFAULT">
      <summary>Retrieve the folder's default path.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHIL">
      <summary>Used by SHGetImageList.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_LARGE">
      <summary>
            The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the Appearance tab in
            Display Properties, the image is 48x48 pixels.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_SMALL">
      <summary>These images are the Shell standard small icon size of 16x16, but the size can be customized by the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_EXTRALARGE">
      <summary>These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_SYSSMALL">
      <summary>These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHIL.SHIL_JUMBO">
      <summary>Windows Vista and later. The image is normally 256x256 pixels.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SHITEMID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Shell32.SHITEMID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHITEMID.abID">
      <summary>A variable-length item identifier.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SHITEMID.cb">
      <summary>The size of identifier, in bytes, including <see cref="F:Vanara.PInvoke.Shell32.SHITEMID.cb" /> itself.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SIATTRIBFLAGS">
      <summary>
            If the array contains a single item, this method provides the same results as GetAttributes. However, if the array contains multiple items, the
            attribute sets of all the items are combined into a single attribute set and returned in the value pointed to by psfgaoAttribs. This parameter takes
            one of the following values to define how that final attribute set is determined:
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIATTRIBFLAGS.SIATTRIBFLAGS_APPCOMPAT">
      <summary>
            Retrieve the attributes directly from the Shell data source. To use this value, the Shell item array must have been initialized as an
            IShellFolder with its contents specified as an array of child PIDLs.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIATTRIBFLAGS.SIATTRIBFLAGS_OR">
      <summary>
            If there are multiple items in the array, use a bitwise OR to combine the attributes across items. For instance, if the array contains two items
            where one item can be moved (SFGAO_CANMOVE) and a second item cannot, the method returns (1 | 0) or 1 for that attribute bit.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIATTRIBFLAGS.SIATTRIBFLAGS_ALLITEMS">
      <summary>
            Windows 7 and later. Examine all items in the array to compute the attributes. Note that this can result in poor performance over large arrays
            and therefore it should be used only when needed. Cases in which you pass this flag should be extremely rare. See Remarks for more details.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SICHINTF">
      <summary>Used to determine how to compare two Shell items. IShellItem::Compare uses this enumerated type.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_ALLFIELDS">
      <summary>Exact comparison of two instances of a Shell item.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_CANONICAL">
      <summary>
            This relates to the iOrder parameter of the IShellItem::Compare interface and indicates that the comparison is based on a canonical name.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_DISPLAY">
      <summary>
            This relates to the iOrder parameter of the IShellItem::Compare interface and indicates that the comparison is based on the display in a folder view.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SICHINTF.SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL">
      <summary>Windows 7 and later. If the Shell items are not the same, test the file system paths.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SIGDN">
      <summary>Requests the form of an item's display name to retrieve through IShellItem::GetDisplayName and SHGetNameFromIDList.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_DESKTOPABSOLUTEEDITING">
      <summary>Returns the editing name relative to the desktop. In UI this name is suitable for display to the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_DESKTOPABSOLUTEPARSING">
      <summary>Returns the parsing name relative to the desktop. This name is not suitable for use in UI.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_FILESYSPATH">
      <summary>
            Returns the item's file system path, if it has one. Only items that report SFGAO_FILESYSTEM have a file system path. When an item does not have a
            file system path, a call to IShellItem::GetDisplayName on that item will fail. In UI this name is suitable for display to the user in some cases,
            but note that it might not be specified for all items.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_NORMALDISPLAY">
      <summary>Returns the display name relative to the parent folder. In UI this name is generally ideal for display to the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVE">
      <summary>Returns the path relative to the parent folder.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEEDITING">
      <summary>Returns the editing name relative to the parent folder. In UI this name is suitable for display to the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEFORADDRESSBAR">
      <summary>
            Returns the path relative to the parent folder in a friendly format as displayed in an address bar. This name is suitable for display to the user.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEFORUI">
      <summary>Introduced in Windows 8.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_PARENTRELATIVEPARSING">
      <summary>Returns the parsing name relative to the parent folder. This name is not suitable for use in UI.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SIGDN.SIGDN_URL">
      <summary>
            Returns the item's URL, if it has one. Some items do not have a URL, and in those cases a call to IShellItem::GetDisplayName will fail. This name
            is suitable for display to the user in some cases, but note that it might not be specified for all items.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SLGP">
      <summary>Flags that specify the type of path information to retrieve. This parameter can be a combination of the following values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_SHORTPATH">
      <summary>Retrieves the standard short (8.3 format) file name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_UNCPRIORITY">
      <summary>Unsupported; do not use.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_RAWPATH">
      <summary>
            Retrieves the raw path name. A raw path is something that might not exist and may include environment variables that need to be expanded.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLGP.SLGP_RELATIVEPRIORITY">
      <summary>
            Windows Vista and later. Retrieves the path, if possible, of the shortcut's target relative to the path set by a previous call to IShellLink::SetRelativePath.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.SLR_FLAGS">
      <summary>Action flags.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NONE">
      <summary>No action.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NO_UI">
      <summary>
            Do not display a dialog box if the link cannot be resolved. When SLR_NO_UI is set, the high-order word of fFlags can be set to a time-out value
            that specifies the maximum amount of time to be spent resolving the link. The function returns if the link cannot be resolved within the time-out
            duration. If the high-order word is set to zero, the time-out duration will be set to the default value of 3,000 milliseconds (3 seconds). To
            specify a value, set the high word of fFlags to the desired time-out duration, in milliseconds.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_ANY_MATCH">
      <summary>Not used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_UPDATE">
      <summary>
            If the link object has changed, update its path and list of identifiers. If SLR_UPDATE is set, you do not need to call IPersistFile::IsDirty to
            determine whether the link object has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOUPDATE">
      <summary>Do not update the link information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOSEARCH">
      <summary>Do not execute the search heuristics.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOTRACK">
      <summary>Do not use distributed link tracking.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NOLINKINFO">
      <summary>
            Disable distributed link tracking. By default, distributed link tracking tracks removable media across multiple devices based on the volume name.
            It also uses the UNC path to track remote file systems whose drive letter has changed. Setting SLR_NOLINKINFO disables both types of tracking.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_INVOKE_MSI">
      <summary>Call the Windows Installer.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NO_UI_WITH_MSG_PUMP">
      <summary>Windows XP and later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_OFFER_DELETE_WITHOUT_FILE">
      <summary>
            Windows 7 and later. Offer the option to delete the shortcut when this method is unable to resolve it, even if the shortcut is not a shortcut to
            a file.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_KNOWNFOLDER">
      <summary>
            Windows 7 and later. Report as dirty if the target is a known folder and the known folder was redirected. This only works if the original target
            path was a file system path or ID list and not an aliased known folder ID list.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_MACHINE_IN_LOCAL_TARGET">
      <summary>Windows 7 and later. Resolve the computer name in UNC targets that point to a local computer. This value is used with SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_UPDATE_MACHINE_AND_SID">
      <summary>Windows 7 and later. Update the computer GUID and user SID if necessary.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.SLR_FLAGS.SLR_NO_OBJECT_ID">
      <summary></summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.STPFLAG">
      <summary>Used by the ITaskbarList4::SetTabProperties method to specify tab properties.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_NONE">
      <summary>
            No specific property values are specified. The default behavior is used: the tab window provides a thumbnail and peek image, either live or
            static as appropriate.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPTHUMBNAILALWAYS">
      <summary>
            Always use the thumbnail provided by the main application frame window rather than a thumbnail provided by the individual tab window. Do not
            combine this value with STPF_USEAPPTHUMBNAILWHENACTIVE; doing so will result in an error.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPTHUMBNAILWHENACTIVE">
      <summary>
            When the application tab is active and a live representation of its window is available, use the main application's frame window thumbnail. At
            other times, use the tab window thumbnail. Do not combine this value with STPF_USEAPPTHUMBNAILALWAYS; doing so will result in an error.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPPEEKALWAYS">
      <summary>
            Always use the peek image provided by the main application frame window rather than a peek image provided by the individual tab window. Do not
            combine this value with STPF_USEAPPPEEKWHENACTIVE; doing so will result in an error.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STPFLAG.STPF_USEAPPPEEKWHENACTIVE">
      <summary>
            When the application tab is active and a live representation of its window is available, show the main application frame in the peek feature. At
            other times, use the tab window. Do not combine this value with STPF_USEAPPPEEKALWAYS; doing so will result in an error.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.STRRET">
      <summary>Contains strings returned from the IShellFolder interface methods.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STRRET.cStr">
      <summary>The buffer to receive the display name. CHAR[MAX_PATH]</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STRRET.pOleStr">
      <summary>
            A pointer to the string. This memory must be allocated with CoTaskMemAlloc. It is the calling application's responsibility to free this memory
            with CoTaskMemFree when it is no longer needed.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Shell32.STRRET.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STRRET.uOffset">
      <summary>The offset into the item identifier list.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STRRET.uType">
      <summary>A value that specifies the desired format of the string.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.STRRET_TYPE">
      <summary>A value that specifies the desired format of the string.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STRRET_TYPE.STRRET_WSTR">
      <summary>The string is at the address specified by pOleStr member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STRRET_TYPE.STRRET_OFFSET">
      <summary>The uOffset member value indicates the number of bytes from the beginning of the item identifier list where the string is located.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.STRRET_TYPE.STRRET_CSTR">
      <summary>The string is returned in the cStr member.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.TBPFLAG">
      <summary>
            Flags that control the current state of the progress button. Specify only one of the following flags; all states are mutually exclusive of all others.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_ERROR">
      <summary>
            The progress indicator turns red to show that an error has occurred in one of the windows that is broadcasting progress. This is a determinate
            state. If the progress indicator is in the indeterminate state, it switches to a red determinate display of a generic percentage not indicative
            of actual progress.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_INDETERMINATE">
      <summary>
            The progress indicator does not grow in size, but cycles repeatedly along the length of the taskbar button. This indicates activity without
            specifying what proportion of the progress is complete. Progress is taking place, but there is no prediction as to how long the operation will take.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_NOPROGRESS">
      <summary>
            Stops displaying progress and returns the button to its normal state. Call this method with this flag to dismiss the progress bar when the
            operation is complete or canceled.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_NORMAL">
      <summary>
            The progress indicator grows in size from left to right in proportion to the estimated amount of the operation completed. This is a determinate
            progress indicator; a prediction is being made as to the duration of the operation.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.TBPFLAG.TBPF_PAUSED">
      <summary>
            The progress indicator turns yellow to show that progress is currently stopped in one of the windows but can be resumed by the user. No error
            condition exists and nothing is preventing the progress from continuing. This is a determinate state. If the progress indicator is in the
            indeterminate state, it switches to a yellow determinate display of a generic percentage not indicative of actual progress.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.THUMBBUTTON">
      <summary>Used by methods of the ITaskbarList3 interface to define buttons used in a toolbar embedded in a window's thumbnail representation.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.Default">
      <summary>The default</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.dwFlags">
      <summary>A combination of THUMBBUTTONFLAGS values that control specific states and behaviors of the button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.dwMask">
      <summary>
            A combination of THUMBBUTTONMASK values that specify which members of this structure contain valid data; other members are ignored, with the
            exception of iId, which is always required.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.hIcon">
      <summary>The handle of an icon to use as the button image.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.iBitmap">
      <summary>The zero-based index of the button image within the image list set through ITaskbarList3::ThumbBarSetImageList.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.iId">
      <summary>The application-defined identifier of the button, unique within the toolbar.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.szTip">
      <summary>A wide character array that contains the text of the button's tooltip, displayed when the mouse pointer hovers over the button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTON.THBN_CLICKED">
      <summary>The THBN clicked</summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS">
      <summary>Used by THUMBBUTTON to control specific states and behaviors of the button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_DISABLED">
      <summary>The button is disabled. It is present, but has a visual state that indicates that it will not respond to user action.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_DISMISSONCLICK">
      <summary>When the button is clicked, the taskbar button's flyout closes immediately.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_ENABLED">
      <summary>The button is active and available to the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_HIDDEN">
      <summary>The button is not shown to the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_NOBACKGROUND">
      <summary>Do not draw a button border, use only the image.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONFLAGS.THBF_NONINTERACTIVE">
      <summary>
            The button is enabled but not interactive; no pressed button state is drawn. This value is intended for instances where the button is used in a notification.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Shell32.THUMBBUTTONMASK">
      <summary>Used by the THUMBBUTTON structure to specify which members of that structure contain valid data.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_BITMAP">
      <summary>The iBitmap member contains valid information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_FLAGS">
      <summary>The dwFlags member contains valid information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_ICON">
      <summary>The hIcon member contains valid information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Shell32.THUMBBUTTONMASK.THB_TOOLTIP">
      <summary>The szTip member contains valid information.</summary>
    </member>
  </members>
</doc>