<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Vanara.PInvoke.Security</name>
  </assembly>
  <members>
    <member name="T:Vanara.PInvoke.AdvApi32">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.AbortSystemShutdown(System.String)">
      <summary>Stops a system shutdown started by using the InitiateSystemShutdown function.</summary>
      <param name="lpMachineName">
            String that specifies the network name of the computer where the shutdown is to be stopped. If NULL or an empty string, the function stops the
            shutdown on the local computer.
            </param>
      <returns>0 on failure, non-zero for success</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.AdjustTokenPrivileges(Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Boolean,Vanara.InteropServices.SafeCoTaskMemHandle,System.UInt32,Vanara.InteropServices.SafeCoTaskMemHandle,System.UInt32@)">
      <summary>
            The AdjustTokenPrivileges function enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token
            requires TOKEN_ADJUST_PRIVILEGES access.
            </summary>
      <param name="objectHandle">
            A handle to the access token that contains the privileges to be modified. The handle must have TOKEN_ADJUST_PRIVILEGES access to the token. If the
            PreviousState parameter is not NULL, the handle must also have TOKEN_QUERY access.
            </param>
      <param name="DisableAllPrivileges">
            Specifies whether the function disables all of the token's privileges. If this value is TRUE, the function disables all privileges and ignores the
            NewState parameter. If it is FALSE, the function modifies privileges based on the information pointed to by the NewState parameter.
            </param>
      <param name="NewState">
            A pointer to a TOKEN_PRIVILEGES structure that specifies an array of privileges and their attributes. If DisableAllPrivileges is TRUE, the function
            ignores this parameter. If the DisableAllPrivileges parameter is FALSE, the AdjustTokenPrivileges function enables, disables, or removes these
            privileges for the token. The following table describes the action taken by the AdjustTokenPrivileges function, based on the privilege attribute.
            </param>
      <param name="BufferLength">
            Specifies the size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be zero if the PreviousState parameter is NULL.
            </param>
      <param name="PreviousState">
            A pointer to a buffer that the function fills with a TOKEN_PRIVILEGES structure that contains the previous state of any privileges that the function
            modifies. That is, if a privilege has been modified by this function, the privilege and its previous state are contained in the TOKEN_PRIVILEGES
            structure referenced by PreviousState. If the PrivilegeCount member of TOKEN_PRIVILEGES is zero, then no privileges have been changed by this
            function. This parameter can be NULL.
            <para>
            If you specify a buffer that is too small to receive the complete list of modified privileges, the function fails and does not adjust any privileges.
            In this case, the function sets the variable pointed to by the ReturnLength parameter to the number of bytes required to hold the complete list of
            modified privileges.
            </para></param>
      <param name="ReturnLength">
            A pointer to a variable that receives the required size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be
            NULL if PreviousState is NULL.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero. To determine whether the function adjusted all of the specified privileges, call GetLastError,
            which returns either ERROR_SUCCESS, indicating that the function adjusted all specified privileges, or ERROR_NOT_ALL_ASSIGNED, indicating that the
            token does not have one or more of the privileges specified in the NewState parameter. The function may succeed with this error value even if no
            privileges were adjusted. The PreviousState parameter indicates the privileges that were adjusted.
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.AdjustTokenPrivileges(Vanara.PInvoke.AdvApi32.SafeTokenHandle,System.Boolean,Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES,System.UInt32,Vanara.InteropServices.SafeCoTaskMemHandle,System.UInt32@)">
      <summary>
            The AdjustTokenPrivileges function enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token
            requires TOKEN_ADJUST_PRIVILEGES access.
            </summary>
      <param name="objectHandle">
            A handle to the access token that contains the privileges to be modified. The handle must have TOKEN_ADJUST_PRIVILEGES access to the token. If the
            PreviousState parameter is not NULL, the handle must also have TOKEN_QUERY access.
            </param>
      <param name="DisableAllPrivileges">
            Specifies whether the function disables all of the token's privileges. If this value is TRUE, the function disables all privileges and ignores the
            NewState parameter. If it is FALSE, the function modifies privileges based on the information pointed to by the NewState parameter.
            </param>
      <param name="NewState">
            A pointer to a TOKEN_PRIVILEGES structure that specifies an array of privileges and their attributes. If DisableAllPrivileges is TRUE, the function
            ignores this parameter. If the DisableAllPrivileges parameter is FALSE, the AdjustTokenPrivileges function enables, disables, or removes these
            privileges for the token. The following table describes the action taken by the AdjustTokenPrivileges function, based on the privilege attribute.
            </param>
      <param name="BufferLength">
            Specifies the size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be zero if the PreviousState parameter is NULL.
            </param>
      <param name="PreviousState">
            A pointer to a buffer that the function fills with a TOKEN_PRIVILEGES structure that contains the previous state of any privileges that the function
            modifies. That is, if a privilege has been modified by this function, the privilege and its previous state are contained in the TOKEN_PRIVILEGES
            structure referenced by PreviousState. If the PrivilegeCount member of TOKEN_PRIVILEGES is zero, then no privileges have been changed by this
            function. This parameter can be NULL.
            <para>
            If you specify a buffer that is too small to receive the complete list of modified privileges, the function fails and does not adjust any privileges.
            In this case, the function sets the variable pointed to by the ReturnLength parameter to the number of bytes required to hold the complete list of
            modified privileges.
            </para></param>
      <param name="ReturnLength">
            A pointer to a variable that receives the required size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be
            NULL if PreviousState is NULL.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero. To determine whether the function adjusted all of the specified privileges, call GetLastError,
            which returns either ERROR_SUCCESS, indicating that the function adjusted all specified privileges, or ERROR_NOT_ALL_ASSIGNED, indicating that the
            token does not have one or more of the privileges specified in the NewState parameter. The function may succeed with this error value even if no
            privileges were adjusted. The PreviousState parameter indicates the privileges that were adjusted.
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.AllocateAndInitializeSid(Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>The AllocateAndInitializeSid function allocates and initializes a security identifier (SID) with up to eight subauthorities.</summary>
      <param name="sia">
            A pointer to a SID_IDENTIFIER_AUTHORITY structure. This structure provides the top-level identifier authority value to set in the SID.
            </param>
      <param name="subAuthorityCount">
            Specifies the number of subauthorities to place in the SID. This parameter also identifies how many of the subauthority parameters have meaningful
            values. This parameter must contain a value from 1 to 8.
            <para>
            For example, a value of 3 indicates that the subauthority values specified by the dwSubAuthority0, dwSubAuthority1, and dwSubAuthority2 parameters
            have meaningful values and to ignore the remainder.
            </para></param>
      <param name="dwSubAuthority0">Subauthority value to place in the SID.</param>
      <param name="dwSubAuthority1">Subauthority value to place in the SID.</param>
      <param name="dwSubAuthority2">Subauthority value to place in the SID.</param>
      <param name="dwSubAuthority3">Subauthority value to place in the SID.</param>
      <param name="dwSubAuthority4">Subauthority value to place in the SID.</param>
      <param name="dwSubAuthority5">Subauthority value to place in the SID.</param>
      <param name="dwSubAuthority6">Subauthority value to place in the SID.</param>
      <param name="dwSubAuthority7">Subauthority value to place in the SID.</param>
      <param name="pSid">A pointer to a variable that receives the pointer to the allocated and initialized SID structure.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.AllocateLocallyUniqueId(Vanara.PInvoke.AdvApi32.LUID@)">
      <summary>The AllocateLocallyUniqueId function allocates a locally unique identifier (LUID).</summary>
      <param name="Luid">A pointer to a LUID structure that receives the allocated LUID.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.AllocateLocallyUniqueId(Vanara.PInvoke.AdvApi32.LUID@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ChangeServiceConfig(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceTypes,Vanara.PInvoke.AdvApi32.ServiceStartType,Vanara.PInvoke.AdvApi32.ServiceErrorControlType,System.String,System.String,System.IntPtr,System.Char[],System.String,System.String,System.String)">
      <summary>Changes the configuration parameters of a service.</summary>
      <param name="hService">
            A handle to the service. This handle is returned by the OpenService or CreateService function and must have the SERVICE_CHANGE_CONFIG access right.
            </param>
      <param name="nServiceType">
            The type of service. Specify SERVICE_NO_CHANGE if you are not changing the existing service type. If you specify either SERVICE_WIN32_OWN_PROCESS or
            SERVICE_WIN32_SHARE_PROCESS, and the service is running in the context of the LocalSystem account, you can also specify SERVICE_INTERACTIVE_PROCESS.
            </param>
      <param name="nStartType">The service start options. Specify SERVICE_NO_CHANGE if you are not changing the existing start type.</param>
      <param name="nErrorControl">
            The severity of the error, and action taken, if this service fails to start. Specify SERVICE_NO_CHANGE if you are not changing the existing error control.
            </param>
      <param name="lpBinaryPathName">
            The fully qualified path to the service binary file. Specify NULL if you are not changing the existing path. If the path contains a space, it must be
            quoted so that it is correctly interpreted. For example, "d:\\my share\\myservice.exe" should be specified as "\"d:\\my share\\myservice.exe\"".
            <para>
            The path can also include arguments for an auto-start service. For example, "d:\\myshare\\myservice.exe arg1 arg2". These arguments are passed to the
            service entry point (typically the main function).
            </para><para>
            If you specify a path on another computer, the share must be accessible by the computer account of the local computer because this is the security
            context used in the remote call. However, this requirement allows any potential vulnerabilities in the remote computer to affect the local computer.
            Therefore, it is best to use a local file.
            </para></param>
      <param name="lpLoadOrderGroup">
            The name of the load ordering group of which this service is a member. Specify NULL if you are not changing the existing group. Specify an empty
            string if the service does not belong to a group.
            <para>
            The startup program uses load ordering groups to load groups of services in a specified order with respect to the other groups. The list of load
            ordering groups is contained in the ServiceGroupOrder value of the following registry key:
            </para><para>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control</para></param>
      <param name="lpdwTagId">
            A pointer to a variable that receives a tag value that is unique in the group specified in the lpLoadOrderGroup parameter. Specify NULL if you are
            not changing the existing tag.
            <para>
            You can use a tag for ordering service startup within a load ordering group by specifying a tag order vector in the GroupOrderList value of the
            following registry key:
            </para><para>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control</para><para>Tags are only evaluated for driver services that have SERVICE_BOOT_START or SERVICE_SYSTEM_START start types.</para></param>
      <param name="lpDependencies">
            A pointer to a double null-terminated array of null-separated names of services or load ordering groups that the system must start before this
            service can be started. (Dependency on a group means that this service can run if at least one member of the group is running after an attempt to
            start all members of the group.) Specify NULL if you are not changing the existing dependencies. Specify an empty string if the service has no dependencies.
            <para>
            You must prefix group names with SC_GROUP_IDENTIFIER so that they can be distinguished from a service name, because services and service groups share
            the same name space.
            </para></param>
      <param name="lpServiceStartName">
            The name of the account under which the service should run. Specify NULL if you are not changing the existing account name. If the service type is
            SERVICE_WIN32_OWN_PROCESS, use an account name in the form DomainName\UserName. The service process will be logged on as this user. If the account
            belongs to the built-in domain, you can specify .\UserName (note that the corresponding C/C++ string is ".\\UserName"). For more information, see
            Service User Accounts and the warning in the Remarks section.
            <para>A shared process can run as any user.</para><para>
            If the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER, the name is the driver object name that the system uses to load the
            device driver. Specify NULL if the driver is to use a default object name created by the I/O system.
            </para><para>
            A service can be configured to use a managed account or a virtual account. If the service is configured to use a managed service account, the name is
            the managed service account name. If the service is configured to use a virtual account, specify the name as NT SERVICE\ServiceName. For more
            information about managed service accounts and virtual accounts, see the Service Accounts Step-by-Step Guide.
            </para><para>
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: Managed service accounts and virtual accounts are not supported until Windows
            7 and Windows Server 2008 R2.
            </para></param>
      <param name="lpPassword">
            The password to the account name specified by the lpServiceStartName parameter. Specify NULL if you are not changing the existing password. Specify
            an empty string if the account has no password or if the service runs in the LocalService, NetworkService, or LocalSystem account. For more
            information, see Service Record List.
            <para>
            If the account name specified by the lpServiceStartName parameter is the name of a managed service account or virtual account name, the lpPassword
            parameter must be NULL.
            </para><para>Passwords are ignored for driver services.</para></param>
      <param name="lpDisplayName">
            The display name to be used by applications to identify the service for its users. Specify NULL if you are not changing the existing display name;
            otherwise, this string has a maximum length of 256 characters. The name is case-preserved in the service control manager. Display name comparisons
            are always case-insensitive.
            <para>This parameter can specify a localized string using the following format:</para><para>@[path\]dllname,-strID</para><para>The string with identifier strID is loaded from dllname; the path is optional. For more information, see RegLoadMUIString.</para><para>Windows Server 2003 and Windows XP: Localized strings are not supported until Windows Vista.</para></param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ChangeServiceConfig2(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceConfigOption,System.IntPtr)">
      <summary>Changes the optional configuration parameters of a service.</summary>
      <param name="hService">
            A handle to the service. This handle is returned by the OpenService or CreateService function and must have the SERVICE_CHANGE_CONFIG access right.
            </param>
      <param name="dwInfoLevel">The configuration information to be changed.</param>
      <param name="lpInfo">A pointer to the new value to be set for the configuration information. The format of this data depends on the value of the dwInfoLevel parameter. If this value is NULL, the information remains unchanged.</param>
      <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ConvertSecurityDescriptorToStringSecurityDescriptor(System.IntPtr,Vanara.PInvoke.AdvApi32.SDDL_REVISION,Vanara.PInvoke.SECURITY_INFORMATION,Vanara.InteropServices.SafeHGlobalHandle@,System.UInt32@)">
      <summary>
            The ConvertSecurityDescriptorToStringSecurityDescriptor function converts a security descriptor to a string format. You can use the string format to
            store or transmit the security descriptor.
            <para>
            To convert the string-format security descriptor back to a valid, functional security descriptor, call the
            ConvertStringSecurityDescriptorToSecurityDescriptor function.
            </para></summary>
      <param name="SecurityDescriptor">A pointer to the security descriptor to convert. The security descriptor can be in absolute or self-relative format.</param>
      <param name="RequestedStringSDRevision">
            Specifies the revision level of the output StringSecurityDescriptor string. Currently this value must be SDDL_REVISION_1.
            </param>
      <param name="SecurityInformation">
            Specifies a combination of the SECURITY_INFORMATION bit flags to indicate the components of the security descriptor to include in the output string.
            The BACKUP_SECURITY_INFORMATION flag is not applicable to this function. If the BACKUP_SECURITY_INFORMATION flag is passed in, the
            SecurityInformation parameter returns TRUE with null string output.
            </param>
      <param name="StringSecurityDescriptor">
            A pointer to a variable that receives a pointer to a null-terminated security descriptor string. For a description of the string format, see Security
            Descriptor String Format. To free the returned buffer, call the LocalFree function.
            </param>
      <param name="StringSecurityDescriptorLen">
            A pointer to a variable that receives the size, in TCHARs, of the security descriptor string returned in the StringSecurityDescriptor buffer. This
            parameter can be NULL if you do not need to retrieve the size.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ConvertSidToStringSid(Vanara.PInvoke.AdvApi32.PSID)">
      <summary>Converts a security identifier (SID) to a string format suitable for display, storage, or transmission.</summary>
      <param name="Sid">The SID structure to be converted.</param>
      <returns>A null-terminated SID string.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ConvertSidToStringSid(Vanara.PInvoke.AdvApi32.PSID,Vanara.InteropServices.SafeHGlobalHandle@)">
      <summary>The ConvertSidToStringSid function converts a security identifier (SID) to a string format suitable for display, storage, or transmission.</summary>
      <param name="Sid">A pointer to the SID structure to be converted.</param>
      <param name="StringSid">
            A pointer to a variable that receives a pointer to a null-terminated SID string. To free the returned buffer, call the LocalFree function.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ConvertStringSecurityDescriptorToSecurityDescriptor(System.String,Vanara.PInvoke.AdvApi32.SDDL_REVISION,Vanara.InteropServices.SafeHGlobalHandle@,System.UInt32@)">
      <summary>The ConvertStringSecurityDescriptorToSecurityDescriptor function converts a string-format security descriptor into a valid, functional security descriptor. This function retrieves a security descriptor that the ConvertSecurityDescriptorToStringSecurityDescriptor function converted to string format.</summary>
      <param name="StringSecurityDescriptor">A pointer to a null-terminated string containing the string-format security descriptor to convert.</param>
      <param name="StringSDRevision">Specifies the revision level of the StringSecurityDescriptor string. Currently this value must be SDDL_REVISION_1.</param>
      <param name="SecurityDescriptor">A pointer to a variable that receives a pointer to the converted security descriptor. The returned security descriptor is self-relative. To free the returned buffer, call the LocalFree function. To convert the security descriptor to an absolute security descriptor, use the MakeAbsoluteSD function.</param>
      <param name="SecurityDescriptorSize">A pointer to a variable that receives the size, in bytes, of the converted security descriptor. This parameter can be NULL.</param>
      <returns>If the function succeeds, the return value is <c>true</c>. If the function fails, the return value is <c>false</c>. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ConvertStringSidToSid(System.String,System.IntPtr@)">
      <summary>
            The ConvertStringSidToSid function converts a string-format security identifier (SID) into a valid, functional SID. You can use this function to
            retrieve a SID that the ConvertSidToStringSid function converted to string format.
            </summary>
      <param name="pStringSid">
            A pointer to a null-terminated string containing the string-format SID to convert. The SID string can use either the standard S-R-I-S-S… format for
            SID strings, or the SID string constant format, such as "BA" for built-in administrators. For more information about SID string notation, see SID Components.
            </param>
      <param name="sid">A pointer to a variable that receives a pointer to the converted SID. To free the returned buffer, call the LocalFree function.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ConvertStringSidToSid(System.String,Vanara.PInvoke.AdvApi32.PSID@)">
      <summary>
            The ConvertStringSidToSid function converts a string-format security identifier (SID) into a valid, functional SID. You can use this function to
            retrieve a SID that the ConvertSidToStringSid function converted to string format.
            </summary>
      <param name="pStringSid">
            A pointer to a null-terminated string containing the string-format SID to convert. The SID string can use either the standard S-R-I-S-S… format for
            SID strings, or the SID string constant format, such as "BA" for built-in administrators. For more information about SID string notation, see SID Components.
            </param>
      <param name="sid">A pointer to a variable that receives a pointer to the converted SID. To free the returned buffer, call the LocalFree function.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.CopySid(System.Int32,System.IntPtr,System.IntPtr)">
      <summary>The CopySid function copies a security identifier (SID) to a buffer.</summary>
      <param name="cbDestSid">Specifies the length, in bytes, of the buffer receiving the copy of the SID.</param>
      <param name="destSid">A pointer to a buffer that receives a copy of the source SID structure.</param>
      <param name="sourceSid">A pointer to a SID structure that the function copies to the buffer pointed to by the pDestinationSid parameter.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.CredFree(System.IntPtr)">
      <summary>The CredFree function frees a buffer returned by any of the credentials management functions.</summary>
      <param name="Buffer">Pointer to the buffer to be freed.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.CredGetTargetInfo(System.String,System.UInt32,Vanara.PInvoke.AdvApi32.SafeCredMemoryHandle@)">
      <summary>The CredGetTargetInfo function retrieves all known target name information for the named target computer. This executed locally and does not need any particular privilege. The information returned is expected to be passed to the CredReadDomainCredentials and CredWriteDomainCredentials functions. The information should not be used for any other purpose.
            <para>Authentication packages compute TargetInfo when attempting to authenticate to a TargetName. The authentication packages cache this target information to make it available to CredGetTargetInfo. Therefore, the target information will only be available from a recent attempt to authenticate a TargetName.</para><para>Authentication packages not in the LSA process can cache a TargetInfo for later retrieval by CredGetTargetInfo by calling CredReadDomainCredentials with the CRED_CACHE_TARGET_INFORMATION flag.</para></summary>
      <param name="TargetName">Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.</param>
      <param name="Flags">Flags controlling the operation of the function. The following flag can be used:
            <para><c>CRED_ALLOW_NAME_RESOLUTION = 0x1</c></para><para>If no target information can be found for TargetName name resolution is done on TargetName to convert it to other forms. If target information exists for any of those other forms, it is returned. Currently only DNS name resolution is done.</para><para>This is useful if the application does not call an authentication package directly. The application can pass the TargetName to another layer of software to authenticate to the server, and that layer of software might resolve the name and pass the resolved name to the authentication package. As such, there will be no target information for the original TargetName.</para></param>
      <param name="TargetInfo">Pointer to a single allocated block buffer to contain the target information. At least one of the returned members of TargetInfo will be non-NULL. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling CredFree.</param>
      <returns>The function returns TRUE on success and FALSE on failure. The GetLastError function can be called to get a more specific status code. The following status code can be returned:
            <list type="bullet"><item><term>ERROR_NOT_FOUND</term><description>Target information for the named server is not available.</description></item></list></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.CredReadDomainCredentials(Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION@,System.UInt32,System.UInt32@,Vanara.PInvoke.AdvApi32.SafeCredMemoryHandle@)">
      <summary>The CredReadDomainCredentials function reads the domain credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</summary>
      <param name="TargetInfo">Target information that identifies the target server. At least one of the naming members must not be NULL: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.</param>
      <param name="Flags">Flags controlling the operation of the function.
            <para>The following flag is defined:</para><list type="bullet"><item><term>CRED_CACHE_TARGET_INFORMATION (0x1)</term><description>Cache the TargetInfo for a subsequent read using CredGetTargetInfo.</description></item></list></param>
      <param name="Count">Count of the credentials returned in the Credentials array.</param>
      <param name="Credentials">Pointer to an array of pointers to credentials. The most specific existing credential matching the TargetInfo is returned. If credentials of various types (for example, CRED_TYPE_DOMAIN_PASSWORD and CRED_TYPE_DOMAIN_CERTIFICATE credentials) exist, one of each type is returned. If a connection were to be made to the named target, this most-specific credential would be used.
            <para>Only those credential types specified by the TargetInfo.CredTypes array are returned. The returned Credentials array is sorted in the same order as the TargetInfo.CredTypes array. That is, authentication packages specify a preferred credential type by specifying it earlier in the TargetInfo.CredTypes array.</para><para>If TargetInfo.CredTypeCount is zero, the Credentials array is returned in the following sorted order:</para><list type="bullet"><item><term>CRED_TYPE_DOMAIN_CERTIFICATE</term></item><item><term>CRED_TYPE_DOMAIN_PASSWORD</term></item></list><para>The returned buffer is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling CredFree.</para></param>
      <returns>The function returns TRUE on success and FALSE on failure. The GetLastError function can be called to get a more specific status code. The following status codes can be returned:
            <list type="bullet"><item><term>ERROR_INVALID_PARAMETER</term><description>None of the naming parameters were specified.</description></item><item><term>ERROR_NOT_FOUND</term><description>There are no credentials matching the specified naming parameters.</description></item><item><term>ERROR_NO_SUCH_LOGON_SESSION</term><description>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</description></item><item><term>ERROR_INVALID_FLAGS</term><description>A flag that is not valid was specified for the Flags parameter.</description></item></list></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.CredWriteDomainCredentials(Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION@,Vanara.PInvoke.AdvApi32.CREDENTIAL@,System.UInt32)">
      <summary>The CredWriteDomainCredentials function writes domain credentials to the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</summary>
      <param name="TargetInfo">Identifies the target server. At least one of the naming members must be non-NULL and can be NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName, or DnsTreeName.</param>
      <param name="Credential">Credential to be written. The credential must be one that matches TargetInfo For instance, if the TargetName is a wildcard DNS name, then the TargetName member of the credential must be a postfix of the DnsServerName member from the TargetInfo.</param>
      <param name="Flags">Flags to control the operation of the API. The following flag is defined.
            <list type="bullet"><iterm><term>CRED_PRESERVE_CREDENTIAL_BLOB (0x1)</term><description>The credential BLOB should be preserved from the already existing credential with the same credential name and credential type. The CredentialBlobSize of the passed in Credential structure must be zero.</description></iterm></list></param>
      <returns>If the function succeeds, the function returns TRUE.
            <para>If the function fails, it returns FALSE. Call the GetLastError function to get a more specific status code. The following status codes can be returned.</para><para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.DuplicateToken(Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.AdvApi32.SECURITY_IMPERSONATION_LEVEL,Vanara.PInvoke.AdvApi32.SafeTokenHandle@)">
      <summary>The DuplicateToken function creates a new access token that duplicates one already in existence.</summary>
      <param name="existingObjectHandle">A handle to an access token opened with TOKEN_DUPLICATE access.</param>
      <param name="ImpersonationLevel">Specifies a SECURITY_IMPERSONATION_LEVEL enumerated type that supplies the impersonation level of the new token.</param>
      <param name="duplicateObjectHandle">
            A pointer to a variable that receives a handle to the duplicate token. This handle has TOKEN_IMPERSONATE and TOKEN_QUERY access to the new token.
            When you have finished using the new token, call the CloseHandle function to close the token handle.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.DuplicateTokenEx(Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.AdvApi32.TokenAccess,Vanara.PInvoke.SECURITY_ATTRIBUTES,Vanara.PInvoke.AdvApi32.SECURITY_IMPERSONATION_LEVEL,Vanara.PInvoke.AdvApi32.TOKEN_TYPE,Vanara.PInvoke.AdvApi32.SafeTokenHandle@)">
      <summary>
            The DuplicateTokenEx function creates a new access token that duplicates an existing token. This function can create either a primary token or an
            impersonation token.
            </summary>
      <param name="hExistingToken">A handle to an access token opened with TOKEN_DUPLICATE access.</param>
      <param name="dwDesiredAccess">
            Specifies the requested access rights for the new token. The DuplicateTokenEx function compares the requested access rights with the existing token's
            discretionary access control list (DACL) to determine which rights are granted or denied. To request the same access rights as the existing token,
            specify zero. To request all access rights that are valid for the caller, specify MAXIMUM_ALLOWED.
            </param>
      <param name="lpTokenAttributes">
            A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new token and determines whether child processes can
            inherit the token. If lpTokenAttributes is NULL, the token gets a default security descriptor and the handle cannot be inherited. If the security
            descriptor contains a system access control list (SACL), the token gets ACCESS_SYSTEM_SECURITY access right, even if it was not requested in dwDesiredAccess.
            <para>To set the owner in the security descriptor for the new token, the caller's process token must have the SE_RESTORE_NAME privilege set.</para></param>
      <param name="ImpersonationLevel">
            Specifies a value from the SECURITY_IMPERSONATION_LEVEL enumeration that indicates the impersonation level of the new token.
            </param>
      <param name="TokenType">Specifies one of the values from the TOKEN_TYPE enumeration.</param>
      <param name="phNewToken">
            A pointer to a HANDLE variable that receives the new token. When you have finished using the new token, call the CloseHandle function to close the
            token handle.
            </param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.EqualSid(System.IntPtr,System.IntPtr)">
      <summary>The EqualSid function tests two security identifier (SID) values for equality. Two SIDs must match exactly to be considered equal.</summary>
      <param name="sid1">A pointer to the first SID structure to compare. This structure is assumed to be valid.</param>
      <param name="sid2">A pointer to the second SID structure to compare. This structure is assumed to be valid.</param>
      <returns>
            If the SID structures are equal, the return value is nonzero.
            <para>If the SID structures are not equal, the return value is zero. To get extended error information, call GetLastError.</para><para>If either SID structure is not valid, the return value is undefined.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.EqualSid(Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.PSID)">
      <summary>The EqualSid function tests two security identifier (SID) values for equality. Two SIDs must match exactly to be considered equal.</summary>
      <param name="sid1">A pointer to the first SID structure to compare. This structure is assumed to be valid.</param>
      <param name="sid2">A pointer to the second SID structure to compare. This structure is assumed to be valid.</param>
      <returns>
            If the SID structures are equal, the return value is nonzero.
            <para>If the SID structures are not equal, the return value is zero. To get extended error information, call GetLastError.</para><para>If either SID structure is not valid, the return value is undefined.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.FreeInheritedFromArray(System.IntPtr,System.UInt16,System.IntPtr)">
      <summary>The FreeInheritedFromArray function frees memory allocated by the GetInheritanceSource function.</summary>
      <param name="pInheritArray">A pointer to the array of INHERITED_FROM structures returned by GetInheritanceSource.</param>
      <param name="AceCnt">Number of entries in pInheritArray.</param>
      <param name="pfnArray">Unused. Set to NULL.</param>
      <returns>If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, it returns a nonzero error code.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.FreeSid(System.IntPtr)">
      <summary>The FreeSid function frees a security identifier (SID) previously allocated by using the AllocateAndInitializeSid function.</summary>
      <param name="pSid">A pointer to the SID structure to free.</param>
      <returns>
            If the function succeeds, the function returns NULL. If the function fails, it returns a pointer to the SID structure represented by the pSid parameter.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetAce(System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>The GetAce function obtains a pointer to an access control entry (ACE) in an access control list (ACL).</summary>
      <param name="pAcl">A pointer to an ACL that contains the ACE to be retrieved.</param>
      <param name="dwAceIndex">
            The index of the ACE to be retrieved. A value of zero corresponds to the first ACE in the ACL, a value of one to the second ACE, and so on.
            </param>
      <param name="pAce">A pointer to a pointer that the function sets to the address of the ACE.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetAclInformation(System.IntPtr,Vanara.PInvoke.AdvApi32.ACL_REVISION_INFORMATION@,System.UInt32,Vanara.PInvoke.AdvApi32.ACL_INFORMATION_CLASS)">
      <summary>The GetAclInformation function retrieves information about an access control list (ACL).</summary>
      <param name="pAcl">
            A pointer to an ACL. The function retrieves information about this ACL. If a null value is passed, the function causes an access violation.
            </param>
      <param name="pAclInformation">
            A pointer to a buffer to receive the requested information. The structure that is placed into the buffer depends on the information class requested
            in the dwAclInformationClass parameter.
            </param>
      <param name="nAclInformationLength">The size, in bytes, of the buffer pointed to by the pAclInformation parameter.</param>
      <param name="dwAclInformationClass">
            A value of the ACL_INFORMATION_CLASS enumeration that indicates the class of information requested. This parameter can be one of two values from this enumeration:
            <list type="bullet"><listItem><para>
            If the value is AclRevisionInformation, the function fills the buffer pointed to by the pAclInformation parameter with an ACL_REVISION_INFORMATION structure.
            </para></listItem><listItem><para>
            If the value is AclSizeInformation, the function fills the buffer pointed to by the pAclInformation parameter with an ACL_SIZE_INFORMATION structure.
            </para></listItem></list></param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetAclInformation(System.IntPtr,Vanara.PInvoke.AdvApi32.ACL_SIZE_INFORMATION@,System.UInt32,Vanara.PInvoke.AdvApi32.ACL_INFORMATION_CLASS)">
      <summary>The GetAclInformation function retrieves information about an access control list (ACL).</summary>
      <param name="pAcl">
            A pointer to an ACL. The function retrieves information about this ACL. If a null value is passed, the function causes an access violation.
            </param>
      <param name="pAclInformation">
            A pointer to a buffer to receive the requested information. The structure that is placed into the buffer depends on the information class requested
            in the dwAclInformationClass parameter.
            </param>
      <param name="nAclInformationLength">The size, in bytes, of the buffer pointed to by the pAclInformation parameter.</param>
      <param name="dwAclInformationClass">
            A value of the ACL_INFORMATION_CLASS enumeration that indicates the class of information requested. This parameter can be one of two values from this enumeration:
            <list type="bullet"><listItem><para>
            If the value is AclRevisionInformation, the function fills the buffer pointed to by the pAclInformation parameter with an ACL_REVISION_INFORMATION structure.
            </para></listItem><listItem><para>
            If the value is AclSizeInformation, the function fills the buffer pointed to by the pAclInformation parameter with an ACL_SIZE_INFORMATION structure.
            </para></listItem></list></param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetEffectiveRightsFromAcl(System.IntPtr,Vanara.PInvoke.AdvApi32.TRUSTEE,System.UInt32@)">
      <summary>
            The GetEffectiveRightsFromAcl function retrieves the effective access rights that an ACL structure grants to a specified trustee. The trustee's
            effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member.
            </summary>
      <param name="pacl">A pointer to an ACL structure from which to get the trustee's effective access rights.</param>
      <param name="pTrustee">
            A pointer to a TRUSTEE structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a
            name or a security identifier (SID) to identify a trustee.
            </param>
      <param name="pAccessRights">A pointer to an ACCESS_MASK variable that receives the effective access rights of the trustee.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.GetEffectiveRightsFromAcl(System.IntPtr,Vanara.PInvoke.AdvApi32.TRUSTEE,System.UInt32@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetInheritanceSource(System.String,Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE,Vanara.PInvoke.SECURITY_INFORMATION,System.Boolean,System.Guid[],System.UInt32,System.IntPtr,System.IntPtr,Vanara.PInvoke.AdvApi32.GENERIC_MAPPING@,Vanara.PInvoke.AdvApi32.SafeInheritedFromArray)">
      <summary>
            The GetInheritanceSource function returns information about the source of inherited access control entries (ACEs) in an access control list (ACL).
            </summary>
      <param name="pObjectName">A pointer to the name of the object that uses the ACL to be checked.</param>
      <param name="ObjectType">
            The type of object indicated by pObjectName. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL.
            </param>
      <param name="SecurityInfo">The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION.</param>
      <param name="Container">TRUE if the object is a container object or FALSE if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT.</param>
      <param name="pObjectClassGuids">
            Optional list of GUIDs that identify the object types or names associated with pObjectName. This may be NULL if the object manager only supports one
            object class or has no GUID associated with the object class.
            </param>
      <param name="GuidCount">Number of GUIDs pointed to by pObjectClassGuids.</param>
      <param name="pAcl">The ACL for the object.</param>
      <param name="pfnArray">Reserved. Set this parameter to NULL.</param>
      <param name="pGenericMapping">The mapping of generic rights to specific rights for the object.</param>
      <param name="pInheritArray">
            A pointer to an array of INHERITED_FROM structures that the GetInheritanceSource function fills with the inheritance information. The caller must
            allocate enough memory for an entry for each ACE in the ACL.
            </param>
      <returns>If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetLengthSid(System.IntPtr)">
      <summary>The GetLengthSid function returns the length, in bytes, of a valid security identifier (SID).</summary>
      <param name="pSid">A pointer to the SID structure whose length is returned. The structure is assumed to be valid.</param>
      <returns>
            If the SID structure is valid, the return value is the length, in bytes, of the SID structure.
            <para>
            If the SID structure is not valid, the return value is undefined. Before calling GetLengthSid, pass the SID to the IsValidSid function to verify that
            the SID is valid.
            </para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetNamedSecurityInfo(System.String,Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE,Vanara.PInvoke.SECURITY_INFORMATION,System.IntPtr@,System.IntPtr@,System.IntPtr@,System.IntPtr@,Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor@)">
      <summary>The GetNamedSecurityInfo function retrieves a copy of the security descriptor for an object specified by name.</summary>
      <param name="pObjectName">
            A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the
            string formats for the different object types, see SE_OBJECT_TYPE.
            </param>
      <param name="ObjectType">Specifies a value from the SE_OBJECT_TYPE enumeration that indicates the type of object named by the pObjectName parameter.</param>
      <param name="SecurityInfo">
            A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the SECURITY_INFORMATION bit flags.
            </param>
      <param name="ppsidOwner">
            A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security
            descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if
            you do not need the owner SID.
            </param>
      <param name="ppsidGroup">
            A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has
            no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need
            the group SID.
            </param>
      <param name="ppDacl">
            A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The
            returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.
            </param>
      <param name="ppSacl">
            A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The
            returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.
            </param>
      <param name="ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned
            buffer by calling the LocalFree function.
            <para>This parameter is required if any one of the ppsidOwner, ppsidGroup, ppDacl, or ppSacl parameters is not NULL.</para></param>
      <returns>
            If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in WinError.h.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetPrivateObjectSecurity(System.IntPtr,Vanara.PInvoke.SECURITY_INFORMATION,System.IntPtr,System.UInt32,System.UInt32@)">
      <summary>The GetPrivateObjectSecurity function retrieves information from a private object's security descriptor.</summary>
      <param name="ObjectDescriptor">A pointer to a SECURITY_DESCRIPTOR structure. This is the security descriptor to be queried.</param>
      <param name="SecurityInformation">
            A set of bit flags that indicate the parts of the security descriptor to retrieve. This parameter can be a combination of the SECURITY_INFORMATION
            bit flags.
            </param>
      <param name="ResultantDescriptor">
            A pointer to a buffer that receives a copy of the requested information from the specified security descriptor. The SECURITY_DESCRIPTOR structure is
            returned in self-relative format.
            </param>
      <param name="DescriptorLength">Specifies the size, in bytes, of the buffer pointed to by the ResultantDescriptor parameter.</param>
      <param name="ReturnLength">
            A pointer to a variable the function sets to zero if the descriptor is copied successfully. If the buffer is too small for the security descriptor,
            this variable receives the number of bytes required. If this variable's value is greater than the value of the DescriptorLength parameter when the
            function returns, the function returns FALSE and none of the security descriptor is copied to the buffer.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetSecurityDescriptorDacl(System.IntPtr,System.Boolean@,System.IntPtr@,System.Boolean@)">
      <summary>The GetSecurityDescriptorDacl function retrieves a pointer to the discretionary access control list (DACL) in a specified security descriptor.</summary>
      <param name="pSecurityDescriptor">A pointer to the SECURITY_DESCRIPTOR structure that contains the DACL. The function retrieves a pointer to it.</param>
      <param name="lpbDaclPresent">
            A pointer to a value that indicates the presence of a DACL in the specified security descriptor. If lpbDaclPresent is TRUE, the security descriptor
            contains a DACL, and the remaining output parameters in this function receive valid values. If lpbDaclPresent is FALSE, the security descriptor does
            not contain a DACL, and the remaining output parameters do not receive valid values.
            <para>
            A value of TRUE for lpbDaclPresent does not mean that pDacl is not NULL. That is, lpbDaclPresent can be TRUE while pDacl is NULL, meaning that a NULL
            DACL is in effect. A NULL DACL implicitly allows all access to an object and is not the same as an empty DACL. An empty DACL permits no access to an
            object. For information about creating a proper DACL, see Creating a DACL.
            </para></param>
      <param name="pDacl">
            A pointer to a pointer to an access control list (ACL). If a DACL exists, the function sets the pointer pointed to by pDacl to the address of the
            security descriptor's DACL. If a DACL does not exist, no value is stored.
            <para>
            If the function stores a NULL value in the pointer pointed to by pDacl, the security descriptor has a NULL DACL. A NULL DACL implicitly allows all
            access to an object.
            </para><para>If an application expects a non-NULL DACL but encounters a NULL DACL, the application should fail securely and not allow access.</para></param>
      <param name="lpbDaclDefaulted">
            A pointer to a flag set to the value of the SE_DACL_DEFAULTED flag in the SECURITY_DESCRIPTOR_CONTROL structure if a DACL exists for the security
            descriptor. If this flag is TRUE, the DACL was retrieved by a default mechanism; if FALSE, the DACL was explicitly specified by a user.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetSecurityDescriptorOwner(System.IntPtr,System.IntPtr@,System.Boolean@)">
      <summary>The GetSecurityDescriptorOwner function retrieves the owner information from a security descriptor.</summary>
      <param name="pSecurityDescriptor">A pointer to a SECURITY_DESCRIPTOR structure whose owner information the function retrieves.</param>
      <param name="pOwner">A pointer to a pointer to a security identifier (SID) that identifies the owner when the function returns. If the security descriptor does not contain an owner, the function sets the pointer pointed to by pOwner to NULL and ignores the remaining output parameter, lpbOwnerDefaulted. If the security descriptor contains an owner, the function sets the pointer pointed to by pOwner to the address of the security descriptor's owner SID and provides a valid value for the variable pointed to by lpbOwnerDefaulted.</param>
      <param name="lpbOwnerDefaulted">A pointer to a flag that is set to the value of the SE_OWNER_DEFAULTED flag in the SECURITY_DESCRIPTOR_CONTROL structure when the function returns. If the value stored in the variable pointed to by the pOwner parameter is NULL, no value is set.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetSidSubAuthority(Vanara.PInvoke.AdvApi32.PSID,System.UInt32)">
      <summary>
            The GetSidSubAuthority function returns a pointer to a specified subauthority in a security identifier (SID). The subauthority value is a relative
            identifier (RID).
            </summary>
      <param name="pSid">A pointer to the SID structure from which a pointer to a subauthority is to be returned.</param>
      <param name="nSubAuthority">
            Specifies an index value identifying the subauthority array element whose address the function will return. The function performs no validation tests
            on this value. An application can call the GetSidSubAuthorityCount function to discover the range of acceptable values.
            </param>
      <returns>
            If the function succeeds, the return value is a pointer to the specified SID subauthority. To get extended error information, call GetLastError.
            <para>
            If the function fails, the return value is undefined. The function fails if the specified SID structure is not valid or if the index value specified
            by the nSubAuthority parameter is out of bounds.
            </para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GetTokenInformation(Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS,Vanara.InteropServices.SafeCoTaskMemHandle,System.Int32,System.Int32@)">
      <summary>
            The GetTokenInformation function retrieves a specified type of information about an access token. The calling process must have appropriate access
            rights to obtain the information.
            </summary>
      <param name="hObject">
            A handle to an access token from which information is retrieved. If TokenInformationClass specifies TokenSource, the handle must have
            TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values, the handle must have TOKEN_QUERY access.
            </param>
      <param name="tokenInfoClass">
            Specifies a value from the TOKEN_INFORMATION_CLASS enumerated type to identify the type of information the function retrieves. Any callers who check
            the TokenIsAppContainer and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the current
            token is not an application container but is an identity level token, you should return AccessDenied.
            </param>
      <param name="pTokenInfo">
            A pointer to a buffer the function fills with the requested information. The structure put into this buffer depends upon the type of information
            specified by the TokenInformationClass parameter.
            </param>
      <param name="tokenInfoLength">
            Specifies the size, in bytes, of the buffer pointed to by the TokenInformation parameter. If TokenInformation is NULL, this parameter must be zero.
            </param>
      <param name="returnLength">
            A pointer to a variable that receives the number of bytes needed for the buffer pointed to by the TokenInformation parameter. If this value is larger
            than the value specified in the TokenInformationLength parameter, the function fails and stores no data in the buffer.
            <para>
            If the value of the TokenInformationClass parameter is TokenDefaultDacl and the token has no default DACL, the function sets the variable pointed to
            by ReturnLength to sizeof(TOKEN_DEFAULT_DACL) and sets the DefaultDacl member of the TOKEN_DEFAULT_DACL structure to NULL.
            </para></param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.HKEY_CLASSES_ROOT">
      <summary>Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types. Shell and COM applications use the information stored under this key.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.HKEY_CURRENT_CONFIG">
      <summary>Contains information about the current hardware profile of the local computer system. The information under HKEY_CURRENT_CONFIG describes only the differences between the current hardware configuration and the standard configuration. Information about the standard hardware configuration is stored under the Software and System keys of HKEY_LOCAL_MACHINE.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.HKEY_CURRENT_USER">
      <summary>Registry entries subordinate to this key define the preferences of the current user. These preferences include the settings of environment variables, data about program groups, colors, printers, network connections, and application preferences. This key makes it easier to establish the current user's settings; the key maps to the current user's branch in HKEY_USERS. In HKEY_CURRENT_USER, software vendors store the current user-specific preferences to be used within their applications. Microsoft, for example, creates the HKEY_CURRENT_USER\Software\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.HKEY_DYN_DATA">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.HKEY_DYN_DATA</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.HKEY_LOCAL_MACHINE">
      <summary>Registry entries subordinate to this key define the physical state of the computer, including data about the bus type, system memory, and installed hardware and software. It contains subkeys that hold current configuration data, including Plug and Play information (the Enum branch, which includes a complete list of all hardware that has ever been on the system), network logon preferences, network security information, software-related information (such as server names and the location of the server), and other system information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.HKEY_PERFORMANCE_DATA">
      <summary>Registry entries subordinate to this key allow you to access performance data. The data is not actually stored in the registry; the registry functions cause the system to collect the data from its source.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.HKEY_USERS">
      <summary>Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.InitiateShutdown(System.String,System.String,System.UInt32,Vanara.PInvoke.AdvApi32.ShutdownFlags,Vanara.PInvoke.SystemShutDownReason)">
      <summary>Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.</summary>
      <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is NULL, the local computer is shut down.</param>
      <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
      <param name="dwGracePeriod">
            The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This
            value is limited to MAX_SHUTDOWN_TIMEOUT.
            <para>
            If the value of this parameter is greater than zero, and the dwShutdownFlags parameter specifies the flag SHUTDOWN_GRACE_OVERRIDE, the function fails
            and returns the error code ERROR_BAD_ARGUMENTS.
            </para></param>
      <param name="dwShutdownFlags">One or more bit flags that specify options for the shutdown.</param>
      <param name="dwReason">
            The reason for initiating the shutdown. This parameter must be one of the system shutdown reason codes. If this parameter is zero, the default is an
            undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the
            system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown.
            Therefore, do not use zero for this parameter.
            </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.InitiateShutdown(System.String,System.String,System.UInt32,Vanara.PInvoke.AdvApi32.ShutdownFlags,Vanara.PInvoke.SystemShutDownReason)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.InitiateSystemShutdownEx(System.String,System.String,System.UInt32,System.Boolean,System.Boolean,Vanara.PInvoke.SystemShutDownReason)">
      <summary>Initiates a shutdown and optional restart of the specified computer.</summary>
      <param name="lpMachineName">
            String that specifies the network name of the computer to shut down. If NULL or an empty string, the function shuts down the local computer.
            </param>
      <param name="lpMessage">String that specifies a message to display in the shutdown dialog box. This parameter can be NULL if no message is required.</param>
      <param name="dwTimeout">
            Time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, shutdown can be stopped by the
            AbortSystemShutdown function.
            <para>
            If dwTimeout is not zero, InitiateSystemShutdownEx displays a dialog box on the specified computer. The dialog box displays the name of the user who
            called the function, displays the message specified by the lpMessage parameter, and prompts the user to log off. The dialog box beeps when it is
            created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before shutdown.
            </para><para>If dwTimeout is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by AbortSystemShutdown.</para><para><c>Windows Server 2003 and Windows XP with SP1:</c> The time-out value is limited to MAX_SHUTDOWN_TIMEOUT seconds.</para><para><c>Windows Server 2003 and Windows XP with SP1:</c> If the computer to be shut down is a Terminal Services server, the system displays a dialog box
            to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message
            (see lpMessage), and how much time there is until the server is shut down.
            </para></param>
      <param name="bForceAppsClosed">
            If this parameter is TRUE, applications with unsaved changes are to be forcibly closed. If this parameter is FALSE, the system displays a dialog box
            instructing the user to close the applications.
            </param>
      <param name="bRebootAfterShutdown">
            If this parameter is TRUE, the computer is to restart immediately after shutting down. If this parameter is FALSE, the system flushes all caches to
            disk and clears the screen.
            </param>
      <param name="dwReason">Reason for initiating the shutdown. This parameter must be one of the system shutdown reason codes.</param>
      <returns>0 on failure, non-zero for success</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.IsValidSid(Vanara.PInvoke.AdvApi32.PSID)">
      <summary>
            The IsValidSid function validates a security identifier (SID) by verifying that the revision number is within a known range, and that the number of
            subauthorities is less than the maximum.
            </summary>
      <param name="pSid">A pointer to the SID structure to validate. This parameter cannot be NULL.</param>
      <returns>
            If the SID structure is valid, the return value is nonzero. If the SID structure is not valid, the return value is zero. There is no extended error
            information for this function; do not call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LogonUser(System.String,System.String,System.String,Vanara.PInvoke.AdvApi32.LogonUserType,Vanara.PInvoke.AdvApi32.LogonUserProvider,Vanara.PInvoke.AdvApi32.SafeTokenHandle@)">
      <summary>
            The LogonUser function attempts to log a user on to the local computer. The local computer is the computer from which LogonUser was called. You
            cannot use LogonUser to log on to a remote computer. You specify the user with a user name and domain and authenticate the user with a plain-text
            password. If the function succeeds, you receive a handle to a token that represents the logged-on user. You can then use this token handle to
            impersonate the specified user or, in most cases, to create a process that runs in the context of the specified user.
            </summary>
      <param name="lpszUserName">
            A pointer to a null-terminated string that specifies the name of the user. This is the name of the user account to log on to. If you use the user
            principal name (UPN) format, User@DNSDomainName, the lpszDomain parameter must be NULL.
            </param>
      <param name="lpszDomain">
            A pointer to a null-terminated string that specifies the name of the domain or server whose account database contains the lpszUsername account. If
            this parameter is NULL, the user name must be specified in UPN format. If this parameter is ".", the function validates the account by using only the
            local account database.
            </param>
      <param name="lpszPassword">
            A pointer to a null-terminated string that specifies the plain-text password for the user account specified by lpszUsername. When you have finished
            using the password, clear the password from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see
            Handling Passwords.
            </param>
      <param name="dwLogonType">The type of logon operation to perform.</param>
      <param name="dwLogonProvider">Specifies the logon provider.</param>
      <param name="phObject">
            A pointer to a handle variable that receives a handle to a token that represents the specified user.
            <para>You can use the returned handle in calls to the ImpersonateLoggedOnUser function.</para><para>
            In most cases, the returned handle is a primary token that you can use in calls to the CreateProcessAsUser function. However, if you specify the
            LOGON32_LOGON_NETWORK flag, LogonUser returns an impersonation token that you cannot use in CreateProcessAsUser unless you call DuplicateTokenEx to
            convert it to a primary token.
            </para><para>When you no longer need this handle, close it by calling the CloseHandle function.</para></param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LogonUserEx(System.String,System.String,System.String,Vanara.PInvoke.AdvApi32.LogonUserType,Vanara.PInvoke.AdvApi32.LogonUserProvider,Vanara.PInvoke.AdvApi32.SafeTokenHandle@,Vanara.PInvoke.AdvApi32.PSID@,Vanara.PInvoke.AdvApi32.SafeLsaReturnBufferHandle@,System.UInt32@,Vanara.PInvoke.AdvApi32.QUOTA_LIMITS@)">
      <summary>
            The LogonUserEx function attempts to log a user on to the local computer. The local computer is the computer from which LogonUserEx was called. You
            cannot use LogonUserEx to log on to a remote computer. You specify the user with a user name and domain and authenticate the user with a plaintext
            password. If the function succeeds, you receive a handle to a token that represents the logged-on user. You can then use this token handle to
            impersonate the specified user or, in most cases, to create a process that runs in the context of the specified user.
            </summary>
      <param name="lpszUserName">
            A pointer to a null-terminated string that specifies the name of the user. This is the name of the user account to log on to. If you use the user
            principal name (UPN) format, user@DNS_domain_name, the lpszDomain parameter must be NULL.
            </param>
      <param name="lpszDomain">
            A pointer to a null-terminated string that specifies the name of the domain or server whose account database contains the lpszUsername account. If
            this parameter is NULL, the user name must be specified in UPN format. If this parameter is ".", the function validates the account by using only the
            local account database.
            </param>
      <param name="lpszPassword">
            A pointer to a null-terminated string that specifies the plaintext password for the user account specified by lpszUsername. When you have finished
            using the password, clear the password from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see
            Handling Passwords.
            </param>
      <param name="dwLogonType">The type of logon operation to perform.</param>
      <param name="dwLogonProvider">The logon provider.</param>
      <param name="phObject">
            A pointer to a handle variable that receives a handle to a token that represents the specified user.
            <para>You can use the returned handle in calls to the ImpersonateLoggedOnUser function.</para><para>
            In most cases, the returned handle is a primary token that you can use in calls to the CreateProcessAsUser function. However, if you specify the
            LOGON32_LOGON_NETWORK flag, LogonUser returns an impersonation token that you cannot use in CreateProcessAsUser unless you call DuplicateTokenEx to
            convert it to a primary token.
            </para><para>When you no longer need this handle, close it by calling the CloseHandle function.</para></param>
      <param name="ppLogonSid">
            A pointer to a pointer to a security identifier (SID) that receives the SID of the user logged on.
            <para>When you have finished using the SID, free it by calling the LocalFree function.</para></param>
      <param name="ppProfileBuffer">A pointer to a pointer that receives the address of a buffer that contains the logged on user's profile.</param>
      <param name="pdwProfileLength">A pointer to a DWORD that receives the length of the profile buffer.</param>
      <param name="pQuotaLimits">A pointer to a QUOTA_LIMITS structure that receives information about the quotas for the logged on user.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LookupAccountName(System.String,System.String,Vanara.PInvoke.AdvApi32.PSID,System.Int32@,System.Text.StringBuilder,System.Int32@,Vanara.PInvoke.AdvApi32.SID_NAME_USE@)">
      <summary>
            The LookupAccountName function accepts the name of a system and an account as input. It retrieves a security identifier (SID) for the account and the
            name of the domain on which the account was found.
            </summary>
      <param name="lpSystemName">
            A pointer to a null-terminated character string that specifies the name of the system. This string can be the name of a remote computer. If this
            string is NULL, the account name translation begins on the local system. If the name cannot be resolved on the local system, this function will try
            to resolve the name using domain controllers trusted by the local system. Generally, specify a value for lpSystemName only when the account is in an
            untrusted domain and the name of a computer in that domain is known.
            </param>
      <param name="lpAccountName">
            A pointer to a null-terminated string that specifies the account name.
            <para>Use a fully qualified string in the domain_name\user_name format to ensure that LookupAccountName finds the account in the desired domain.</para></param>
      <param name="Sid">
            A pointer to a buffer that receives the SID structure that corresponds to the account name pointed to by the lpAccountName parameter. If this
            parameter is NULL, cbSid must be zero.
            </param>
      <param name="cbSid">
            A pointer to a variable. On input, this value specifies the size, in bytes, of the Sid buffer. If the function fails because the buffer is too small
            or if cbSid is zero, this variable receives the required buffer size.
            </param>
      <param name="ReferencedDomainName">
            A pointer to a buffer that receives the name of the domain where the account name is found. For computers that are not joined to a domain, this
            buffer receives the computer name. If this parameter is NULL, the function returns the required buffer size.
            </param>
      <param name="cchReferencedDomainName">
            A pointer to a variable. On input, this value specifies the size, in TCHARs, of the ReferencedDomainName buffer. If the function fails because the
            buffer is too small, this variable receives the required buffer size, including the terminating null character. If the ReferencedDomainName parameter
            is NULL, this parameter must be zero.
            </param>
      <param name="peUse">A pointer to a SID_NAME_USE enumerated type that indicates the type of the account when the function returns.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LookupAccountName(System.String,System.String,Vanara.PInvoke.AdvApi32.PSID@,System.String@,Vanara.PInvoke.AdvApi32.SID_NAME_USE@)">
      <summary>
            The LookupAccountName function accepts the name of a system and an account as input. It retrieves a security identifier (SID) for the account and the
            name of the domain on which the account was found.
            </summary>
      <param name="systemName">
            A string that specifies the name of the system. This string can be the name of a remote computer. If this string is NULL, the account name
            translation begins on the local system. If the name cannot be resolved on the local system, this function will try to resolve the name using domain
            controllers trusted by the local system. Generally, specify a value for lpSystemName only when the account is in an untrusted domain and the name of
            a computer in that domain is known.
            </param>
      <param name="accountName">
            A string that specifies the account name.
            <para>Use a fully qualified string in the domain_name\user_name format to ensure that LookupAccountName finds the account in the desired domain.</para></param>
      <param name="sid">A PSID class that corresponds to the account name pointed to by the lpAccountName parameter.</param>
      <param name="domainName">
            A string that receives the name of the domain where the account name is found. For computers that are not joined to a domain, this buffer receives
            the computer name.
            </param>
      <param name="snu">A SID_NAME_USE enumerated type that indicates the type of the account when the function returns.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LookupAccountSid(System.String,System.Byte[],System.Text.StringBuilder,System.Int32@,System.Text.StringBuilder,System.Int32@,Vanara.PInvoke.AdvApi32.SID_NAME_USE@)">
      <summary>
            The LookupAccountSid function accepts a security identifier (SID) as input. It retrieves the name of the account for this SID and the name of the
            first domain on which this SID is found.
            </summary>
      <param name="lpSystemName">
            A pointer to a null-terminated character string that specifies the target computer. This string can be the name of a remote computer. If this
            parameter is NULL, the account name translation begins on the local system. If the name cannot be resolved on the local system, this function will
            try to resolve the name using domain controllers trusted by the local system. Generally, specify a value for lpSystemName only when the account is in
            an untrusted domain and the name of a computer in that domain is known.
            </param>
      <param name="lpSid">A pointer to the SID to look up.</param>
      <param name="lpName">
            A pointer to a buffer that receives a null-terminated string that contains the account name that corresponds to the lpSid parameter.
            </param>
      <param name="cchName">
            On input, specifies the size, in TCHARs, of the lpName buffer. If the function fails because the buffer is too small or if cchName is zero, cchName
            receives the required buffer size, including the terminating null character.
            </param>
      <param name="lpReferencedDomainName">
            A pointer to a buffer that receives a null-terminated string that contains the name of the domain where the account name was found.
            <para>
            On a server, the domain name returned for most accounts in the security database of the local computer is the name of the domain for which the server
            is a domain controller.
            </para><para>
            On a workstation, the domain name returned for most accounts in the security database of the local computer is the name of the computer as of the
            last start of the system (backslashes are excluded). If the name of the computer changes, the old name continues to be returned as the domain name
            until the system is restarted.
            </para><para>Some accounts are predefined by the system. The domain name returned for these accounts is BUILTIN.</para></param>
      <param name="cchReferencedDomainName">
            On input, specifies the size, in TCHARs, of the lpReferencedDomainName buffer. If the function fails because the buffer is too small or if
            cchReferencedDomainName is zero, cchReferencedDomainName receives the required buffer size, including the terminating null character.
            </param>
      <param name="peUse">A pointer to a variable that receives a SID_NAME_USE value that indicates the type of the account.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LookupAccountSid(System.String,Vanara.PInvoke.AdvApi32.PSID,System.Text.StringBuilder,System.Int32@,System.Text.StringBuilder,System.Int32@,Vanara.PInvoke.AdvApi32.SID_NAME_USE@)">
      <summary>
            The LookupAccountSid function accepts a security identifier (SID) as input. It retrieves the name of the account for this SID and the name of the
            first domain on which this SID is found.
            </summary>
      <param name="lpSystemName">
            A pointer to a null-terminated character string that specifies the target computer. This string can be the name of a remote computer. If this
            parameter is NULL, the account name translation begins on the local system. If the name cannot be resolved on the local system, this function will
            try to resolve the name using domain controllers trusted by the local system. Generally, specify a value for lpSystemName only when the account is in
            an untrusted domain and the name of a computer in that domain is known.
            </param>
      <param name="lpSid">A pointer to the SID to look up.</param>
      <param name="lpName">
            A pointer to a buffer that receives a null-terminated string that contains the account name that corresponds to the lpSid parameter.
            </param>
      <param name="cchName">
            On input, specifies the size, in TCHARs, of the lpName buffer. If the function fails because the buffer is too small or if cchName is zero, cchName
            receives the required buffer size, including the terminating null character.
            </param>
      <param name="lpReferencedDomainName">
            A pointer to a buffer that receives a null-terminated string that contains the name of the domain where the account name was found.
            <para>
            On a server, the domain name returned for most accounts in the security database of the local computer is the name of the domain for which the server
            is a domain controller.
            </para><para>
            On a workstation, the domain name returned for most accounts in the security database of the local computer is the name of the computer as of the
            last start of the system (backslashes are excluded). If the name of the computer changes, the old name continues to be returned as the domain name
            until the system is restarted.
            </para><para>Some accounts are predefined by the system. The domain name returned for these accounts is BUILTIN.</para></param>
      <param name="cchReferencedDomainName">
            On input, specifies the size, in TCHARs, of the lpReferencedDomainName buffer. If the function fails because the buffer is too small or if
            cchReferencedDomainName is zero, cchReferencedDomainName receives the required buffer size, including the terminating null character.
            </param>
      <param name="peUse">A pointer to a variable that receives a SID_NAME_USE value that indicates the type of the account.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LookupPrivilegeName(System.String,Vanara.PInvoke.AdvApi32.LUID@,System.Text.StringBuilder,System.Int32@)">
      <summary>
            The LookupPrivilegeName function retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique
            identifier (LUID).
            </summary>
      <param name="lpSystemName">
            A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified,
            the function attempts to find the privilege name on the local system.
            </param>
      <param name="lpLuid">A pointer to the LUID by which the privilege is known on the target system.</param>
      <param name="lpName">
            A pointer to a buffer that receives a null-terminated string that represents the privilege name. For example, this string could be "SeSecurityPrivilege".
            </param>
      <param name="cchName">
            A pointer to a variable that specifies the size, in a TCHAR value, of the lpName buffer. When the function returns, this parameter contains the
            length of the privilege name, not including the terminating null character. If the buffer pointed to by the lpName parameter is too small, this
            variable contains the required size.
            </param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero.To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LookupPrivilegeValue(System.String,System.String,Vanara.PInvoke.AdvApi32.LUID@)">
      <summary>
            The LookupPrivilegeValue function retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified
            privilege name.
            </summary>
      <param name="lpSystemName">
            A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified,
            the function attempts to find the privilege name on the local system.
            </param>
      <param name="lpName">
            A pointer to a null-terminated string that specifies the name of the privilege, as defined in the Winnt.h header file. For example, this parameter
            could specify the constant, SE_SECURITY_NAME, or its corresponding string, "SeSecurityPrivilege".
            </param>
      <param name="lpLuid">
            A pointer to a variable that receives the LUID by which the privilege is known on the system specified by the lpSystemName parameter.
            </param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaAddAccountRights(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,System.String[],System.Int32)">
      <summary>
            The LsaAddAccountRights function assigns one or more privileges to an account. If the account does not exist, LsaAddAccountRights creates it.
            </summary>
      <param name="PolicyHandle">
            A handle to a Policy object. The handle must have the POLICY_LOOKUP_NAMES access right. If the account identified by the AccountSid parameter does
            not exist, the handle must have the POLICY_CREATE_ACCOUNT access right. For more information, see Opening a Policy Object Handle.
            </param>
      <param name="pSID">Pointer to the SID of the account to which the function assigns privileges.</param>
      <param name="UserRights">
            Pointer to an array of strings. Each string contains the name of a privilege to add to the account. For a list of privilege names, see Privilege Constants.
            </param>
      <param name="CountOfRights">Specifies the number of elements in the UserRights array.</param>
      <returns>
            If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code, which can be the following
            value or one of the LSA Policy Function Return Values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaCreateAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)">
      <summary>Undocumented function for creating an account.</summary>
      <param name="PolicyHandle">A handle to a Policy object. For more information, see Opening a Policy Object Handle.</param>
      <param name="AccountSid">Pointer to the SID of the account for which to enumerate privileges.</param>
      <param name="DesiredAccess">The desired access.</param>
      <param name="AccountHandle">The account handle.</param>
      <returns>
            If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code.For more information, see
            LSA Policy Function Return Values. You can use the LsaNtStatusToWinError function to convert the NTSTATUS code to a Windows error code.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaEnumerateAccountRights(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID)">
      <summary>The LsaEnumerateAccountRights function enumerates the privileges assigned to an account.</summary>
      <param name="PolicyHandle">
            A handle to a Policy object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see Opening a Policy Object Handle.
            </param>
      <param name="AccountSid">Pointer to the SID of the account for which to enumerate privileges.</param>
      <returns>An enumeration of strings containing the names of privileges held by the account. For a list of privilege names, see Privilege Constants.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaEnumerateAccountRights(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle@,System.UInt32@)">
      <summary>The LsaEnumerateAccountRights function enumerates the privileges assigned to an account.</summary>
      <param name="PolicyHandle">
            A handle to a Policy object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see Opening a Policy Object Handle.
            </param>
      <param name="AccountSid">Pointer to the SID of the account for which to enumerate privileges.</param>
      <param name="UserRights">
            Receives a pointer to an array of LSA_UNICODE_STRING structures. Each structure contains the name of a privilege held by the account. For a list of
            privilege names, see Privilege Constants.
            </param>
      <param name="CountOfRights">Pointer to a variable that receives the number of privileges in the UserRights array.</param>
      <returns>
            If at least one account right is found, the function succeeds and returns STATUS_SUCCESS.
            <para>
            If no account rights are found or if the function fails for any other reason, the function returns an NTSTATUS code such as FILE_NOT_FOUND. For more
            information, see LSA Policy Function Return Values. Use the LsaNtStatusToWinError function to convert the NTSTATUS code to a Windows error code.
            </para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaEnumerateAccountsWithUserRight(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.String)">
      <summary>
            The LsaEnumerateAccountsWithUserRight function returns the accounts in the database of a Local Security Authority (LSA) Policy object that hold a
            specified privilege. The accounts returned by this function hold the specified privilege directly through the user account, not as part of membership
            to a group.
            </summary>
      <param name="PolicyHandle">
            A handle to a Policy object. The handle must have POLICY_LOOKUP_NAMES and POLICY_VIEW_LOCAL_INFORMATION user rights. For more information, see
            Opening a Policy Object Handle.
            </param>
      <param name="UserRights">
            A string that specifies the name of a privilege. For a list of privileges, see Privilege Constants and Account Rights Constants.
            <para>If this parameter is NULL, the function enumerates all accounts in the LSA database of the system associated with the Policy object.</para></param>
      <returns>An enumeration of security identifiers (SID) of accounts that holds the specified privilege.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaEnumerateAccountsWithUserRight(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.String,Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle@,System.Int32@)">
      <summary>
            The LsaEnumerateAccountsWithUserRight function returns the accounts in the database of a Local Security Authority (LSA) Policy object that hold a
            specified privilege. The accounts returned by this function hold the specified privilege directly through the user account, not as part of membership
            to a group.
            </summary>
      <param name="PolicyHandle">
            A handle to a Policy object. The handle must have POLICY_LOOKUP_NAMES and POLICY_VIEW_LOCAL_INFORMATION user rights. For more information, see
            Opening a Policy Object Handle.
            </param>
      <param name="UserRights">
            A string that specifies the name of a privilege. For a list of privileges, see Privilege Constants and Account Rights Constants.
            <para>If this parameter is NULL, the function enumerates all accounts in the LSA database of the system associated with the Policy object.</para></param>
      <param name="EnumerationBuffer">
            Pointer to a variable that receives a pointer to an array of LSA_ENUMERATION_INFORMATION structures. The Sid member of each structure is a pointer to
            the security identifier (SID) of an account that holds the specified privilege.
            </param>
      <param name="CountReturned">Pointer to a variable that receives the number of entries returned in the EnumerationBuffer parameter.</param>
      <returns>
            If the function succeeds, the function returns STATUS_SUCCESS. If the function fails, it returns an NTSTATUS code, which can be one of the following
            values or one of the LSA Policy Function Return Values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaGetAppliedCAPIDs(System.String,Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle@,System.UInt32@)">
      <summary>
            The LsaGetAppliedCAPIDs function returns an array of central access policies (CAPs) identifiers (CAPIDs) of all the CAPs applied on a specific computer.
            </summary>
      <param name="systemName">
            The name of the specific computer. The name can have the form of "ComputerName" or "\\ComputerName". If this parameter is NULL, then the function
            returns the CAPIDs of the local computer.
            </param>
      <param name="CAPIDs">
            A pointer to a variable that receives an array of pointers to CAPIDs that identify the CAPs available on the specified computer. When you have
            finished using the CAPIDs, call the LsaFreeMemory function on each element in the array and the entire array.
            </param>
      <param name="CAPIDCount">
            A pointer to a variable that receives the number of CAPs that are available on the specified computer. The array returned in the CAPIDs parameter
            contains the same number of elements as the CAPIDCount parameter.
            </param>
      <returns>
            If the function succeeds, the return value is STATUS_SUCCESS.
            <para>
            If the function fails, the return value is one of the LSA Policy Function Return Values. You can use the LsaNtStatusToWinError function to convert
            the NTSTATUS code to a Windows error code.
            </para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaGetSystemAccessAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.Int32@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaGetSystemAccessAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.Int32@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="AccountHandle">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>AccountHandle</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaGetSystemAccessAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.Int32@)</parameter>
          </include>
        </markup>
      </param>
      <param name="SystemAccess">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>SystemAccess</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaGetSystemAccessAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.Int32@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaGetSystemAccessAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.Int32@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaLookupNames2(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.LsaLookupNamesFlags,System.UInt32,System.String[],Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle@,Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle@)">
      <summary>
            The LsaLookupNames2 function retrieves the security identifiers (SIDs) for specified account names. LsaLookupNames2 can look up the SID for any
            account in any domain in a Windows forest.
            </summary>
      <param name="PolicyHandle">
            A handle to a Policy object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see Opening a Policy Object Handle.
            </param>
      <param name="Flags">Values that control the behavior of this function.</param>
      <param name="Count">Specifies the number of names in the Names array. This is also the number of entries returned in the Sids array.</param>
      <param name="Names">
            An array of strings that contain the names to look up. These strings can be the names of user, group, or local group accounts, or the names of
            domains. Domain names can be DNS domain names or NetBIOS domain names.
            </param>
      <param name="ReferencedDomains">
            Receives a pointer to an LSA_REFERENCED_DOMAIN_LIST structure. The Domains member of this structure is an array that contains an entry for each
            domain in which a name was found. The DomainIndex member of each entry in the Sids array is the index of the Domains array entry for the domain in
            which the name was found.
            </param>
      <param name="Sids">
            Receives a pointer to an array of LSA_TRANSLATED_SID2 structures. Each entry in the Sids array contains the SID information for the corresponding
            entry in the Names array.
            </param>
      <returns>
            If the function succeeds, the function returns one of the following NTSTATUS values. If the function fails, the return value is the following
            NTSTATUS value or one of the LSA Policy Function Return Values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaLookupSids2(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.LsaLookupSidsFlags,System.UInt32,System.IntPtr[],Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle@,Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle@)">
      <summary>The LsaLookupSids2 function looks up the names that correspond to an array of security identifiers (SIDs) and supports Internet provider identities. If LsaLookupSids2 cannot find a name that corresponds to a SID, the function returns the SID in character form. You should use this function instead of the LsaLookupSids function.</summary>
      <param name="PolicyHandle">A handle to a Policy object. This handle must have the POLICY_LOOKUP_NAMES access right.</param>
      <param name="LookupOptions">Flags that modify the lookup behavior.</param>
      <param name="Count">Specifies the number of SIDs in the Sids array. This is also the number of entries returned in the Names array.</param>
      <param name="Sids">Pointer to an array of SID pointers to look up. The SIDs can be well-known SIDs, user, group, or local group account SIDs, or domain SIDs.</param>
      <param name="ReferencedDomains">Receives a pointer to a pointer to a LSA_REFERENCED_DOMAIN_LIST structure. The Domains member of this structure is an array that contains an entry for each domain in which a SID was found. The entry for each domain contains the SID and flat name of the domain. For Windows domains, the flat name is the NetBIOS name. For links with non–Windows domains, the flat name is the identifying name of that domain, or it is NULL.
            <para>When you no longer need the information, pass the returned pointer to LsaFreeMemory. This memory must be freed even when the function fails with the either of the error codes STATUS_NONE_MAPPED or STATUS_SOME_NOT_MAPPED</para></param>
      <param name="Names">Receives a pointer to an array of LSA_TRANSLATED_NAME structures. Each entry in the Names array contains the name information for the corresponding entry in the Sids array. For account SIDs, the Name member of each structure contains the isolated name of the account. For domain SIDs, the Name member is not valid.
            <para>The DomainIndex member of each entry in the Names array is the index of an entry in the Domains array returned in the ReferencedDomains parameter. The index identifies the Domains array for the domain in which the SID was found.</para><para>When you no longer need the information, pass the returned pointer to LsaFreeMemory. This memory must be freed even when the function fails with the either of the error codes STATUS_NONE_MAPPED or STATUS_SOME_NOT_MAPPED</para></param>
      <returns>
            If the function succeeds, the function returns one of the following NTSTATUS values. If the function fails, the return value is the following
            NTSTATUS value or one of the LSA Policy Function Return Values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaNtStatusToWinError(System.UInt32)">
      <summary>The LsaNtStatusToWinError function converts an NTSTATUS code returned by an LSA function to a Windows error code.</summary>
      <param name="NTSTATUS">An NTSTATUS code returned by an LSA function call. This value will be converted to a System error code.</param>
      <returns>
            The return value is the Windows error code that corresponds to the Status parameter. If there is no corresponding Windows error code, the return
            value is ERROR_MR_MID_NOT_FOUND.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaOpenAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaOpenAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="PolicyHandle">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>PolicyHandle</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaOpenAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)</parameter>
          </include>
        </markup>
      </param>
      <param name="AccountSid">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>AccountSid</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaOpenAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)</parameter>
          </include>
        </markup>
      </param>
      <param name="DesiredAccess">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>DesiredAccess</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaOpenAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)</parameter>
          </include>
        </markup>
      </param>
      <param name="AccountHandle">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>AccountHandle</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaOpenAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.LsaOpenAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.LsaAccountAccessMask,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaOpenPolicy(System.String,Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES@,Vanara.PInvoke.AdvApi32.LsaPolicyRights,Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle@)">
      <summary>
            The LsaOpenPolicy function opens a handle to the Policy object on a local or remote system. You must run the process "As Administrator" so that the
            call doesn't fail with ERROR_ACCESS_DENIED.
            </summary>
      <param name="SystemName">
            Name of the target system. The name can have the form "ComputerName" or "\\ComputerName". If this parameter is NULL, the function opens the Policy
            object on the local system.
            </param>
      <param name="ObjectAttributes">
            A pointer to an LSA_OBJECT_ATTRIBUTES structure that specifies the connection attributes. The structure members are not used; initialize them to NULL
            or zero.
            </param>
      <param name="DesiredAccess">
            An ACCESS_MASK that specifies the requested access rights. The function fails if the DACL of the target system does not allow the caller the
            requested access. To determine the access rights that you need, see the documentation for the LSA functions with which you want to use the policy handle.
            </param>
      <param name="PolicyHandle">A pointer to an LSA_HANDLE variable that receives a handle to the Policy object.</param>
      <returns>
            If the function succeeds, the function returns STATUS_SUCCESS. If the function fails, it returns an NTSTATUS code.For more information, see LSA
            Policy Function Return Values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaOpenPolicy(Vanara.PInvoke.AdvApi32.LsaPolicyRights,System.String)">
      <summary>
            The LsaOpenPolicy function opens a handle to the Policy object on a local or remote system. You must run the process "As Administrator" so that the
            call doesn't fail with ERROR_ACCESS_DENIED.
            </summary>
      <param name="DesiredAccess">
            An ACCESS_MASK that specifies the requested access rights. The function fails if the DACL of the target system does not allow the caller the
            requested access. To determine the access rights that you need, see the documentation for the LSA functions with which you want to use the policy handle.
            </param>
      <param name="SystemName">
            Name of the target system. The name can have the form "ComputerName" or "\\ComputerName". If this parameter is NULL, the function opens the Policy
            object on the local system.
            </param>
      <returns>A pointer to an LSA_HANDLE variable that receives a handle to the Policy object.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaRemoveAccountRights(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,Vanara.PInvoke.AdvApi32.PSID,System.Boolean,System.String[],System.Int32)">
      <summary>
            The LsaRemoveAccountRights function removes one or more privileges from an account. You can specify the privileges to be removed, or you can set a
            flag to remove all privileges. When you remove all privileges, the function deletes the account. If you specify privileges not held by the account,
            the function ignores them.
            </summary>
      <param name="PolicyHandle">
            A handle to a Policy object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see Opening a Policy Object Handle.
            </param>
      <param name="AccountSid">Pointer to the security identifier (SID) of the account from which the privileges are removed.</param>
      <param name="AllRights">
            If TRUE, the function removes all privileges and deletes the account. In this case, the function ignores the UserRights parameter. If FALSE, the
            function removes the privileges specified by the UserRights parameter.
            </param>
      <param name="UserRights">
            An array of strings. Each string contains the name of a privilege to be removed from the account. For a list of privilege names, see Privilege Constants.
            </param>
      <param name="CountOfRights">Specifies the number of elements in the UserRights array.</param>
      <returns>
            If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code, which can be one of the
            following values or one of the LSA Policy Function Return Values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LsaSetSystemAccessAccount(Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle,System.Int32)">
      <summary>Undocumented.</summary>
      <param name="AccountHandle">The account handle.</param>
      <param name="SystemAccess">The system access.</param>
      <returns>
            If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code, which can be one of the
            following values or one of the LSA Policy Function Return Values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.MapGenericMask(System.UInt32@,Vanara.PInvoke.AdvApi32.GENERIC_MAPPING@)">
      <summary>
            The MapGenericMask function maps the generic access rights in an access mask to specific and standard access rights. The function applies a mapping
            supplied in a <see cref="T:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING" /> structure.
            </summary>
      <param name="AccessMask">A pointer to an access mask.</param>
      <param name="GenericMapping">
            A pointer to a <see cref="T:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING" /> structure specifying a mapping of generic access types to specific and standard access types.
            </param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.MAX_SHUTDOWN_TIMEOUT">
      <summary>
            The maximum shutdown timeout that can be used as the dwGracePeriod in the <see cref="M:Vanara.PInvoke.AdvApi32.InitiateShutdown(System.String,System.String,System.UInt32,Vanara.PInvoke.AdvApi32.ShutdownFlags,Vanara.PInvoke.SystemShutDownReason)" /> function.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.OpenProcessToken(System.IntPtr,Vanara.PInvoke.AdvApi32.TokenAccess,Vanara.PInvoke.AdvApi32.SafeTokenHandle@)">
      <summary>The OpenProcessToken function opens the access token associated with a process.</summary>
      <param name="ProcessHandle">A handle to the process whose access token is opened. The process must have the PROCESS_QUERY_INFORMATION access permission.</param>
      <param name="DesiredAccess">
            Specifies an access mask that specifies the requested types of access to the access token. These requested access types are compared with the
            discretionary access control list (DACL) of the token to determine which accesses are granted or denied.
            </param>
      <param name="TokenHandle">A pointer to a handle that identifies the newly opened access token when the function returns.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.OpenThreadToken(System.IntPtr,Vanara.PInvoke.AdvApi32.TokenAccess,System.Boolean,Vanara.PInvoke.AdvApi32.SafeTokenHandle@)">
      <summary>The OpenThreadToken function opens the access token associated with a thread.</summary>
      <param name="ThreadHandle">A handle to the thread whose access token is opened.</param>
      <param name="DesiredAccess">
            Specifies an access mask that specifies the requested types of access to the access token. These requested access types are reconciled against the
            token's discretionary access control list (DACL) to determine which accesses are granted or denied.
            <para>For a list of access rights for access tokens, see Access Rights for Access-Token Objects.</para></param>
      <param name="OpenAsSelf">
            TRUE if the access check is to be made against the process-level security context.
            <para>FALSE if the access check is to be made against the current security context of the thread calling the OpenThreadToken function.</para><para>
            The OpenAsSelf parameter allows the caller of this function to open the access token of a specified thread when the caller is impersonating a token
            at SecurityIdentification level. Without this parameter, the calling thread cannot open the access token on the specified thread because it is
            impossible to open executive-level objects by using the SecurityIdentification impersonation level.
            </para></param>
      <param name="TokenHandle">A pointer to a variable that receives the handle to the newly opened access token.</param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PrivilegeCheck(Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.AdvApi32.PRIVILEGE_SET,System.Boolean@)">
      <summary>
            The PrivilegeCheck function determines whether a specified set of privileges are enabled in an access token. The PrivilegeCheck function is typically
            called by a server application to check the privileges of a client's access token.
            </summary>
      <param name="ClientToken">
            A handle to an access token representing a client process. This handle must have been obtained by opening the token of a thread impersonating the
            client. The token must be open for TOKEN_QUERY access.
            </param>
      <param name="RequiredPrivileges">
            A pointer to a PRIVILEGE_SET structure. The Privilege member of this structure is an array of LUID_AND_ATTRIBUTES structures. Before calling
            PrivilegeCheck, use the Privilege array to indicate the set of privileges to check. Set the Control member to PRIVILEGE_SET_ALL_NECESSARY if all of
            the privileges must be enabled; or set it to zero if it is sufficient that any one of the privileges be enabled.
            <para>
            When PrivilegeCheck returns, the Attributes member of each LUID_AND_ATTRIBUTES structure is set to SE_PRIVILEGE_USED_FOR_ACCESS if the corresponding
            privilege is enabled.
            </para></param>
      <param name="pfResult">
            A pointer to a value the function sets to indicate whether any or all of the specified privileges are enabled in the access token. If the Control
            member of the PRIVILEGE_SET structure specifies PRIVILEGE_SET_ALL_NECESSARY, this value is TRUE only if all the privileges are enabled; otherwise,
            this value is TRUE if any of the privileges are enabled.
            </param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.QueryServiceConfig(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@)">
      <summary>Retrieves the configuration parameters of the specified service. Optional configuration parameters are available using the QueryServiceConfig2 function.</summary>
      <param name="hService">A handle to the service. This handle is returned by the OpenService or CreateService function, and it must have the SERVICE_QUERY_CONFIG access right. For more information, see Service Security and Access Rights.</param>
      <param name="lpServiceConfig">A pointer to a buffer that receives the service configuration information. The format of the data is a QUERY_SERVICE_CONFIG structure.
            <para>The maximum size of this array is 8K bytes. To determine the required size, specify NULL for this parameter and 0 for the cbBufSize parameter. The function will fail and GetLastError will return ERROR_INSUFFICIENT_BUFFER. The pcbBytesNeeded parameter will receive the required size.</para></param>
      <param name="cbBufSize">The size of the buffer pointed to by the lpServiceConfig parameter, in bytes.</param>
      <param name="pcbBytesNeeded">A pointer to a variable that receives the number of bytes needed to store all the configuration information, if the function fails with ERROR_INSUFFICIENT_BUFFER.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.QueryServiceConfig2(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceConfigOption,System.IntPtr,System.UInt32,System.UInt32@)">
      <summary>Retrieves the optional configuration parameters of a service.</summary>
      <param name="hService">A handle to the service. This handle is returned by the OpenService or CreateService function and must have the SERVICE_CHANGE_CONFIG access right.</param>
      <param name="dwInfoLevel">The configuration information to be queried.</param>
      <param name="lpBuffer">A pointer to the buffer that receives the service configuration information. The format of this data depends on the value of the dwInfoLevel parameter.
            <para>The maximum size of this array is 8K bytes. To determine the required size, specify NULL for this parameter and 0 for the cbBufSize parameter. The function fails and GetLastError returns ERROR_INSUFFICIENT_BUFFER. The pcbBytesNeeded parameter receives the needed size.</para></param>
      <param name="cbBufSize">The size of the structure pointed to by the lpBuffer parameter, in bytes.</param>
      <param name="pcbBytesNeeded">A pointer to a variable that receives the number of bytes required to store the configuration information, if the function fails with ERROR_INSUFFICIENT_BUFFER.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.QueryServiceConfig2``1(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceConfigOption,``0@)">
      <summary>Retrieves the optional configuration parameters of a service.</summary>
      <param name="hService">A handle to the service. This handle is returned by the OpenService or CreateService function and must have the SERVICE_CHANGE_CONFIG access right.</param>
      <param name="dwInfoLevel">The configuration information to be queried.</param>
      <param name="configInfo">A variable that receives the service configuration information. The format of this data depends on the value of the dwInfoLevel parameter.</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.QueryServiceConfig2``1(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceConfigOption,``0@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
            If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.RegCloseKey(System.IntPtr)">
      <summary>Closes a handle to the specified registry key.</summary>
      <param name="hKey">
            A handle to the open key to be closed. The handle must have been opened by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx,
            RegOpenKeyTransacted, or RegConnectRegistry function.
            </param>
      <returns>
            If the function succeeds, the return value is ERROR_SUCCESS.
            <para>
            If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the FormatMessage function with the
            FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.
            </para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.RegNotifyChangeKeyValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.Boolean,Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter,System.IntPtr,System.Boolean)">
      <summary>Notifies the caller about changes to the attributes or contents of a specified registry key.</summary>
      <param name="hKey">A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function.</param>
      <param name="bWatchSubtree">
            If this parameter is TRUE, the function reports changes in the specified key and its subkeys. If the parameter is FALSE, the function reports changes
            only in the specified key.
            </param>
      <param name="dwFilter">A value that indicates the changes that should be reported.</param>
      <param name="hEvent">
            A handle to an event. If the fAsynchronous parameter is TRUE, the function returns immediately and changes are reported by signaling this event. If
            fAsynchronous is FALSE, hEvent is ignored.
            </param>
      <param name="fAsynchronous">
            If this parameter is TRUE, the function returns immediately and reports changes by signaling the specified event. If this parameter is FALSE, the
            function does not return until a change has occurred.
            <para>If hEvent does not specify a valid event, the fAsynchronous parameter cannot be TRUE.</para></param>
      <returns>
            If the function succeeds, the return value is ERROR_SUCCESS.
            <para>
            If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the FormatMessage function with the
            FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.
            </para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.String,Vanara.PInvoke.AdvApi32.RegOpenOptions,Vanara.PInvoke.AdvApi32.RegAccessTypes,Microsoft.Win32.SafeHandles.SafeRegistryHandle@)">
      <summary>Opens the specified registry key. Note that key names are not case sensitive.</summary>
      <param name="hKey">
            A handle to an open registry key. This handle is returned by the RegCreateKeyEx or RegOpenKeyEx function, or it can be one of the predefined keys.
            </param>
      <param name="lpSubKey">
            The name of the registry subkey to be opened.
            <para>Key names are not case sensitive.</para><para>
            The lpSubKey parameter can be a pointer to an empty string. If lpSubKey is a pointer to an empty string and hKey is HKEY_CLASSES_ROOT, phkResult
            receives the same hKey handle passed into the function. Otherwise, phkResult receives a new handle to the key specified by hKey.
            </para><para>
            The lpSubKey parameter can be NULL only if hKey is one of the predefined keys. If lpSubKey is NULL and hKey is HKEY_CLASSES_ROOT, phkResult receives
            a new handle to the key specified by hKey. Otherwise, phkResult receives the same hKey handle passed in to the function.
            </para></param>
      <param name="ulOptions">Specifies the option to apply when opening the key.</param>
      <param name="samDesired">
            A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the
            requested access for the calling process. For more information, see Registry Key Security and Access Rights.
            </param>
      <param name="phkResult">
            A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the RegCloseKey
            function after you have finished using the handle.
            </param>
      <returns>
            If the function succeeds, the return value is ERROR_SUCCESS.
            <para>
            If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the FormatMessage function with the
            FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.
            </para></returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.RevertToSelf">
      <summary>The RevertToSelf function terminates the impersonation of a client application.</summary>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SetNamedSecurityInfo(System.String,Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE,Vanara.PInvoke.SECURITY_INFORMATION,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.PSID,System.IntPtr,System.IntPtr)">
      <summary>
            The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the
            object by name.
            </summary>
      <param name="pObjectName">
            A pointer to a null-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or
            remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer. For
            descriptions of the string formats for the different object types, see SE_OBJECT_TYPE.
            </param>
      <param name="ObjectType">A value of the SE_OBJECT_TYPE enumeration that indicates the type of object named by the pObjectName parameter.</param>
      <param name="SecurityInfo">
            A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the SECURITY_INFORMATION bit flags.
            </param>
      <param name="ppsidOwner">
            A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege
            Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must
            include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the
            SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.
            </param>
      <param name="ppsidGroup">
            A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If
            you are not setting the primary group SID, this parameter can be NULL.
            </param>
      <param name="ppDacl">
            A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC
            access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.
            </param>
      <param name="ppSacl">
            A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION,
            LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.
            <para>
            If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not
            setting the SACL, this parameter can be NULL.
            </para></param>
      <returns>If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SetThreadToken(System.IntPtr,Vanara.PInvoke.AdvApi32.SafeTokenHandle)">
      <summary>
            The SetThreadToken function assigns an impersonation token to a thread. The function can also cause a thread to stop using an impersonation token.
            </summary>
      <param name="Thread">
            A pointer to a handle to the thread to which the function assigns the impersonation token. If Thread is NULL, the function assigns the impersonation
            token to the calling thread.
            </param>
      <param name="Token">
            A handle to the impersonation token to assign to the thread. This handle must have been opened with TOKEN_IMPERSONATE access rights. For more
            information, see Access Rights for Access-Token Objects. If Token is NULL, the function causes the thread to stop using an impersonation token.
            </param>
      <returns>
            If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ACCESS_ALLOWED_ACE">
      <summary>
            The ACCESS_ALLOWED_ACE structure defines an access control entry (ACE) for the discretionary access control list (DACL) that controls access to an
            object. An access-allowed ACE allows access to an object for a specific trustee identified by a security identifier (SID).
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ACCESS_ALLOWED_ACE.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.ACCESS_ALLOWED_ACE.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACCESS_ALLOWED_ACE.Header">
      <summary>
            ACE_HEADER structure that specifies the size and type of ACE. It also contains flags that control inheritance of the ACE by child objects. The
            AceType member of the ACE_HEADER structure should be set to ACCESS_ALLOWED_ACE_TYPE, and the AceSize member should be set to the total number of
            bytes allocated for the ACCESS_ALLOWED_ACE structure.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACCESS_ALLOWED_ACE.Mask">
      <summary>Specifies an ACCESS_MASK structure that specifies the access rights granted by this ACE.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACCESS_ALLOWED_ACE.SidStart">
      <summary>
            The first DWORD of a trustee's SID. The remaining bytes of the SID are stored in contiguous memory after the SidStart member. This SID can be
            appended with application data.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ACE_HEADER">
      <summary>The ACE_HEADER structure defines the type and size of an access control entry (ACE).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACE_HEADER.AceFlags">
      <summary>Specifies a set of ACE type-specific control flags.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACE_HEADER.AceSize">
      <summary>Specifies the size, in bytes, of the ACE.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACE_HEADER.AceType">
      <summary>Specifies the ACE type.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ACL">
      <summary>
            The ACL structure is the header of an access control list (ACL). A complete ACL consists of an ACL structure followed by an ordered list of zero or more access control entries (ACEs).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL.AceCount">
      <summary>Specifies the number of ACEs stored in the ACL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL.AclRevision">
      <summary>Specifies the revision level of the ACL. This value should be ACL_REVISION, unless the ACL contains an object-specific ACE, in which case this value must be ACL_REVISION_DS. All ACEs in an ACL must be at the same revision level.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL.AclSize">
      <summary>Specifies the size, in bytes, of the ACL. This value includes both the ACL structure and all the ACEs.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL.Sbz1">
      <summary>Specifies a zero byte of padding that aligns the AclRevision member on a 16-bit boundary.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL.Sbz2">
      <summary>Specifies two zero-bytes of padding that align the ACL structure on a 32-bit boundary.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ACL_INFORMATION_CLASS">
      <summary>Used by the <see cref="M:Vanara.PInvoke.AdvApi32.GetAclInformation(System.IntPtr,Vanara.PInvoke.AdvApi32.ACL_REVISION_INFORMATION@,System.UInt32,Vanara.PInvoke.AdvApi32.ACL_INFORMATION_CLASS)" /> function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL_INFORMATION_CLASS.AclRevisionInformation">
      <summary>Indicates ACL revision information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL_INFORMATION_CLASS.AclSizeInformation">
      <summary>Indicates ACL size information.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ACL_REVISION_INFORMATION">
      <summary>The ACL_REVISION_INFORMATION structure contains revision information about an ACL structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL_REVISION_INFORMATION.AclRevision">
      <summary>Specifies a revision number. The current revision number is ACL_REVISION.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ACL_SIZE_INFORMATION">
      <summary>The ACL_SIZE_INFORMATION structure contains information about the size of an ACL structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL_SIZE_INFORMATION.AceCount">
      <summary>The number of access control entries (ACEs) in the access control list (ACL).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL_SIZE_INFORMATION.AclBytesFree">
      <summary>The number of unused bytes in the ACL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ACL_SIZE_INFORMATION.AclBytesInUse">
      <summary>
            The number of bytes in the ACL actually used to store the ACEs and ACL structure. This may be less than the total number of bytes allocated to
            the ACL.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.CLAIM_SECURITY_ATTRIBUTE_INFORMATION_V1">
      <summary>The actual attribute.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CLAIM_SECURITY_ATTRIBUTE_INFORMATION_V1.pAttributeV1">
      <summary>Pointer to an array that contains the AttributeCount member of the CLAIM_SECURITY_ATTRIBUTE_V1 structure.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.CLAIM_SECURITY_ATTRIBUTES_INFORMATION">
      <summary>The CLAIM_SECURITY_ATTRIBUTES_INFORMATION structure defines the security attributes for the claim.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Attribute">
      <summary>The actual attribute.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CLAIM_SECURITY_ATTRIBUTES_INFORMATION.AttributeCount">
      <summary>The number of values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Reserved">
      <summary>This member is currently reserved and must be zero when setting an attribute and is ignored when getting an attribute.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CLAIM_SECURITY_ATTRIBUTES_INFORMATION.Version">
      <summary>The version of the security attribute. This must be 1.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.CREDENTIAL">
      <summary>The CREDENTIAL structure contains an individual credential.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.AttributeCount">
      <summary>The number of application-defined attributes to be associated with the credential. This member can be read and written. Its value cannot be greater than CRED_MAX_ATTRIBUTES (64).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.Attributes">
      <summary>Application-defined attributes that are associated with the credential. This member can be read and written.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.Comment">
      <summary>A string comment from the user that describes this credential. This member cannot be longer than CRED_MAX_STRING_LENGTH (256) characters.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.CredentialBlob">
      <summary>Secret data for the credential. The CredentialBlob member can be both read and written.
            <para>If the Type member is CRED_TYPE_DOMAIN_PASSWORD, this member contains the plaintext Unicode password for UserName. The CredentialBlob and CredentialBlobSize members do not include a trailing zero character. Also, for CRED_TYPE_DOMAIN_PASSWORD, this member can only be read by the authentication packages.</para><para>If the Type member is CRED_TYPE_DOMAIN_CERTIFICATE, this member contains the clear test Unicode PIN for UserName. The CredentialBlob and CredentialBlobSize members do not include a trailing zero character. Also, this member can only be read by the authentication packages.</para><para>If the Type member is CRED_TYPE_GENERIC, this member is defined by the application.</para><para>Credentials are expected to be portable. Applications should ensure that the data in CredentialBlob is portable. The application defines the byte-endian and alignment of the data in CredentialBlob.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.CredentialBlobSize">
      <summary>The size, in bytes, of the CredentialBlob member. This member cannot be larger than CRED_MAX_CREDENTIAL_BLOB_SIZE (512) bytes.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.Flags">
      <summary>The flags</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.LastWritten">
      <summary>The time, in Coordinated Universal Time (Greenwich Mean Time), of the last modification of the credential. For write operations, the value of this member is ignored.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.Persist">
      <summary>Defines the persistence of this credential. This member can be read and written.
            <list type="table"><listheader><term>Value</term><term>Meaning</term></listheader><item><term>CRED_PERSIST_SESSION (0x1)</term><description>The credential persists for the life of the logon session. It will not be visible to other logon sessions of this same user. It will not exist after this user logs off and back on.</description></item><item><term>CRED_PERSIST_LOCAL_MACHINE (0x2)</term><description>The credential persists for all subsequent logon sessions on this same computer. It is visible to other logon sessions of this same user on this same computer and not visible to logon sessions for this user on other computers.
            <para><c>Windows Vista Home Basic, Windows Vista Home Premium, Windows Vista Starter and Windows XP Home Edition:</c> This value is not supported.</para></description></item><item><term>CRED_PERSIST_ENTERPRISE (0x3)</term><description>The credential persists for all subsequent logon sessions on this same computer. It is visible to other logon sessions of this same user on this same computer and to logon sessions for this user on other computers.
            <para>This option can be implemented as locally persisted credential if the administrator or user configures the user account to not have roam-able state. For instance, if the user has no roaming profile, the credential will only persist locally.</para><para><c>Windows Vista Home Basic, Windows Vista Home Premium, Windows Vista Starter and Windows XP Home Edition:</c> This value is not supported.</para></description></item></list></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.TargetAlias">
      <summary>Alias for the TargetName member. This member can be read and written. It cannot be longer than CRED_MAX_STRING_LENGTH (256) characters.
            <para>If the credential Type is CRED_TYPE_GENERIC, this member can be non-NULL, but the credential manager ignores the member.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.TargetName">
      <summary>
            The name of the credential. The TargetName and Type members uniquely identify the credential. This member cannot be changed after the credential is created. Instead, the credential with the old name should be deleted and the credential with the new name created.
            <para>If Type is CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, this member identifies the server or servers that the credential is to be used for. The member is either a NetBIOS or DNS server name, a DNS host name suffix that contains a wildcard character, a NetBIOS or DNS domain name that contains a wildcard character sequence, or an asterisk.</para><para>If TargetName is a DNS host name, the TargetAlias member can be the NetBIOS name of the host.</para><para>If the TargetName is a DNS host name suffix that contains a wildcard character, the leftmost label of the DNS host name is an asterisk (*), which denotes that the target name is any server whose name ends in the specified name, for example, *.microsoft.com.</para><para>If the TargetName is a domain name that contains a wildcard character sequence, the syntax is the domain name followed by a backslash and asterisk (\*), which denotes that the target name is any server that is a member of the named domain (or realm).</para><para>If TargetName is a DNS domain name that contains a wildcard character sequence, the TargetAlias member can be a NetBIOS domain name that uses a wildcard sequence for the same domain.</para><para>If TargetName specifies a DFS share, for example, DfsRoot\DfsShare, then this credential matches the specific DFS share and any servers reached through that DFS share.</para><para>If TargetName is a single asterisk (*), this credential matches any server name.</para><para>If TargetName is CRED_SESSION_WILDCARD_NAME, this credential matches any server name. This credential matches before a single asterisk and is only valid if Persist is CRED_PERSIST_SESSION. The credential can be set by applications that want to temporarily override the default credential.</para><para>This member cannot be longer than CRED_MAX_DOMAIN_TARGET_NAME_LENGTH (337) characters.</para><para>If the Type is CRED_TYPE_GENERIC, this member should identify the service that uses the credential in addition to the actual target. Microsoft suggests the name be prefixed by the name of the company implementing the service. Microsoft will use the prefix "Microsoft". Services written by Microsoft should append their service name, for example Microsoft_RAS_TargetName. This member cannot be longer than CRED_MAX_GENERIC_TARGET_NAME_LENGTH (32767) characters.</para><para>This member is case-insensitive.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.Type">
      <summary>The type of the credential. This member cannot be changed after the credential is created.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL.UserName">
      <summary>The user name of the account used to connect to TargetName.
            <para>If the credential Type is CRED_TYPE_DOMAIN_PASSWORD, this member can be either a DomainName\UserName or a UPN.</para><para>If the credential Type is CRED_TYPE_DOMAIN_CERTIFICATE, this member must be a marshaled certificate reference created by calling CredMarshalCredential with a CertCredential.</para><para>If the credential Type is CRED_TYPE_GENERIC, this member can be non-NULL, but the credential manager ignores the member.</para><para>This member cannot be longer than CRED_MAX_USERNAME_LENGTH (513) characters.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION">
      <summary>The CREDENTIAL_TARGET_INFORMATION structure contains the target computer's name, domain, and tree.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.CredTypeCount">
      <summary>Number of elements in the CredTypes array.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.CredTypes">
      <summary>Array specifying the credential types acceptable by the authentication package used by the target server. Each element is one of the CRED_TYPE_* defines. The order of this array specifies the preference order of the authentication package. More preferable types are specified earlier in the list.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.DnsDomainName">
      <summary>DNS name of the target server's domain. If the name is not known, this member can be NULL. If the target server is a member of a workgroup, this member must be NULL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.DnsServerName">
      <summary>DNS name of the target server. If the name is not known, this member can be NULL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.DnsTreeName">
      <summary>DNS name of the target server's tree. If the tree name is not known, this member can be NULL. If the target server is a member of a workgroup, this member must be NULL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.Flags">
      <summary>Attributes of the target.
            <list type="bullet"><item><term>CRED_TI_SERVER_FORMAT_UNKNOWN (0x1)</term><description>Set if the authentication package cannot determine whether the server name is a DNS name or a NetBIOS name. In that case, the NetbiosServerName member is set to NULL and the DnsServerName member is set to the server name of unknown format.</description></item><item><term>CRED_TI_DOMAIN_FORMAT_UNKNOWN (0x2)</term><description>Set if the authentication package cannot determine whether the domain name is a DNS name or a NetBIOS name. In that case, the NetbiosDomainName member is set to NULL and the DnsDomainName member is set to the domain name of unknown format.</description></item><item><term>CRED_TI_ONLY_PASSWORD_REQUIRED (0x4)</term><description>Set if the authentication package has determined that the server only needs a password to authenticate. The caller can use this flag to prompt only for a password and not a user name.</description></item></list><para>Stored credentials require a UserName member. A value of &lt;DnsServerName&gt;\Guest or &lt;NetbiosServerName&gt;\Guest should be used for these servers.</para></summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.GetCredTypes">
      <summary>Extracts array of <see cref="T:Vanara.PInvoke.AdvApi32.CredentialType" /> values from <see cref="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.CredTypes" />.</summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.GetCredTypes</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.NetbiosDomainName">
      <summary>NetBIOS name of the target server's domain. If the name is not known, this member can be NULL. If the target server is a member of a workgroup, this member must be NULL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.NetbiosServerName">
      <summary>NetBIOS name of the target server. If the name is not known, this member can be NULL.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.PackageName">
      <summary>Name of the authentication package that determined the values NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName, and DnsTreeName as a function of TargetName. This member can be passed to AcquireCredentialsHandle as the package name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CREDENTIAL_TARGET_INFORMATION.TargetName">
      <summary>Name of the target server as specified by the caller accessing the target. It is typically the NetBIOS or DNS name of the target server.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.CredentialType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.CredentialType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CredentialType.CRED_TYPE_GENERIC">
      <summary>The credential is a generic credential. The credential will not be used by any particular authentication package. The credential will be stored securely but has no other significant characteristics.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CredentialType.CRED_TYPE_DOMAIN_PASSWORD">
      <summary>The credential is a password credential and is specific to Microsoft's authentication packages. The NTLM, Kerberos, and Negotiate authentication packages will automatically use this credential when connecting to the named target.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CredentialType.CRED_TYPE_DOMAIN_CERTIFICATE">
      <summary>The credential is a certificate credential and is specific to Microsoft's authentication packages. The Kerberos, Negotiate, and Schannel authentication packages automatically use this credential when connecting to the named target.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CredentialType.CRED_TYPE_DOMAIN_VISIBLE_PASSWORD">
      <summary>This value is no longer supported.
            <para><c>Windows Server 2003 and Windows XP:</c> The credential is a password credential and is specific to authentication packages from Microsoft. The Passport authentication package will automatically use this credential when connecting to the named target.</para><para>Additional values will be defined in the future. Applications should be written to allow for credential types they do not understand.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CredentialType.CRED_TYPE_GENERIC_CERTIFICATE">
      <summary>The credential is a certificate credential that is a generic authentication package.
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.CredentialType.CRED_TYPE_DOMAIN_EXTENDED">
      <summary>The credential is supported by extended Negotiate packages.
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING">
      <summary>
            Defines the mapping of generic access rights to specific and standard access rights for an object. When a client application requests generic access
            to an object, that request is mapped to the access rights defined in this structure.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING" /> structure.</summary>
      <param name="read">The read mapping.</param>
      <param name="write">The write mapping.</param>
      <param name="execute">The execute mapping.</param>
      <param name="all">The 'all' mapping.</param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING.GenericAll">
      <summary>Specifies an access mask defining all possible types of access to an object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING.GenericExecute">
      <summary>Specifies an access mask defining execute access to an object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING.GenericRead">
      <summary>Specifies an access mask defining read access to an object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GENERIC_MAPPING.GenericWrite">
      <summary>Specifies an access mask defining write access to an object.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.GroupAttributes">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.GroupAttributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_MANDATORY">
      <summary>The SID cannot have the SE_GROUP_ENABLED attribute cleared by a call to the AdjustTokenGroups function. However, you can use the CreateRestrictedToken function to convert a mandatory SID to a deny-only SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_ENABLED_BY_DEFAULT">
      <summary>The SID is enabled by default.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_ENABLED">
      <summary>The SID is enabled for access checks. When the system performs an access check, it checks for access-allowed and access-denied access control entries (ACEs) that apply to the SID. A SID without this attribute is ignored during an access check unless the SE_GROUP_USE_FOR_DENY_ONLY attribute is set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_OWNER">
      <summary>The SID identifies a group account for which the user of the token is the owner of the group, or the SID can be assigned as the owner of the token or objects.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_USE_FOR_DENY_ONLY">
      <summary>The SID is a deny-only SID in a restricted token. When the system performs an access check, it checks for access-denied ACEs that apply to the SID; it ignores access-allowed ACEs for the SID. If this attribute is set, SE_GROUP_ENABLED is not set, and the SID cannot be reenabled.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_INTEGRITY">
      <summary>The SID is a mandatory integrity SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_INTEGRITY_ENABLED">
      <summary>The SID is enabled for mandatory integrity checks.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_LOGON_ID">
      <summary>The SID is a logon SID that identifies the logon session associated with an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.GroupAttributes.SE_GROUP_RESOURCE">
      <summary>The SID identifies a domain-local group.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.INHERITED_FROM">
      <summary>Provides information about an object's inherited access control entry (ACE).</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.INHERITED_FROM.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.INHERITED_FROM" /> structure.</summary>
      <param name="generationGap">The generation gap.</param>
      <param name="ancestorName">Name of the ancestor.</param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.INHERITED_FROM.AncestorName">
      <summary>Name of the ancestor from which the ACE was inherited. For an explicit ACE, set this to <c>null</c>.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.INHERITED_FROM.Explicit">
      <summary>ACE is explicit.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.INHERITED_FROM.GenerationGap">
      <summary>
            Number of levels, or generations, between the object and the ancestor. Set this to zero for an explicit ACE. If the ancestor cannot be determined
            for the inherited ACE, set this member to –1.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.INHERITED_FROM.Indeterminate">
      <summary>ACE inheritance cannot be determined.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.INHERITED_FROM.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.INHERITED_FROM.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.INHERITED_FROM.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.KnownSIDAuthority">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.KnownSIDAuthority</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_APP_PACKAGE_AUTHORITY">
      <summary>The application package authority</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_AUTHENTICATION_AUTHORITY">
      <summary>The authentication authority</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_CREATOR_SID_AUTHORITY">
      <summary>The identifier authority for the creator owner.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_LOCAL_SID_AUTHORITY">
      <summary>The identifier authority for locally connected users.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_MANDATORY_LABEL_AUTHORITY">
      <summary>The mandatory label authority</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_NON_UNIQUE_AUTHORITY">
      <summary>The non-unique identifier authority.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_NT_AUTHORITY">
      <summary>The Windows security authority</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_NULL_SID_AUTHORITY">
      <summary>The identifier authority with no members.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_PROCESS_TRUST_AUTHORITY">
      <summary>The process trust authority</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_RESOURCE_MANAGER_AUTHORITY">
      <summary>The security resource manager authority</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_SCOPED_POLICY_ID_AUTHORITY">
      <summary>The scoped policy identifier authority</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDAuthority.SECURITY_WORLD_SID_AUTHORITY">
      <summary>The identifier authority all users.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_GROUP_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_GROUP_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_GROUP_SERVER_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_GROUP_SERVER_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_OWNER_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_OWNER_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_OWNER_RIGHTS_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_OWNER_RIGHTS_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_OWNER_SERVER_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_CREATOR_OWNER_SERVER_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_LOCAL_LOGON_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_LOCAL_LOGON_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_LOCAL_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_LOCAL_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_NULL_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_NULL_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_WORLD_RID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.KnownSIDRelativeID.SECURITY_WORLD_RID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LogonUserProvider">
      <summary>Specifies the logon provider.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserProvider.LOGON32_PROVIDER_DEFAULT">
      <summary>
            Use the standard logon provider for the system. The default security provider is negotiate, unless you pass NULL for the domain name and the user
            name is not in UPN format. In this case, the default provider is NTLM.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserProvider.LOGON32_PROVIDER_WINNT35">
      <summary>Use the Windows NT 3.5 logon provider.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserProvider.LOGON32_PROVIDER_WINNT40">
      <summary>Use the NTLM logon provider.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserProvider.LOGON32_PROVIDER_WINNT50">
      <summary>Use the negotiate logon provider.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserProvider.LOGON32_PROVIDER_VIRTUAL">
      <summary>Use the virtual logon provider.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LogonUserType">
      <summary>The type of logon operation to perform.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserType.LOGON32_LOGON_INTERACTIVE">
      <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on by a terminal server, remote
            shell, or similar process. This logon type has the additional expense of caching logon information for disconnected operations; therefore, it is
            inappropriate for some client/server applications, such as a mail server.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserType.LOGON32_LOGON_NETWORK">
      <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords. The LogonUser function does not cache credentials
            for this logon type.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserType.LOGON32_LOGON_BATCH">
      <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without their direct intervention. This type
            is also for higher performance servers that process many plaintext authentication attempts at a time, such as mail or web servers.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserType.LOGON32_LOGON_SERVICE">
      <summary>Indicates a service-type logon. The account provided must have the service privilege enabled.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserType.LOGON32_LOGON_UNLOCK">
      <summary>
            GINAs are no longer supported.
            <para><c>Windows Server 2003 and Windows XP:</c> This logon type is for GINA DLLs that log on users who will be interactively using the computer. This
            logon type can generate a unique audit record that shows when the workstation was unlocked.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserType.LOGON32_LOGON_NETWORK_CLEARTEXT">
      <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make connections to other network
            servers while impersonating the client. A server can accept plain-text credentials from a client, call LogonUser, verify that the user can access
            the system across the network, and still communicate with other servers.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LogonUserType.LOGON32_LOGON_NEW_CREDENTIALS">
      <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the
            same local identifier but uses different credentials for other network connections. This logon type is supported only by the
            LOGON32_PROVIDER_WINNT50 logon provider.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_ENUMERATION_INFORMATION">
      <summary>Used with the LsaEnumerateAccountsWithUserRight function to return a pointer to a SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_ENUMERATION_INFORMATION.Sid">
      <summary>Pointer to a SID.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES">
      <summary>
            The LSA_OBJECT_ATTRIBUTES structure is used with the LsaOpenPolicy function to specify the attributes of the connection to the Policy object. When
            you call LsaOpenPolicy, initialize the members of this structure to NULL or zero because the function does not use the information.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES.Attributes">
      <summary>Should be zero.</summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES.Empty">
      <summary>
            Returns a completely empty reference. This value should be used when calling <see cref="!:PInvoke.LsaOpenPolicy(string,ref LSA_OBJECT_ATTRIBUTES,Vanara.PInvoke.LsaPolicyRights,out Vanara.PInvoke.SafeLsaPolicyHandle)" />.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES.Length">
      <summary>Specifies the size, in bytes, of the LSA_OBJECT_ATTRIBUTES structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES.ObjectName">
      <summary>Should be <c>NULL</c>.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES.RootDirectory">
      <summary>Should be <c>NULL</c>.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES.SecurityDescriptor">
      <summary>Should be <c>NULL</c>.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_OBJECT_ATTRIBUTES.SecurityQualityOfService">
      <summary>Should be <c>NULL</c>.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_REFERENCED_DOMAIN_LIST">
      <summary>Contains information about the domains referenced in a lookup operation.</summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.LSA_REFERENCED_DOMAIN_LIST.DomainList">
      <summary>Gets the list of <see cref="T:Vanara.PInvoke.AdvApi32.LSA_TRUST_INFORMATION" /> structures from the <see cref="F:Vanara.PInvoke.AdvApi32.LSA_REFERENCED_DOMAIN_LIST.Domains" /> field.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_REFERENCED_DOMAIN_LIST.Domains">
      <summary>Pointer to an array of LSA_TRUST_INFORMATION structures that identify the referenced domains.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_REFERENCED_DOMAIN_LIST.Entries">
      <summary>Specifies the number of entries in the Domains array.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_STRING">
      <summary>
            The LSA_STRING structure is used by various Local Security Authority (LSA) functions to specify a string. Also an example of
            unnecessary over-engineering and re-engineering.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LSA_STRING.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.LSA_STRING" /> struct from a string.</summary>
      <param name="s">The string value.</param>
      <exception cref="T:System.ArgumentException">String exceeds 32Kb of data.</exception>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_STRING.Buffer">
      <summary>Pointer to a string. Note that the strings returned by the various LSA functions might not be null-terminated.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_STRING.length">
      <summary>
            Specifies the length, in bytes, of the string pointed to by the Buffer member, not including the terminating null character, if any.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.LSA_STRING.Length">
      <summary>Gets the number of characters in the string.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_STRING.MaximumLength">
      <summary>
            Specifies the total size, in bytes, of the memory allocated for Buffer. Up to MaximumLength bytes can be written into the buffer without
            trampling memory.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LSA_STRING.op_Implicit(Vanara.PInvoke.AdvApi32.LSA_STRING)~System.String">
      <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.AdvApi32.LSA_STRING" /> to <see cref="T:System.String" />.</summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LSA_STRING.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_NAME">
      <summary>The LSA_TRANSLATED_NAME structure is used with the LsaLookupSids function to return information about the account identified by a SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_NAME.DomainIndex">
      <summary>
            The index of an entry in a related LSA_REFERENCED_DOMAIN_LIST data structure which describes the domain that owns the account. If there is no
            corresponding reference domain for an entry, then DomainIndex will contain a negative value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_NAME.Name">
      <summary>An LSA_UNICODE_STRING structure that contains the isolated name of the translated SID. An isolated name is a user, group, or local group account name without the domain name (for example, user_name, rather than Acctg\user_name).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_NAME.Use">
      <summary>
            An SID_NAME_USE enumeration value that identifies the type of SID.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_SID2">
      <summary>Contains SIDs that are retrieved based on account names. This structure is used by the LsaLookupNames2 function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_SID2.DomainIndex">
      <summary>
            The index of an entry in a related LSA_REFERENCED_DOMAIN_LIST data structure which describes the domain that owns the account. If there is no
            corresponding reference domain for an entry, then DomainIndex will contain a negative value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_SID2.Flags">
      <summary>Not used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_SID2.Sid">
      <summary>The complete SID of the account.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRANSLATED_SID2.Use">
      <summary>
            An SID_NAME_USE enumeration value that identifies the use of the SID. If this value is SidTypeUnknown or SidTypeInvalid, the rest of the
            information in the structure is not valid and should be ignored.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_TRUST_INFORMATION">
      <summary>Identifies a domain.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRUST_INFORMATION.Name">
      <summary>An LSA_UNICODE_STRING structure that contains the name of the domain.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_TRUST_INFORMATION.Sid">
      <summary>Pointer to the SID of the domain.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING">
      <summary>
            The LSA_UNICODE_STRING structure is used by various Local Security Authority (LSA) functions to specify a Unicode string. Also an example of
            unnecessary over-engineering and re-engineering.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING" /> struct from a string.</summary>
      <param name="s">The string value.</param>
      <exception cref="T:System.ArgumentException">String exceeds 32Kb of data.</exception>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING.Buffer">
      <summary>Pointer to a wide character string. Note that the strings returned by the various LSA functions might not be null-terminated.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING.length">
      <summary>
            Specifies the length, in bytes, of the string pointed to by the Buffer member, not including the terminating null character, if any.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING.Length">
      <summary>Gets the number of characters in the string.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING.MaximumLength">
      <summary>
            Specifies the total size, in bytes, of the memory allocated for Buffer. Up to MaximumLength bytes can be written into the buffer without
            trampling memory.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING.op_Implicit(Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING)~System.String">
      <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING" /> to <see cref="T:System.String" />.</summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LSA_UNICODE_STRING.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_VIEW">
      <summary>
            This access type is required to read the account information. This includes the privileges assigned to the account, memory quotas assigned, and
            any special access types granted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_ADJUST_PRIVILEGES">
      <summary>This access type is required to assign privileges to or remove privileges from an account.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_ADJUST_QUOTAS">
      <summary>This access type is required to change the system quotas assigned to an account.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_ADJUST_SYSTEM_ACCESS">
      <summary>This access type is required to update the system access flags for the account.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_ALL_ACCESS">
      <summary>The account all access</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_READ">
      <summary>The account read</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_WRITE">
      <summary>The account write</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaAccountAccessMask.ACCOUNT_EXECUTE">
      <summary>The account execute</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LsaLookupNamesFlags">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.LsaLookupNamesFlags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaLookupNamesFlags.LSA_LOOKUP_ISOLATED_AS_LOCAL">
      <summary>
            The function searches only on the local systems for names that do not specify a domain. The function does search on remote systems for names that
            do specify a domain.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LsaLookupSidsFlags">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.LsaLookupSidsFlags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaLookupSidsFlags.LSA_LOOKUP_DISALLOW_CONNECTED_ACCOUNT_INTERNET_SID">
      <summary>Internet SIDs from identity providers for connected accounts are disallowed. Connected accounts are those accounts which have a corresponding shadow account in the local SAM database connected to an online identity provider. For example, MicrosoftAccount is a connected account.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaLookupSidsFlags.LSA_LOOKUP_PREFER_INTERNET_NAMES">
      <summary>Returns the internet names. Otherwise the NT4 style name (domain\username) is returned. The exception is if the Microsoft Account internet SID is specified, in which case the internet name is returned unless LSA_LOOKUP_DISALLOW_NON_WINDOWS_INTERNET_SID is specified.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaLookupSidsFlags.LSA_LOOKUP_RETURN_LOCAL_NAMES">
      <summary>Always returns local SAM account names even for Internet provider identities.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LsaPolicyRights">
      <summary>The Policy object has the following object-specific access types:</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_VIEW_LOCAL_INFORMATION">
      <summary>
            This access type is needed to read the target system's miscellaneous security policy information. This includes the default quota, auditing,
            server state and role information, and trust information. This access type is also needed to enumerate trusted domains, accounts, and privileges.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_VIEW_AUDIT_INFORMATION">
      <summary>This access type is needed to view audit trail or audit requirements information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_GET_PRIVATE_INFORMATION">
      <summary>This access type is needed to view sensitive information, such as the names of accounts established for trusted domain relationships.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_TRUST_ADMIN">
      <summary>This access type is needed to change the account domain or primary domain information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_CREATE_ACCOUNT">
      <summary>This access type is needed to create a new Account object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_CREATE_SECRET">
      <summary>This access type is needed to create a new Private Data object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_CREATE_PRIVILEGE">
      <summary>Not yet supported.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_SET_DEFAULT_QUOTA_LIMITS">
      <summary>Set the default system quotas that are applied to user accounts.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_SET_AUDIT_REQUIREMENTS">
      <summary>This access type is needed to update the auditing requirements of the system.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_AUDIT_LOG_ADMIN">
      <summary>
            This access type is needed to change the characteristics of the audit trail such as its maximum size or the retention period for audit records,
            or to clear the log.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_SERVER_ADMIN">
      <summary>
            This access type is needed to modify the server state or role (master/replica) information. It is also needed to change the replica source and
            account name information.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_LOOKUP_NAMES">
      <summary>This access type is needed to translate between names and SIDs.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_NOTIFICATION">
      <summary>The policy notification</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_ALL_ACCESS">
      <summary>All access</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_READ">
      <summary>Read access</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_WRITE">
      <summary>Write access</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LsaPolicyRights.POLICY_EXECUTE">
      <summary>Execute access</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LUID">
      <summary>
            An LUID is a 64-bit value guaranteed to be unique only on the system on which it was generated. The uniqueness of a locally unique identifier (LUID)
            is guaranteed only until the system is restarted.
            <para>Applications must use functions and structures to manipulate LUID values.</para></summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LUID.FromName(System.String,System.String)">
      <summary>Creates a new LUID instance from a privilege name.</summary>
      <param name="name">The privilege name.</param>
      <param name="systemName">Name of the system on which to perform the lookup. Specifying <c>null</c> will query the local system.</param>
      <returns>The LUID instance corresponding to the <paramref name="name" />.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LUID.GetName(System.String)">
      <summary>Gets the privilege name for this LUID.</summary>
      <param name="systemName">Name of the system on which to perform the lookup. Specifying <c>null</c> will query the local system.</param>
      <returns>The name retrieved for the LUID.</returns>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LUID.HighPart">
      <summary>High order bits.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LUID.LowPart">
      <summary>Low order bits.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LUID.NewLUID">
      <summary>Creates a new LUID that is unique to the local system only, and uniqueness is guaranteed only until the system is next restarted.</summary>
      <returns>A new LUID.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LUID.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES">
      <summary>The LUID_AND_ATTRIBUTES structure represents a locally unique identifier (LUID) and its attributes.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES.#ctor(Vanara.PInvoke.AdvApi32.LUID,Vanara.PInvoke.AdvApi32.PrivilegeAttributes)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES" /> struct.</summary>
      <param name="luid">The LUID value.</param>
      <param name="attr">The attribute value.</param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES.Attributes">
      <summary>
            Specifies attributes of the LUID. This value contains up to 32 one-bit flags. Its meaning is dependent on the definition and use of the LUID.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES.Luid">
      <summary>Specifies a LUID value.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.MULTIPLE_TRUSTEE_OPERATION">
      <summary>The MULTIPLE_TRUSTEE_OPERATION enumeration contains values that indicate whether a TRUSTEE structure is an impersonation trustee.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.MULTIPLE_TRUSTEE_OPERATION.NO_MULTIPLE_TRUSTEE">
      <summary>The trustee is not an impersonation trustee.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.MULTIPLE_TRUSTEE_OPERATION.TRUSTEE_IS_IMPERSONATE">
      <summary>
            The trustee is an impersonation trustee. The pMultipleTrustee member of the TRUSTEE structure points to a trustee for a server that can
            impersonate the client trustee.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET">
      <summary>
            The PRIVILEGE_SET structure specifies a set of privileges. It is also used to indicate which, if any, privileges are held by a user or group
            requesting access to an object.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.#ctor(Vanara.PInvoke.AdvApi32.PrivilegeSetControl,Vanara.PInvoke.AdvApi32.LUID,Vanara.PInvoke.AdvApi32.PrivilegeAttributes)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET" /> class with a single LUID_AND_ATTRIBUTES value.</summary>
      <param name="control">The control flag. See <see cref="F:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Control" />.</param>
      <param name="luid">The LUID value.</param>
      <param name="attribute">The attribute value.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.#ctor(Vanara.PInvoke.AdvApi32.PrivilegeSetControl,Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES[])">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET" /> class.</summary>
      <param name="control">The control flag. See <see cref="F:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Control" />.</param>
      <param name="privileges">A list of privileges to assign to the structure.</param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Control">
      <summary>
            Specifies a control flag related to the privileges. The PRIVILEGE_SET_ALL_NECESSARY control flag is currently defined. It indicates that all of
            the specified privileges must be held by the process requesting access. If this flag is not set, the presence of any privileges in the user's
            access token grants the access.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Privilege">
      <summary>Specifies an array of LUID_AND_ATTRIBUTES structures describing the set's privileges.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.PrivilegeCount">
      <summary>Specifies the number of privileges in the privilege set.</summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.SizeInBytes">
      <summary>Gets the size in bytes of this instance.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.CleanUpManagedData(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.CleanUpManagedData(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="ManagedObj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ManagedObj</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.CleanUpManagedData(System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.CleanUpNativeData(System.IntPtr)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.CleanUpNativeData(System.IntPtr)</parameter>
          </include>
        </markup>
      </summary>
      <param name="pNativeData">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pNativeData</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.CleanUpNativeData(System.IntPtr)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.GetInstance(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.GetInstance(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="cookie">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cookie</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.GetInstance(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.GetInstance(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.GetNativeDataSize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.GetNativeDataSize</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.GetNativeDataSize</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalManagedToNative(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalManagedToNative(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="ManagedObj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ManagedObj</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalManagedToNative(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalManagedToNative(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalNativeToManaged(System.IntPtr)</parameter>
          </include>
        </markup>
      </summary>
      <param name="pNativeData">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pNativeData</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalNativeToManaged(System.IntPtr)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PRIVILEGE_SET.Marshaler.MarshalNativeToManaged(System.IntPtr)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.PrivilegeAttributes">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.PrivilegeAttributes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PrivilegeAttributes.SE_PRIVILEGE_DISABLED">
      <summary>The privilege is disabled.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PrivilegeAttributes.SE_PRIVILEGE_ENABLED_BY_DEFAULT">
      <summary>The privilege is enabled by default.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PrivilegeAttributes.SE_PRIVILEGE_ENABLED">
      <summary>The privilege is enabled.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PrivilegeAttributes.SE_PRIVILEGE_REMOVED">
      <summary>Used to remove a privilege. The other privileges in the list are reordered to remain contiguous.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PrivilegeAttributes.SE_PRIVILEGE_USED_FOR_ACCESS">
      <summary>
            The privilege was used to gain access to an object or service. This flag is used to identify the relevant privileges in a set passed by a client
            application that may contain unnecessary privileges.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.PrivilegeSetControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.PrivilegeSetControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PrivilegeSetControl.None">
      <summary>The presence of any privileges in the user's access token grants the access.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PrivilegeSetControl.PRIVILEGE_SET_ALL_NECESSARY">
      <summary>Indicates that all of the specified privileges must be held by the process requesting access.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.PSID">
      <summary>Class representation of the native SID structure.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> class.</summary>
      <param name="sidBytes">An array of bytes that contain a valid Sid.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> class.</summary>
      <param name="size">The size of memory to allocate, in bytes.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> class.</summary>
      <param name="ptr">A pointer to an existing SID.</param>
      <param name="own">if set to <c>true</c><see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> will be called on the pointer when disposed.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> class.</summary>
      <param name="sidValue">The string SID value.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.#ctor(Vanara.PInvoke.AdvApi32.PSID)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> class.</summary>
      <param name="psid">The existing <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> instance to duplicate.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.Clone">
      <summary>Clones this instance.</summary>
      <returns>A copy of the current <see cref="T:Vanara.PInvoke.AdvApi32.PSID" />.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.CreateFromPtr(System.IntPtr)">
      <summary>Copies the specified SID from a memory pointer to a <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> instance.</summary>
      <param name="psid">The SID pointer. This value remains the responsibility of the caller to release.</param>
      <returns>A <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> instance.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.Equals(System.IntPtr)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.Equals(Vanara.PInvoke.AdvApi32.PSID)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.GetBinaryForm">
      <summary>Gets the binary form of this PSID.</summary>
      <returns>An array of bytes containing the Sid.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.Init(Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY,System.Int32,System.Int32[])">
      <summary>Initializes a new <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> instance from a SID authority and subauthorities.</summary>
      <param name="sidAuthority">The SID authority.</param>
      <param name="subAuth0">The first subauthority.</param>
      <param name="subAuthorities1to7">Up to seven other subauthorities.</param>
      <returns>A new <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> instance.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sidAuthority" /> is null or an invalid length or more than 8 total subauthorities were submitted.
            </exception>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.PSID.IsValidSid">
      <summary>Verifies that the revision number is within a known range, and that the number of subauthorities is less than the maximum.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PSID.Null">
      <summary>Equivalent to a NULL pointer to a SID.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.op_Equality(Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.PSID)">
      <summary>Implements the operator ==.</summary>
      <param name="psid1">The psid1.</param>
      <param name="psid2">The psid2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.op_Explicit(System.IntPtr)~Vanara.PInvoke.AdvApi32.PSID">
      <summary>Performs an implicit conversion from <see cref="T:System.IntPtr" /> to <see cref="T:Vanara.PInvoke.AdvApi32.PSID" />.</summary>
      <param name="psid">The SID pointer.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.op_Explicit(Vanara.PInvoke.AdvApi32.PSID)~System.IntPtr">
      <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.AdvApi32.PSID" /> to <see cref="T:System.IntPtr" />.</summary>
      <param name="psid">The PSID instance.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.op_Inequality(Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.AdvApi32.PSID)">
      <summary>Implements the operator !=.</summary>
      <param name="psid1">The psid1.</param>
      <param name="psid2">The psid2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY" /> struct.</summary>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY" /> struct.</summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.LongValue">
      <summary>Gets or sets the long value.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(System.Byte[])~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(System.Byte[])~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY</parameter>
          </include>
        </markup>
      </summary>
      <param name="bytes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bytes</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(System.Byte[])~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(System.Byte[])~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY)~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY)~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY</parameter>
          </include>
        </markup>
      </summary>
      <param name="sia">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sia</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY)~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.op_Implicit(Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY)~Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PSID_IDENTIFIER_AUTHORITY.Value">
      <summary>An array of 6 bytes specifying a SID's top-level authority.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES">
      <summary>The TOKEN_PRIVILEGES structure contains information about a set of privileges for an access token.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.#ctor(Vanara.PInvoke.AdvApi32.LUID,Vanara.PInvoke.AdvApi32.PrivilegeAttributes)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES" /> class with a single LUID_AND_ATTRIBUTES value.</summary>
      <param name="luid">The LUID value.</param>
      <param name="attribute">The attribute value.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.#ctor(Vanara.PInvoke.AdvApi32.LUID_AND_ATTRIBUTES[])">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES" /> class from a list of privileges.</summary>
      <param name="values">The values.</param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.FromPtr(System.IntPtr)">
      <summary>Creates a new instance of <see cref="T:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES" /> from a pointer.</summary>
      <param name="hMem">A pointer to a memory block that contains a native TOKEN_PRIVILEGES structure.</param>
      <returns>A new instance of <see cref="T:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES" />.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.GetAllocatedAndEmptyInstance(System.Int32)">
      <summary>Gets unmanaged memory allocated to hold the number of privileges specified by <paramref name="privilegeCount" />.</summary>
      <param name="privilegeCount">The privilege count.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.GetAllocatedAndEmptyInstance(System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.PrivilegeCount">
      <summary>This must be set to the number of entries in the Privileges array.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.Privileges">
      <summary>
            Specifies an array of LUID_AND_ATTRIBUTES structures. Each structure contains the LUID and attributes of a privilege. To get the name of the
            privilege associated with a LUID, call the LookupPrivilegeName function, passing the address of the LUID as the value of the lpLuid parameter.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.SizeInBytes">
      <summary>Gets the size of this instance in bytes.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.PTOKEN_PRIVILEGES.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwErrorControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwErrorControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwServiceType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwServiceType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwStartType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwStartType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwTagID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.dwTagID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpBinaryPathName">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpBinaryPathName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpDependencies">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpDependencies</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpDisplayName">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpDisplayName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpLoadOrderGroup">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpLoadOrderGroup</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpServiceStartName">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.AdvApi32.QUERY_SERVICE_CONFIG.lpServiceStartName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.QUOTA_LIMITS">
      <summary>The QUOTA_LIMITS structure describes the amount of system resources available to a user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUOTA_LIMITS.MaximumWorkingSetSize">
      <summary>
            Specifies the maximum set size assigned to the user.
            <para>The value set in this member is not enforced by the LSA. You should set this member to 0, which causes the default value to be used.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUOTA_LIMITS.MinimumWorkingSetSize">
      <summary>
            Specifies the minimum set size assigned to the user. The "working set" of a process is the set of memory pages currently visible to the process
            in physical RAM memory. These pages are present in memory when the application is running and available for an application to use without
            triggering a page fault.
            <para>The value set in this member is not enforced by the LSA. You should set this member to NULL, which causes the default value to be used.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUOTA_LIMITS.NonPagedPoolLimit">
      <summary>
            Specifies the amount of nonpaged pool memory assigned to the user. The nonpaged pool is an area of system memory for objects that cannot be
            written to disk but must remain in physical memory as long as they are allocated.
            <para>The value set in this member is not enforced by the LSA. You should set this member to 0, which causes the default value to be used.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUOTA_LIMITS.PagedPoolLimit">
      <summary>
            Specifies the amount of paged pool memory assigned to the user. The paged pool is an area of system memory (physical memory used by the operating
            system) for objects that can be written to disk when they are not being used.
            <para>The value set in this member is not enforced by the LSA. You should set this member to 0, which causes the default value to be used.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUOTA_LIMITS.PagefileLimit">
      <summary>
            Specifies the maximum size, in bytes, of the paging file, which is a reserved space on disk that backs up committed physical memory on the computer.
            <para>The value set in this member is not enforced by the LSA. You should set this member to 0, which causes the default value to be used.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.QUOTA_LIMITS.TimeLimit">
      <summary>
            Indicates the maximum amount of time the process can run.
            <para>The value set in this member is not enforced by the LSA. You should set this member to NULL, which causes the default value to be used.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.RegAccessTypes">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.AdvApi32.RegAccessTypes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_QUERY_VALUE">
      <summary>Required to query the values of a registry key.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_SET_VALUE">
      <summary>Required to create, delete, or set a registry value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_CREATE_SUB_KEY">
      <summary>Required to create a subkey of a registry key.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_ENUMERATE_SUB_KEYS">
      <summary>Required to enumerate the subkeys of a registry key.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_NOTIFY">
      <summary>Required to request change notifications for a registry key or for subkeys of a registry key.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_CREATE_LINK">
      <summary>Reserved for system use.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_WOW64_32KEY">
      <summary>Indicates that an application on 64-bit Windows should operate on the 32-bit registry view. This flag is ignored by 32-bit Windows. For more information, see Accessing an Alternate Registry View.
            <para>This flag must be combined using the OR operator with the other flags in this table that either query or access registry values.</para><note>Windows 2000:  This flag is not supported.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_WOW64_64KEY">
      <summary>Indicates that an application on 64-bit Windows should operate on the 64-bit registry view. This flag is ignored by 32-bit Windows. For more information, see Accessing an Alternate Registry View.
            <para>This flag must be combined using the OR operator with the other flags in this table that either query or access registry values.</para><note>Windows 2000:  This flag is not supported.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_WOW64_RES">
      <summary></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_READ">
      <summary>Combines the STANDARD_RIGHTS_READ, KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_WRITE">
      <summary>Combines the STANDARD_RIGHTS_WRITE, KEY_SET_VALUE, and KEY_CREATE_SUB_KEY access rights.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_EXECUTE">
      <summary>Equivalent to KEY_READ.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegAccessTypes.KEY_ALL_ACCESS">
      <summary>Combines the STANDARD_RIGHTS_REQUIRED, KEY_QUERY_VALUE, KEY_SET_VALUE, KEY_CREATE_SUB_KEY, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, and KEY_CREATE_LINK access rights.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter">
      <summary>Filter for notifications reported by <see cref="M:Vanara.PInvoke.AdvApi32.RegNotifyChangeKeyValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.Boolean,Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter,System.IntPtr,System.Boolean)" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter.REG_NOTIFY_CHANGE_NAME">
      <summary>Notify the caller if a subkey is added or deleted.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter.REG_NOTIFY_CHANGE_ATTRIBUTES">
      <summary>Notify the caller of changes to the attributes of the key, such as the security descriptor information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter.REG_NOTIFY_CHANGE_LAST_SET">
      <summary>Notify the caller of changes to a value of the key. This can include adding or deleting a value, or changing an existing value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter.REG_NOTIFY_CHANGE_SECURITY">
      <summary>Notify the caller of changes to the security descriptor of the key.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegNotifyChangeFilter.REG_NOTIFY_THREAD_AGNOSTIC">
      <summary>
            Indicates that the lifetime of the registration must not be tied to the lifetime of the thread issuing the RegNotifyChangeKeyValue call.
            <note type="note">This flag value is only supported in Windows 8 and later.</note></summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.RegOpenOptions">
      <summary>
            Options for <see cref="M:Vanara.PInvoke.AdvApi32.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.String,Vanara.PInvoke.AdvApi32.RegOpenOptions,Vanara.PInvoke.AdvApi32.RegAccessTypes,Microsoft.Win32.SafeHandles.SafeRegistryHandle@)" />.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegOpenOptions.REG_OPTION_NON_VOLATILE">
      <summary>
            This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The RegSaveKey
            function saves keys that are not volatile.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegOpenOptions.REG_OPTION_VOLATILE">
      <summary>
            All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For HKEY_LOCAL_MACHINE, this occurs only when the system initiates a full shutdown. For registry keys loaded by the RegLoadKey function, this occurs when the corresponding RegUnLoadKey is performed. The RegSaveKey function does not save volatile keys. This flag is ignored for keys that already exist.
            <note type="note">On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegOpenOptions.REG_OPTION_CREATE_LINK">
      <summary>
        <note type="note">Registry symbolic links should only be used for for application compatibility when absolutely necessary.</note>
        <para>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</para>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegOpenOptions.REG_OPTION_BACKUP_RESTORE">
      <summary>
            If this flag is set, the function ignores the samDesired parameter and attempts to open the key with the access required to backup or restore the
            key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access
            rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, the key is opened with the
            ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both
            privileges. For more information, see Running with Special Privileges.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.RegOpenOptions.REG_OPTION_OPEN_LINK">
      <summary>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SafeCredMemoryHandle">
      <summary>Safe handle for WinCred functions.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeCredMemoryHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.SafeCredMemoryHandle" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeCredMemoryHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.SafeCredMemoryHandle" /> class.</summary>
      <param name="ptr">The pointer to the memory allocated by an WinCred function.</param>
      <param name="own">if set to <c>true</c> release the memory when out of scope.</param>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SafeInheritedFromArray">
      <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> to hold the array of <see cref="T:Vanara.PInvoke.AdvApi32.INHERITED_FROM" /> instances returned from <see cref="!:Vanara.GetInheritanceSource" />.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeInheritedFromArray.#ctor(System.UInt16)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.SafeInheritedFromArray" /> class.</summary>
      <param name="aceCount">The count of ACEs that are contained in the ACL.</param>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.SafeInheritedFromArray.AceCount">
      <summary>Gets the count of ACEs that are contained in the ACL.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeInheritedFromArray.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a
            releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.SafeInheritedFromArray.Results">
      <summary>Gets the array of inheritance objects.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle">
      <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for values that must be freed using the <see cref="M:Vanara.PInvoke.AdvApi32.LsaFreeMemory(System.IntPtr)" /> function.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.SafeLsaMemoryHandle" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeLsaMemoryHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.SafeLsaMemoryHandle" /> class.</summary>
      <param name="ptr">The pointer to the memory allocated by an Lsa function.</param>
      <param name="own">if set to <c>true</c> release the memory when out of scope.</param>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle">
      <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for LSA_HANDLE that calls <see cref="M:Vanara.PInvoke.AdvApi32.LsaClose(System.IntPtr)" /> on disposal.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.SafeLsaPolicyHandle" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeLsaPolicyHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.SafeLsaPolicyHandle" /> class.</summary>
      <param name="ptr">The PTR.</param>
      <param name="own">if set to <c>true</c> [own].</param>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SafeLsaReturnBufferHandle">
      <summary>A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for values that must be freed using the <see cref="M:Vanara.PInvoke.AdvApi32.LsaFreeReturnBuffer(System.IntPtr)" /> function.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeLsaReturnBufferHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.SafeLsaReturnBufferHandle" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeLsaReturnBufferHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.SafeLsaReturnBufferHandle" /> class.</summary>
      <param name="ptr">The pointer to the memory allocated by an Lsa function.</param>
      <param name="own">if set to <c>true</c> release the memory when out of scope.</param>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor">
      <summary>
            A SafeHandle for security descriptors. If owned, will call LocalFree on the pointer when disposed.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor" /> class from an existing pointer.</summary>
      <param name="pSecurityDescriptor">The security descriptor pointer.</param>
      <param name="own">if set to <c>true</c> indicates that this pointer should be freed when disposed.</param>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SafeTokenHandle">
      <summary>Represents a safe handle for HTOKEN.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeTokenHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.SafeTokenHandle" /> class.</summary>
      <param name="hToken">The h token.</param>
      <param name="own">if set to <c>true</c> [own].</param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SafeTokenHandle.CurrentProcessToken">
      <summary>Retrieves a pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SafeTokenHandle.CurrentThreadEffectiveToken">
      <summary>Retrieves a pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread, which is the thread token if one exists and the process token otherwise.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SafeTokenHandle.CurrentThreadToken">
      <summary>Retrieves a pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeTokenHandle.FromProcess(System.IntPtr,Vanara.PInvoke.AdvApi32.TokenAccess)">
      <summary>Get the token handle instance from a process handle.</summary>
      <param name="hProcess">The process handle.</param>
      <param name="desiredAccess">The desired access. TOKEN_DUPLICATE must usually be included.</param>
      <returns>Resulting token handle.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeTokenHandle.FromThread(System.IntPtr,Vanara.PInvoke.AdvApi32.TokenAccess,System.Boolean)">
      <summary>Get the token handle instance from a process handle.</summary>
      <param name="hThread">The thread handle.</param>
      <param name="desiredAccess">The desired access. TOKEN_DUPLICATE must usually be included.</param>
      <param name="openAsSelf">if set to <c>true</c> open as self.</param>
      <returns>Resulting token handle.</returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeTokenHandle.GetInfo``1(Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS)">
      <summary>
            Retrieves a specified type of information about an access token cast to supplied <typeparamref name="T" /> type. The calling process must have
            appropriate access rights to obtain the information. <note type="note">The caller is responsible for ensuring that the type requested by
            <typeparamref name="T" /> matches the type information requested by <paramref name="tokenInfoClass" />.</note></summary>
      <param name="tokenInfoClass">
            Specifies a value from the TOKEN_INFORMATION_CLASS enumerated type to identify the type of information the function retrieves. Any callers who
            check the TokenIsAppContainer and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the
            current token is not an application container but is an identity level token, you should return AccessDenied.
            </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.SafeTokenHandle.GetInfo``1(Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.AdvApi32.SafeTokenHandle.GetInfo``1(Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.SafeTokenHandle.GetInfo(Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS)">
      <summary>
            Retrieves a specified type of information about an access token. The calling process must have appropriate access rights to obtain the information.
            </summary>
      <param name="tokenInfoClass">
            Specifies a value from the TOKEN_INFORMATION_CLASS enumerated type to identify the type of information the function retrieves. Any callers who
            check the TokenIsAppContainer and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the
            current token is not an application container but is an identity level token, you should return AccessDenied.
            </param>
      <returns>The block of memory containing the requested information.</returns>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.SafeTokenHandle.IsElevated">
      <summary>Gets a value indicating whether this token is elevated.</summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.SafeTokenHandle.Null">
      <summary>Gets an instance that is equivalent to NULL HTOKEN.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SDDL_REVISION">
      <summary>Contains values to indicate the requested SDDL format.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SDDL_REVISION.SDDL_REVISION_1">
      <summary>SDDL revision 1.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE">
      <summary>
            The SE_OBJECT_TYPE enumeration contains values that correspond to the types of Windows objects that support security. The functions, such as
            GetSecurityInfo and SetSecurityInfo, that set and retrieve the security information of an object, use these values to indicate the type of object.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_UNKNOWN_OBJECT_TYPE">
      <summary>Unknown object type.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_FILE_OBJECT">
      <summary>Indicates a file or directory. The name string that identifies a file or directory object can be in one of the following formats:
             <list type="bullet"><listItem><para>A relative path, such as FileName.dat or ..\FileName</para></listItem><listItem><para>An absolute path, such as FileName.dat, C:\DirectoryName\FileName.dat, or G:\RemoteDirectoryName\FileName.dat.</para></listItem><listItem><para>A UNC name, such as \\ComputerName\ShareName\FileName.dat.</para></listItem></list></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_SERVICE">
      <summary>Indicates a Windows service. A service object can be a local service, such as ServiceName, or a remote service, such as \\ComputerName\ServiceName.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_PRINTER">
      <summary>Indicates a printer. A printer object can be a local printer, such as PrinterName, or a remote printer, such as \\ComputerName\PrinterName.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_REGISTRY_KEY">
      <summary>
            Indicates a registry key. A registry key object can be in the local registry, such as CLASSES_ROOT\SomePath or in a remote registry, such as \\ComputerName\CLASSES_ROOT\SomePath.
            <para>
            The names of registry keys must use the following literal strings to identify the predefined registry keys: "CLASSES_ROOT", "CURRENT_USER",
            "MACHINE", and "USERS".
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_LMSHARE">
      <summary>Indicates a network share. A share object can be local, such as ShareName, or remote, such as \\ComputerName\ShareName.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_KERNEL_OBJECT">
      <summary>
            Indicates a local kernel object. The GetSecurityInfo and SetSecurityInfo functions support all types of kernel objects. The GetNamedSecurityInfo
            and SetNamedSecurityInfo functions work only with the following kernel objects: semaphore, event, mutex, waitable timer, and file mapping.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_WINDOW_OBJECT">
      <summary>
            Indicates a window station or desktop object on the local computer. You cannot use GetNamedSecurityInfo and SetNamedSecurityInfo with these
            objects because the names of window stations or desktops are not unique.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_DS_OBJECT">
      <summary>
            Indicates a directory service object or a property set or property of a directory service object. The name string for a directory service object
            must be in X.500 form, for example:
            <para>CN=SomeObject,OU=ou2,OU=ou1,DC=DomainName,DC=CompanyName,DC=com,O=internet</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_DS_OBJECT_ALL">
      <summary>Indicates a directory service object and all of its property sets and properties.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_PROVIDER_DEFINED_OBJECT">
      <summary>Indicates a provider-defined object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_WMIGUID_OBJECT">
      <summary>Indicates a WMI object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_REGISTRY_WOW64_32KEY">
      <summary>Indicates an object for a registry entry under WOW64.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR">
      <summary>
            The SECURITY_DESCRIPTOR structure contains the security information associated with an object. Applications use this structure to set and query an
            object's security status.
            <para>
            Because the internal format of a security descriptor can vary, we recommend that applications not modify the SECURITY_DESCRIPTOR structure directly.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR.Control">
      <summary>Undocumented.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR.Dacl">
      <summary>Undocumented.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR.Group">
      <summary>Undocumented.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR.Owner">
      <summary>Undocumented.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR.Revision">
      <summary>Undocumented.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR.Sacl">
      <summary>Undocumented.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR.Sbz1">
      <summary>Undocumented.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL">
      <summary>
            A set of bit flags that qualify the meaning of a security descriptor or its components. Each security descriptor has a Control member that stores the
            SECURITY_DESCRIPTOR_CONTROL bits.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_DACL_AUTO_INHERIT_REQ">
      <summary>
            Indicates a required security descriptor in which the discretionary access control list (DACL) is set up to support automatic propagation of
            inheritable access control entries (ACEs) to existing child objects.
            <para>
            For access control lists (ACLs) that support auto inheritance, this bit is always set. Protected servers can call the
            ConvertToAutoInheritPrivateObjectSecurity function to convert a security descriptor and set this flag.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_DACL_AUTO_INHERITED">
      <summary>
            Indicates a security descriptor in which the discretionary access control list (DACL) is set up to support automatic propagation of inheritable
            access control entries (ACEs) to existing child objects.
            <para>
            For access control lists (ACLs) that support auto inheritance, this bit is always set. Protected servers can call the
            ConvertToAutoInheritPrivateObjectSecurity function to convert a security descriptor and set this flag.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_DACL_DEFAULTED">
      <summary>
            Indicates a security descriptor with a default DACL. For example, if the creator an object does not specify a DACL, the object receives the
            default DACL from the access token of the creator. This flag can affect how the system treats the DACL with respect to ACE inheritance. The
            system ignores this flag if the SE_DACL_PRESENT flag is not set.
            <para>
            This flag is used to determine how the final DACL on the object is to be computed and is not stored physically in the security descriptor control
            of the securable object.
            </para><para>To set this flag, use the SetSecurityDescriptorDacl function.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_DACL_PRESENT">
      <summary>
            Indicates a security descriptor that has a DACL. If this flag is not set, or if this flag is set and the DACL is NULL, the security descriptor
            allows full access to everyone.
            <para>
            This flag is used to hold the security information specified by a caller until the security descriptor is associated with a securable object.
            After the security descriptor is associated with a securable object, the SE_DACL_PRESENT flag is always set in the security descriptor control.
            </para><para>To set this flag, use the SetSecurityDescriptorDacl function.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_DACL_PROTECTED">
      <summary>
            Prevents the DACL of the security descriptor from being modified by inheritable ACEs. To set this flag, use the SetSecurityDescriptorControl function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_GROUP_DEFAULTED">
      <summary>
            Indicates that the security identifier (SID) of the security descriptor group was provided by a default mechanism. This flag can be used by a
            resource manager to identify objects whose security descriptor group was set by a default mechanism. To set this flag, use the
            SetSecurityDescriptorGroup function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_OWNER_DEFAULTED">
      <summary>
            Indicates that the SID of the owner of the security descriptor was provided by a default mechanism. This flag can be used by a resource manager
            to identify objects whose owner was set by a default mechanism. To set this flag, use the SetSecurityDescriptorOwner function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_RM_CONTROL_VALID">
      <summary>Indicates that the resource manager control is valid.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_SACL_AUTO_INHERIT_REQ">
      <summary>
            Indicates a required security descriptor in which the system access control list (SACL) is set up to support automatic propagation of inheritable
            ACEs to existing child objects.
            <para>
            The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects. To convert a
            security descriptor and set this flag, protected servers can call the ConvertToAutoInheritPrivateObjectSecurity function.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_SACL_AUTO_INHERITED">
      <summary>
            Indicates a security descriptor in which the system access control list (SACL) is set up to support automatic propagation of inheritable ACEs to
            existing child objects.
            <para>
            The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects. To convert a
            security descriptor and set this flag, protected servers can call the ConvertToAutoInheritPrivateObjectSecurity function.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_SACL_DEFAULTED">
      <summary>
            A default mechanism, rather than the original provider of the security descriptor, provided the SACL. This flag can affect how the system treats
            the SACL, with respect to ACE inheritance. The system ignores this flag if the SE_SACL_PRESENT flag is not set. To set this flag, use the
            SetSecurityDescriptorSacl function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_SACL_PRESENT">
      <summary>Indicates a security descriptor that has a SACL. To set this flag, use the SetSecurityDescriptorSacl function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_SACL_PROTECTED">
      <summary>
            Prevents the SACL of the security descriptor from being modified by inheritable ACEs. To set this flag, use the SetSecurityDescriptorControl function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR_CONTROL.SE_SELF_RELATIVE">
      <summary>
            Indicates a self-relative security descriptor. If this flag is not set, the security descriptor is in absolute format. For more information, see
            Absolute and Self-Relative Security Descriptors.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SECURITY_IMPERSONATION_LEVEL">
      <summary>
            The SECURITY_IMPERSONATION_LEVEL enumeration contains values that specify security impersonation levels. Security impersonation levels govern the
            degree to which a server process can act on behalf of a client process.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous">
      <summary>
            The server process cannot obtain identification information about the client, and it cannot impersonate the client. It is defined with no value
            given, and thus, by ANSI C rules, defaults to a value of zero.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_IMPERSONATION_LEVEL.SecurityIdentification">
      <summary>
            The server process can obtain information about the client, such as security identifiers and privileges, but it cannot impersonate the client.
            This is useful for servers that export their own objects, for example, database products that export tables and views. Using the retrieved
            client-security information, the server can make access-validation decisions without being able to use other services that are using the client's
            security context.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation">
      <summary>
            The server process can impersonate the client's security context on its local system. The server cannot impersonate the client on remote systems.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SECURITY_IMPERSONATION_LEVEL.SecurityDelegation">
      <summary>The server process can impersonate the client's security context on remote systems.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SERVICE_DESCRIPTION">
      <summary>
            Contains a service description.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SERVICE_DESCRIPTION.lpDescription">
      <summary>The description of the service. If this member is NULL, the description remains unchanged. If this value is an empty string (""), the current description is deleted.
            <para>The service description must not exceed the size of a registry value of type REG_SZ.</para><para>This member can specify a localized string using the following format:</para><para>@[path\]dllname,-strID</para><para>The string with identifier strID is loaded from dllname; the path is optional. For more information, see RegLoadMUIString.</para><para><c>Windows Server 2003 and Windows XP:</c> Localized strings are not supported until Windows Vista.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ServiceConfigOption">
      <summary>Used by the <see cref="!:Vanara.ChangeServiceConfig2" /> method.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_DELAYED_AUTO_START_INFO">
      <summary>
            The lpInfo parameter is a pointer to a SERVICE_DELAYED_AUTO_START_INFO structure.
            <para><c>Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_DESCRIPTION">
      <summary>The lpInfo parameter is a pointer to a SERVICE_DESCRIPTION structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_FAILURE_ACTIONS">
      <summary>
            The lpInfo parameter is a pointer to a SERVICE_FAILURE_ACTIONS structure.
            <para>
            If the service controller handles the SC_ACTION_REBOOT action, the caller must have the SE_SHUTDOWN_NAME privilege. For more information, see
            Running with Special Privileges.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_FAILURE_ACTIONS_FLAG">
      <summary>
            The lpInfo parameter is a pointer to a SERVICE_FAILURE_ACTIONS_FLAG structure.
            <para><c>Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_PREFERRED_NODE">
      <summary>
            The lpInfo parameter is a pointer to a SERVICE_PREFERRED_NODE_INFO structure.
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_PRESHUTDOWN_INFO">
      <summary>
            The lpInfo parameter is a pointer to a SERVICE_PRESHUTDOWN_INFO structure.
            <para><c>Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO">
      <summary>
            The lpInfo parameter is a pointer to a SERVICE_REQUIRED_PRIVILEGES_INFO structure.
            <para><c>Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_SERVICE_SID_INFO">
      <summary>The lpInfo parameter is a pointer to a SERVICE_SID_INFO structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_TRIGGER_INFO">
      <summary>
            The lpInfo parameter is a pointer to a SERVICE_TRIGGER_INFO structure. This value is not supported by the ANSI version of ChangeServiceConfig2.
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported until Windows Server 2008 R2.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceConfigOption.SERVICE_CONFIG_LAUNCH_PROTECTED">
      <summary>
        <para>The lpInfo parameter is a pointer a SERVICE_LAUNCH_P/// ROTECTED_INFO structure.</para>
        <note>This value is supported starting with Windows 8.1.</note>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ServiceErrorControlType">
      <summary>
            Used by the <see cref="M:Vanara.PInvoke.AdvApi32.ChangeServiceConfig(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceTypes,Vanara.PInvoke.AdvApi32.ServiceStartType,Vanara.PInvoke.AdvApi32.ServiceErrorControlType,System.String,System.String,System.IntPtr,System.Char[],System.String,System.String,System.String)" /> function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceErrorControlType.SERVICE_NO_CHANGE">
      <summary>Makes no change for this setting.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceErrorControlType.SERVICE_ERROR_IGNORE">
      <summary>The startup program ignores the error and continues the startup operation.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceErrorControlType.SERVICE_ERROR_NORMAL">
      <summary>The startup program logs the error in the event log but continues the startup operation.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceErrorControlType.SERVICE_ERROR_SEVERE">
      <summary>
            The startup program logs the error in the event log. If the last-known-good configuration is being started, the startup operation continues.
            Otherwise, the system is restarted with the last-known-good configuration.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceErrorControlType.SERVICE_ERROR_CRITICAL">
      <summary>
            The startup program logs the error in the event log, if possible. If the last-known-good configuration is being started, the startup operation
            fails. Otherwise, the system is restarted with the last-known good configuration.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ServiceStartType">
      <summary>
            Used by the <see cref="M:Vanara.PInvoke.AdvApi32.ChangeServiceConfig(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceTypes,Vanara.PInvoke.AdvApi32.ServiceStartType,Vanara.PInvoke.AdvApi32.ServiceErrorControlType,System.String,System.String,System.IntPtr,System.Char[],System.String,System.String,System.String)" /> function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceStartType.SERVICE_NO_CHANGE">
      <summary>Makes no change for this setting.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceStartType.SERVICE_BOOT_START">
      <summary>A device driver started by the system loader. This value is valid only for driver services.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceStartType.SERVICE_SYSTEM_START">
      <summary>A device driver started by the IoInitSystem function. This value is valid only for driver services.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceStartType.SERVICE_AUTO_START">
      <summary>A service started automatically by the service control manager during system startup.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceStartType.SERVICE_DEMAND_START">
      <summary>A service started by the service control manager when a process calls the StartService function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceStartType.SERVICE_DISABLED">
      <summary>A service that cannot be started. Attempts to start the service result in the error code ERROR_SERVICE_DISABLED.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ServiceTypes">
      <summary>
            Used by the <see cref="M:Vanara.PInvoke.AdvApi32.ChangeServiceConfig(System.IntPtr,Vanara.PInvoke.AdvApi32.ServiceTypes,Vanara.PInvoke.AdvApi32.ServiceStartType,Vanara.PInvoke.AdvApi32.ServiceErrorControlType,System.String,System.String,System.IntPtr,System.Char[],System.String,System.String,System.String)" /> function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_NO_CHANGE">
      <summary>Makes no change for this setting.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_KERNEL_DRIVER">
      <summary>Driver service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_FILE_SYSTEM_DRIVER">
      <summary>File system driver service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_ADAPTER">
      <summary>Reserved</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_RECOGNIZER_DRIVER">
      <summary>Reserved</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_DRIVER">
      <summary>Combination of SERVICE_KERNEL_DRIVER | SERVICE_FILE_SYSTEM_DRIVER | SERVICE_RECOGNIZER_DRIVER</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_WIN32_OWN_PROCESS">
      <summary>Service that runs in its own process.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_WIN32_SHARE_PROCESS">
      <summary>Service that shares a process with other services.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_WIN32">
      <summary>Combination of SERVICE_WIN32_OWN_PROCESS | SERVICE_WIN32_SHARE_PROCESS</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_USER_SERVICE">
      <summary>The service user service</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_USERSERVICE_INSTANCE">
      <summary>The service userservice instance</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_USER_SHARE_PROCESS">
      <summary>Combination of SERVICE_USER_SERVICE | SERVICE_WIN32_SHARE_PROCESS</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_USER_OWN_PROCESS">
      <summary>Combination of SERVICE_USER_SERVICE | SERVICE_WIN32_OWN_PROCESS</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_INTERACTIVE_PROCESS">
      <summary>The service can interact with the desktop.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_PKG_SERVICE">
      <summary>The service PKG service</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ServiceTypes.SERVICE_TYPE_ALL">
      <summary>Combination of all service types</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.ShutdownFlags">
      <summary>Flags used in the <see cref="!:Vanara.InitiateShutdown" /> function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_FORCE_OTHERS">
      <summary>
            All sessions are forcefully logged off. If this flag is not set and users other than the current user are logged on to the computer specified by
            the lpMachineName parameter, this function fails with a return value of ERROR_SHUTDOWN_USERS_LOGGED_ON.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_FORCE_SELF">
      <summary>
            Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session is shut down interactively, so
            a shutdown is not guaranteed even if the function returns successfully.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_RESTART">
      <summary>The computer is shut down and rebooted.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_POWEROFF">
      <summary>The computer is shut down and powered down.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_NOREBOOT">
      <summary>The computer is shut down but is not powered down or rebooted.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_GRACE_OVERRIDE">
      <summary>Overrides the grace period so that the computer is shut down immediately.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_INSTALL_UPDATES">
      <summary>The computer installs any updates before starting the shutdown.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_RESTARTAPPS">
      <summary>
            The system is rebooted using the ExitWindowsEx function with the EWX_RESTARTAPPS flag. This restarts any applications that have been registered
            for restart using the RegisterApplicationRestart function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_SKIP_SVC_PRESHUTDOWN">
      <summary></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_HYBRID">
      <summary>
            Beginning with InitiateShutdown running on Windows 8, you must include the SHUTDOWN_HYBRID flag with one or more of the flags in this table to
            specify options for the shutdown.
            <para>Beginning with Windows 8, InitiateShutdown always initiate a full system shutdown if the SHUTDOWN_HYBRID flag is absent.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_RESTART_BOOTOPTIONS">
      <summary></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_SOFT_REBOOT">
      <summary></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.ShutdownFlags.SHUTDOWN_MOBILE_UI">
      <summary></summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SID_AND_ATTRIBUTES">
      <summary>
            The SID_AND_ATTRIBUTES structure represents a security identifier (SID) and its attributes. SIDs are used to uniquely identify users or groups.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_AND_ATTRIBUTES.Attributes">
      <summary>
            Specifies attributes of the SID. This value contains up to 32 one-bit flags. Its meaning depends on the definition and use of the SID.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_AND_ATTRIBUTES.Sid">
      <summary>A pointer to a SID structure.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY">
      <summary>The SID_IDENTIFIER_AUTHORITY structure represents the top-level authority of a security identifier (SID).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_IDENTIFIER_AUTHORITY.Value">
      <summary>An array of 6 bytes specifying a SID's top-level authority.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.SID_NAME_USE">
      <summary>The SID_NAME_USE enumeration contains values that specify the type of a security identifier (SID).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeUser">
      <summary>A user SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeGroup">
      <summary>A group SID</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeDomain">
      <summary>A domain SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeAlias">
      <summary>An alias SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeWellKnownGroup">
      <summary>A SID for a well-known group.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeDeletedAccount">
      <summary>A SID for a deleted account.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeInvalid">
      <summary>A SID that is not valid.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeUnknown">
      <summary>A SID of unknown type/.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeComputer">
      <summary>A SID for a computer.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.SID_NAME_USE.SidTypeLabel">
      <summary>A mandatory integrity label SID.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION">
      <summary>The TOKEN_ACCESS_INFORMATION structure specifies all the information in a token that is necessary to perform an access check.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.AppContainerNumber">
      <summary>The app container number for the token or zero if this is not an app container token.<para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:</c> This member is not available.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.AuthenticationId">
      <summary>A LUID structure that specifies the token's identity.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.CapabilitiesHash">
      <summary>Pointer to a SID_AND_ATTRIBUTES_HASH structure that specifies a hash of the token's capability SIDs.<para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:</c> This member is not available.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.Flags">
      <summary>Reserved. Must be set to zero.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.ImpersonationLevel">
      <summary>A value of the SECURITY_IMPERSONATION_LEVEL enumeration that specifies the token's impersonation level.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.MandatoryPolicy">
      <summary>A TOKEN_MANDATORY_POLICY structure that specifies the token's mandatory integrity policy.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.PackageSid">
      <summary>The app container SID or NULL if this is not an app container token.<para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:</c> This member is not available.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.Privileges">
      <summary>A pointer to a TOKEN_PRIVILEGES structure that specifies information about the token's privileges.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.RestrictedSidHash">
      <summary>A pointer to a SID_AND_ATTRIBUTES_HASH structure that specifies a hash of the token's restricted SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.SecurityAttributes">
      <summary>Reserved. Must be set to NULL.<para><c>Prior to Windows 10:</c> This member is not available.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.SidHash">
      <summary>A pointer to a SID_AND_ATTRIBUTES_HASH structure that specifies a hash of the token's security identifier (SID).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.TokenType">
      <summary>A value of the TOKEN_TYPE enumeration that specifies the token's type.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ACCESS_INFORMATION.TrustLevelSid">
      <summary>The protected process trust level of the token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_APPCONTAINER_INFORMATION">
      <summary>The TOKEN_APPCONTAINER_INFORMATION structure specifies all the information in a token that is necessary for an app container.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_APPCONTAINER_INFORMATION.TokenAppContainer">
      <summary>The security identifier (SID) of the app container.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_DEFAULT_DACL">
      <summary>The TOKEN_DEFAULT_DACL structure specifies a discretionary access control list (DACL).</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_DEFAULT_DACL.DefaultDacl">
      <summary>A pointer to an ACL structure assigned by default to any objects created by the user. The user is represented by the access token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_ELEVATION">
      <summary>The TOKEN_ELEVATION structure indicates whether a token has elevated privileges.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ELEVATION.TokenIsElevated">
      <summary>A nonzero value if the token has elevated privileges; otherwise, a zero value.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE">
      <summary>The TOKEN_ELEVATION_TYPE enumeration indicates the elevation type of token being queried by the GetTokenInformation function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE.TokenElevationTypeDefault">
      <summary>The token does not have a linked token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE.TokenElevationTypeFull">
      <summary>The token is an elevated token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE.TokenElevationTypeLimited">
      <summary>The token is a limited token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS">
      <summary>The TOKEN_GROUPS structure contains information about the group security identifiers (SIDs) in an access token.</summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS" /> struct.</summary>
      <param name="count">The number of groups.</param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS.GroupCount">
      <summary>Specifies the number of groups in the access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS.Groups">
      <summary>Specifies an array of SID_AND_ATTRIBUTES structures that contain a set of SIDs and corresponding attributes.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES">
      <summary>The TOKEN_GROUPS_AND_PRIVILEGES structure contains information about the group security identifiers (SIDs) and privileges in an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.AuthenticationId">
      <summary>Locally unique identifier (LUID) of the authenticator of the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeCount">
      <summary>Number of privileges.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeLength">
      <summary>Length, in bytes, needed to hold the privilege array.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.Privileges">
      <summary>Array of privileges.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidCount">
      <summary>Number of restricted SIDs.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidLength">
      <summary>Length, in bytes, required to hold all of the restricted SIDs.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSids">
      <summary>A pointer to an array of SID_AND_ATTRIBUTES structures that contain a set of restricted SIDs and corresponding attributes.
            <para>The Attributes members of the SID_AND_ATTRIBUTES structures can have the same values as those listed for the preceding Sids member.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.SidCount">
      <summary>Number of SIDs in the access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.SidLength">
      <summary>Length, in bytes, required to hold all of the user SIDs and the account SID for the group.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_GROUPS_AND_PRIVILEGES.Sids">
      <summary>A pointer to an array of SID_AND_ATTRIBUTES structures that contain a set of SIDs and corresponding attributes.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS">
      <summary>
            The TOKEN_INFORMATION_CLASS enumeration contains values that specify the type of information being assigned to or retrieved from an access token.
            <para>The GetTokenInformation function uses these values to indicate the type of token information to retrieve.</para><para>The SetTokenInformation function uses these values to set the token information.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenUser">
      <summary>The buffer receives a TOKEN_USER structure that contains the user account of the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenGroups">
      <summary>The buffer receives a TOKEN_GROUPS structure that contains the group accounts associated with the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenPrivileges">
      <summary>The buffer receives a TOKEN_PRIVILEGES structure that contains the privileges of the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenOwner">
      <summary>The buffer receives a TOKEN_OWNER structure that contains the default owner security identifier (SID) for newly created objects.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenPrimaryGroup">
      <summary>The buffer receives a TOKEN_PRIMARY_GROUP structure that contains the default primary group SID for newly created objects.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenDefaultDacl">
      <summary>The buffer receives a TOKEN_DEFAULT_DACL structure that contains the default DACL for newly created objects.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenSource">
      <summary>
            The buffer receives a TOKEN_SOURCE structure that contains the source of the token. TOKEN_QUERY_SOURCE access is needed to retrieve this information.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenType">
      <summary>The buffer receives a TOKEN_TYPE value that indicates whether the token is a primary or impersonation token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenImpersonationLevel">
      <summary>
            The buffer receives a SECURITY_IMPERSONATION_LEVEL value that indicates the impersonation level of the token. If the access token is not an
            impersonation token, the function fails.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenStatistics">
      <summary>The buffer receives a TOKEN_STATISTICS structure that contains various token statistics.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenRestrictedSids">
      <summary>The buffer receives a TOKEN_GROUPS structure that contains the list of restricting SIDs in a restricted token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenSessionId">
      <summary>
            The buffer receives a DWORD value that indicates the Terminal Services session identifier that is associated with the token.
            <para>If the token is associated with the terminal server client session, the session identifier is nonzero.</para><para>Windows Server 2003 and Windows XP: If the token is associated with the terminal server console session, the session identifier is zero.</para><para>In a non-Terminal Services environment, the session identifier is zero.</para><para>
            If TokenSessionId is set with SetTokenInformation, the application must have the Act As Part Of the Operating System privilege, and the
            application must be enabled to set the session ID in a token.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenGroupsAndPrivileges">
      <summary>
            The buffer receives a TOKEN_GROUPS_AND_PRIVILEGES structure that contains the user SID, the group accounts, the restricted SIDs, and the
            authentication ID associated with the token.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenSessionReference">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenSandBoxInert">
      <summary>The buffer receives a DWORD value that is nonzero if the token includes the SANDBOX_INERT flag.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenAuditPolicy">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenOrigin">
      <summary>
            The buffer receives a TOKEN_ORIGIN value.
            <para>
            If the token resulted from a logon that used explicit credentials, such as passing a name, domain, and password to the LogonUser function, then
            the TOKEN_ORIGIN structure will contain the ID of the logon session that created it.
            </para><para>
            If the token resulted from network authentication, such as a call to AcceptSecurityContext or a call to LogonUser with dwLogonType set to
            LOGON32_LOGON_NETWORK or LOGON32_LOGON_NETWORK_CLEARTEXT, then this value will be zero.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenElevationType">
      <summary>The buffer receives a TOKEN_ELEVATION_TYPE value that specifies the elevation level of the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenLinkedToken">
      <summary>The buffer receives a TOKEN_LINKED_TOKEN structure that contains a handle to another token that is linked to this token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenElevation">
      <summary>The buffer receives a TOKEN_ELEVATION structure that specifies whether the token is elevated.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenHasRestrictions">
      <summary>The buffer receives a DWORD value that is nonzero if the token has ever been filtered.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenAccessInformation">
      <summary>The buffer receives a TOKEN_ACCESS_INFORMATION structure that specifies security information contained in the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenVirtualizationAllowed">
      <summary>The buffer receives a DWORD value that is nonzero if virtualization is allowed for the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenVirtualizationEnabled">
      <summary>The buffer receives a DWORD value that is nonzero if virtualization is enabled for the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenIntegrityLevel">
      <summary>The buffer receives a TOKEN_MANDATORY_LABEL structure that specifies the token's integrity level.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenUIAccess">
      <summary>The buffer receives a DWORD value that is nonzero if the token has the UIAccess flag set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenMandatoryPolicy">
      <summary>The buffer receives a TOKEN_MANDATORY_POLICY structure that specifies the token's mandatory integrity policy.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenLogonSid">
      <summary>The buffer receives a TOKEN_GROUPS structure that specifies the token's logon SID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenIsAppContainer">
      <summary>
            The buffer receives a DWORD value that is nonzero if the token is an application container token. Any callers who check the TokenIsAppContainer
            and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the current token is not an
            application container but is an identity level token, you should return AccessDenied.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenCapabilities">
      <summary>The buffer receives a TOKEN_GROUPS structure that contains the capabilities associated with the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenAppContainerSid">
      <summary>
            The buffer receives a TOKEN_APPCONTAINER_INFORMATION structure that contains the AppContainerSid associated with the token. If the token is not
            associated with an application container, the TokenAppContainer member of the TOKEN_APPCONTAINER_INFORMATION structure points to NULL.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenAppContainerNumber">
      <summary>
            The buffer receives a DWORD value that includes the application container number for the token. For tokens that are not application container
            tokens, this value is zero.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenUserClaimAttributes">
      <summary>The buffer receives a CLAIM_SECURITY_ATTRIBUTES_INFORMATION structure that contains the user claims associated with the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenDeviceClaimAttributes">
      <summary>The buffer receives a CLAIM_SECURITY_ATTRIBUTES_INFORMATION structure that contains the device claims associated with the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenRestrictedUserClaimAttributes">
      <summary>This value is reserved.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceClaimAttributes">
      <summary>This value is reserved.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenDeviceGroups">
      <summary>The buffer receives a TOKEN_GROUPS structure that contains the device groups that are associated with the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceGroups">
      <summary>The buffer receives a TOKEN_GROUPS structure that contains the restricted device groups that are associated with the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenSecurityAttributes">
      <summary>This value is reserved.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenIsRestricted">
      <summary>This value is reserved.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_LINKED_TOKEN">
      <summary>The TOKEN_LINKED_TOKEN structure contains a handle to a token. This token is linked to the token being queried by the GetTokenInformation function or set by the SetTokenInformation function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_LINKED_TOKEN.LinkedToken">
      <summary>A handle to the linked token. When you have finished using the handle, close it by calling the CloseHandle function.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_MANDATORY_LABEL">
      <summary>The TOKEN_MANDATORY_LABEL structure specifies the mandatory integrity level for a token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_MANDATORY_LABEL.Label">
      <summary>A SID_AND_ATTRIBUTES structure that specifies the mandatory integrity level of the token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_MANDATORY_POLICY">
      <summary>The TOKEN_MANDATORY_POLICY structure specifies the mandatory integrity policy for a token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_MANDATORY_POLICY.Policy">
      <summary>The mandatory integrity access policy for the associated token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_ORIGIN">
      <summary>The TOKEN_ORIGIN structure contains information about the origin of the logon session. This structure is used by the GetTokenInformation function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_ORIGIN.OriginatingLogonSession">
      <summary>Locally unique identifier (LUID) for the logon session. If the token passed to GetTokenInformation resulted from a logon using explicit credentials, such as passing name, domain, and password to the LogonUser function, then this member will contain the ID of the logon session that created it. If the token resulted from network authentication, such as a call to AcceptSecurityContext, or a call to LogonUser with dwLogonType set to LOGON32_LOGON_NETWORK or LOGON32_LOGON_NETWORK_CLEARTEXT, then this member will be zero.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_OWNER">
      <summary>The TOKEN_OWNER structure contains the default owner security identifier (SID) that will be applied to newly created objects.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_OWNER.Owner">
      <summary>A pointer to a SID structure representing a user who will become the owner of any objects created by a process using this access token. The SID must be one of the user or group SIDs already in the token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_PRIMARY_GROUP">
      <summary>The TOKEN_PRIMARY_GROUP structure specifies a group security identifier (SID) for an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_PRIMARY_GROUP.PrimaryGroup">
      <summary>A pointer to a SID structure representing a group that will become the primary group of any objects created by a process using this access token. The SID must be one of the group SIDs already in the token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_SOURCE">
      <summary>The TOKEN_SOURCE structure identifies the source of an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_SOURCE.SourceIdentifier">
      <summary>Specifies a locally unique identifier (LUID) provided by the source component named by the SourceName member. This value aids the source component in relating context blocks, such as session-control structures, to the token. This value is typically, but not necessarily, an LUID.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_SOURCE.SourceName">
      <summary>Specifies an 8-byte character string used to identify the source of an access token. This is used to distinguish between such sources as Session Manager, LAN Manager, and RPC Server. A string, rather than a constant, is used to identify the source so users and developers can make extensions to the system, such as by adding other networks, that act as the source of access tokens.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS">
      <summary>
            The TOKEN_STATISTICS structure contains information about an access token. An application can retrieve this information by calling the
            GetTokenInformation function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.AuthenticationId">
      <summary>Specifies an LUID assigned to the session this token represents. There can be many tokens representing a single logon session.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.DynamicAvailable">
      <summary>Specifies the portion of memory allocated for storing default protection and a primary group identifier not already in use. This value is returned as a count of free bytes.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.DynamicCharged">
      <summary>Specifies the amount, in bytes, of memory allocated for storing default protection and a primary group identifier.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.ExpirationTime">
      <summary>Specifies the time at which this token expires. Expiration times for access tokens are not currently supported.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.GroupCount">
      <summary>Specifies the number of supplemental group security identifiers (SIDs) included in the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.ImpersonationLevel">
      <summary>Specifies a SECURITY_IMPERSONATION_LEVEL enumeration type indicating the impersonation level of the token. This member is valid only if the TokenType is TokenImpersonation.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.ModifiedId">
      <summary>Specifies an LUID that changes each time the token is modified. An application can use this value as a test of whether a security context has changed since it was last used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.PrivilegeCount">
      <summary>Specifies the number of privileges included in the token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.TokenId">
      <summary>Specifies a locally unique identifier (LUID) that identifies this instance of the token object.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_STATISTICS.TokenType">
      <summary>Specifies a TOKEN_TYPE enumeration type indicating whether the token is a primary or impersonation token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_TYPE">
      <summary>The TOKEN_TYPE enumeration contains values that differentiate between a primary token and an impersonation token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_TYPE.TokenPrimary">
      <summary>Indicates a primary token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_TYPE.TokenImpersonation">
      <summary>Indicates an impersonation token.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TOKEN_USER">
      <summary>The TOKEN_USER structure identifies the user associated with an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TOKEN_USER.User">
      <summary>Specifies a SID_AND_ATTRIBUTES structure representing the user associated with the access token. There are currently no attributes defined for user security identifiers (SIDs).</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TokenAccess">
      <summary>Token access flags.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_ASSIGN_PRIMARY">
      <summary>Required to attach a primary token to a process. The SE_ASSIGNPRIMARYTOKEN_NAME privilege is also required to accomplish this task.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_DUPLICATE">
      <summary>Required to duplicate an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_IMPERSONATE">
      <summary>Required to attach an impersonation access token to a process.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_QUERY">
      <summary>Required to query an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_QUERY_SOURCE">
      <summary>Required to query the source of an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_ADJUST_PRIVILEGES">
      <summary>Required to enable or disable the privileges in an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_ADJUST_GROUPS">
      <summary>Required to adjust the attributes of the groups in an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_ADJUST_DEFAULT">
      <summary>Required to change the default owner, primary group, or DACL of an access token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_ADJUST_SESSIONID">
      <summary>Required to adjust the session ID of an access token. The SE_TCB_NAME privilege is required.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_ALL_ACCESS_P">
      <summary>The token all access p</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_ALL_ACCESS">
      <summary>Combines all possible access rights for a token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_READ">
      <summary>Combines STANDARD_RIGHTS_READ and TOKEN_QUERY.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_WRITE">
      <summary>Combines STANDARD_RIGHTS_WRITE, TOKEN_ADJUST_PRIVILEGES, TOKEN_ADJUST_GROUPS, and TOKEN_ADJUST_DEFAULT.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TokenAccess.TOKEN_EXECUTE">
      <summary>Combines STANDARD_RIGHTS_EXECUTE and TOKEN_IMPERSONATE.</summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TRUSTEE">
      <summary>
            The TRUSTEE structure identifies the user account, group account, or logon session to which an access control entry (ACE) applies. The structure can
            use a name or a security identifier (SID) to identify the trustee.
            <para>
            Access control functions, such as SetEntriesInAcl and GetExplicitEntriesFromAcl, use this structure to identify the logon account associated with the
            access control or audit control information in an EXPLICIT_ACCESS structure.
            </para></summary>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.TRUSTEE.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.TRUSTEE" /> class.</summary>
      <param name="name">The name of the trustee in one of the following formats:
            <list type="bullet"><listItem>A fully qualified name, such as "g:\remotedir\abc".</listItem><listItem>A domain account, such as "domain1\xyz".</listItem><listItem>One of the predefined group names, such as "EVERYONE" or "GUEST".</listItem><listItem>One of the following special names: "CREATOR GROUP", "CREATOR OWNER", "CURRENT_USER".</listItem></list></param>
    </member>
    <member name="M:Vanara.PInvoke.AdvApi32.TRUSTEE.#ctor(Vanara.PInvoke.AdvApi32.PSID)">
      <summary>Initializes a new instance of the <see cref="!:Vanara.PInvoke.TRUSTEE" /> class.</summary>
      <param name="sid">The sid.</param>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE.MultipleTrusteeOperation">
      <summary>A value of the MULTIPLE_TRUSTEE_OPERATION enumeration type. Currently, this member must be NO_MULTIPLE_TRUSTEE.</summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.TRUSTEE.Name">
      <summary>Gets or sets the name of the trustee.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE.pMultipleTrustee">
      <summary>
            A pointer to a TRUSTEE structure that identifies a server account that can impersonate the user identified by the ptstrName member. This member
            is not currently supported and must be NULL.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE.ptstrName">
      <summary>
            A pointer to a buffer that identifies the trustee and, optionally, contains information about object-specific ACEs. The type of data depends on
            the value of the TrusteeForm member. This member can be one of the following values.
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>TRUSTEE_IS_NAME</term><description>A pointer to a null-terminated string that contains the name of the trustee.</description></item><item><term>TRUSTEE_IS_OBJECTS_AND_NAME</term><description>
            A pointer to an OBJECTS_AND_NAME structure that contains the name of the trustee and the names of the object types in an object-specific ACE.
            </description></item><item><term>TRUSTEE_IS_OBJECTS_AND_SID</term><description>
            A pointer to an OBJECTS_AND_SID structure that contains the SID of the trustee and the GUIDs of the object types in an object-specific ACE.
            </description></item><item><term>TRUSTEE_IS_SID</term><description>Pointer to the SID of the trustee.</description></item></list></summary>
    </member>
    <member name="P:Vanara.PInvoke.AdvApi32.TRUSTEE.Sid">
      <summary>Gets or sets the sid for the trustee</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE.TrusteeForm">
      <summary>A value from the TRUSTEE_FORM enumeration type that indicates the type of data pointed to by the ptstrName member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE.TrusteeType">
      <summary>
            A value from the TRUSTEE_TYPE enumeration type that indicates whether the trustee is a user account, a group account, or an unknown account type.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TRUSTEE_FORM">
      <summary>
            The TRUSTEE_FORM enumeration contains values that indicate the type of data pointed to by the ptstrName member of the <see cref="T:Vanara.PInvoke.AdvApi32.TRUSTEE" /> structure.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_FORM.TRUSTEE_IS_SID">
      <summary>The ptstrName member is a pointer to a security identifier (SID) that identifies the trustee.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_FORM.TRUSTEE_IS_NAME">
      <summary>The ptstrName member is a pointer to a null-terminated string that identifies the trustee.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_FORM.TRUSTEE_BAD_FORM">
      <summary>Indicates a trustee form that is not valid.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_FORM.TRUSTEE_IS_OBJECTS_AND_SID">
      <summary>
            The ptstrName member is a pointer to an OBJECTS_AND_SID structure that contains the SID of the trustee and the GUIDs of the object types in an
            object-specific access control entry (ACE).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_FORM.TRUSTEE_IS_OBJECTS_AND_NAME">
      <summary>
            The ptstrName member is a pointer to an OBJECTS_AND_NAME structure that contains the name of the trustee and the names of the object types in an
            object-specific ACE.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE">
      <summary>The TRUSTEE_TYPE enumeration contains values that indicate the type of trustee identified by a <see cref="T:Vanara.PInvoke.AdvApi32.TRUSTEE" /> structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_UNKNOWN">
      <summary>The trustee type is unknown, but it may be valid.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_USER">
      <summary>Indicates a user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_GROUP">
      <summary>Indicates a group.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_DOMAIN">
      <summary>Indicates a domain.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_ALIAS">
      <summary>Indicates an alias.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_WELL_KNOWN_GROUP">
      <summary>Indicates a well-known group.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_DELETED">
      <summary>Indicates a deleted account.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_INVALID">
      <summary>Indicates a trustee type that is not valid.</summary>
    </member>
    <member name="F:Vanara.PInvoke.AdvApi32.TRUSTEE_TYPE.TRUSTEE_IS_COMPUTER">
      <summary>Indicates a computer.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz">
      <summary>Platform invokable enumerated types, constants and functions from authz.h</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzAccessCheck(Vanara.PInvoke.Authz.AuthzAccessCheckFlags,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST@,Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE,Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor,Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR[],System.UInt32,Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY,System.IntPtr)">
      <summary>
            The AuthzAccessCheck function determines which access bits can be granted to a client for a given set of security descriptors. The AUTHZ_ACCESS_REPLY
            structure returns an array of granted access masks and error status. Optionally, access masks that will always be granted can be cached, and a handle
            to cached values is returned.
            </summary>
      <param name="flags">
            A DWORD value that specifies how the security descriptor is copied. This parameter can be one of the following values.
            <para>Starting with Windows 8 and Windows Server 2012, when you call this function on a remote context handle, the upper 16 bits must be zero.</para></param>
      <param name="hAuthzClientContext">
            A handle to a structure that represents the client.
            <para>Starting with Windows 8 and Windows Server 2012, the client context can be local or remote.</para></param>
      <param name="pRequest">
            A pointer to an AUTHZ_ACCESS_REQUEST structure that specifies the desired access mask, principal self security identifier (SID), and the object type
            list structure, if it exists.
            </param>
      <param name="AuditEvent">
            A structure that contains object-specific audit information. When the value of this parameter is not null, an audit is automatically requested.
            Static audit information is read from the resource manager structure.
            <para>
            Starting with Windows 8 and Windows Server 2012, when you use this function with a remote context handle, the value of the parameter must be NULL.
            </para></param>
      <param name="pSecurityDescriptor">
            A pointer to a SECURITY_DESCRIPTOR structure to be used for access checks. The owner SID for the object is picked from this security descriptor. A
            NULL discretionary access control list (DACL) in this security descriptor represents a NULL DACL for the entire object. Make sure the security
            descriptor contains OWNER and DACL information, or an error code 87 or "invalid parameter" message will be generated. <note type="important"><c>Important</c> NULL DACLs permit all types of access to all users; therefore, do not use NULL DACLs. For information about
            creating a DACL, see Creating a DACL.</note><para>A NULL system access control list (SACL) in this security descriptor is treated the same way as an empty SACL.</para></param>
      <param name="OptionalSecurityDescriptorArray">
            An array of SECURITY_DESCRIPTOR structures. NULL access control lists (ACLs) in these security descriptors are treated as empty ACLs. The ACL for the
            entire object is the logical concatenation of all of the ACLs.
            </param>
      <param name="OptionalSecurityDescriptorCount">The number of security descriptors not including the primary security descriptor.</param>
      <param name="pReply">
            A pointer to an AUTHZ_ACCESS_REPLY structure that contains the results of the access check. Before calling the AuthzAccessCheck function, an
            application must allocate memory for the GrantedAccessMask and SaclEvaluationResults members of the AUTHZ_ACCESS_REPLY structure referenced by pReply.
            </param>
      <param name="phAccessCheckResults">
            A pointer to return a handle to the cached results of the access check. When this parameter value is not null, the results of this access check call
            will be cached. This results in a MAXIMUM_ALLOWED check.
            <para>
            Starting with Windows 8 and Windows Server 2012, when you use this function with a remote context handle, the value of the parameter must be NULL.
            </para></param>
      <returns>
            If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzAccessCheck(Vanara.PInvoke.Authz.AuthzAccessCheckFlags,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST@,Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE,Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor,Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR[],System.UInt32,Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY,Vanara.PInvoke.Authz.SafeAUTHZ_ACCESS_CHECK_RESULTS_HANDLE@)">
      <summary>
            The AuthzAccessCheck function determines which access bits can be granted to a client for a given set of security descriptors. The AUTHZ_ACCESS_REPLY
            structure returns an array of granted access masks and error status. Optionally, access masks that will always be granted can be cached, and a handle
            to cached values is returned.
            </summary>
      <param name="flags">
            A DWORD value that specifies how the security descriptor is copied. This parameter can be one of the following values.
            <para>Starting with Windows 8 and Windows Server 2012, when you call this function on a remote context handle, the upper 16 bits must be zero.</para></param>
      <param name="hAuthzClientContext">
            A handle to a structure that represents the client.
            <para>Starting with Windows 8 and Windows Server 2012, the client context can be local or remote.</para></param>
      <param name="pRequest">
            A pointer to an AUTHZ_ACCESS_REQUEST structure that specifies the desired access mask, principal self security identifier (SID), and the object type
            list structure, if it exists.
            </param>
      <param name="AuditEvent">
            A structure that contains object-specific audit information. When the value of this parameter is not null, an audit is automatically requested.
            Static audit information is read from the resource manager structure.
            <para>
            Starting with Windows 8 and Windows Server 2012, when you use this function with a remote context handle, the value of the parameter must be NULL.
            </para></param>
      <param name="pSecurityDescriptor">
            A pointer to a SECURITY_DESCRIPTOR structure to be used for access checks. The owner SID for the object is picked from this security descriptor. A
            NULL discretionary access control list (DACL) in this security descriptor represents a NULL DACL for the entire object. Make sure the security
            descriptor contains OWNER and DACL information, or an error code 87 or "invalid parameter" message will be generated. <note type="important"><c>Important</c> NULL DACLs permit all types of access to all users; therefore, do not use NULL DACLs. For information about
            creating a DACL, see Creating a DACL.</note><para>A NULL system access control list (SACL) in this security descriptor is treated the same way as an empty SACL.</para></param>
      <param name="OptionalSecurityDescriptorArray">
            An array of SECURITY_DESCRIPTOR structures. NULL access control lists (ACLs) in these security descriptors are treated as empty ACLs. The ACL for the
            entire object is the logical concatenation of all of the ACLs.
            </param>
      <param name="OptionalSecurityDescriptorCount">The number of security descriptors not including the primary security descriptor.</param>
      <param name="pReply">
            A pointer to an AUTHZ_ACCESS_REPLY structure that contains the results of the access check. Before calling the AuthzAccessCheck function, an
            application must allocate memory for the GrantedAccessMask and SaclEvaluationResults members of the AUTHZ_ACCESS_REPLY structure referenced by pReply.
            </param>
      <param name="phAccessCheckResults">
            A pointer to return a handle to the cached results of the access check. When this parameter value is not null, the results of this access check call
            will be cached. This results in a MAXIMUM_ALLOWED check.
            <para>
            Starting with Windows 8 and Windows Server 2012, when you use this function with a remote context handle, the value of the parameter must be NULL.
            </para></param>
      <returns>
            If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzFreeAuditEvent(System.IntPtr)">
      <summary>The AuthzFreeAuditEvent function frees the structure allocated by the AuthzInitializeObjectAccessAuditEvent function.</summary>
      <param name="pAuditEventInfo">A pointer to the AUTHZ_AUDIT_EVENT_HANDLE structure to be freed.</param>
      <returns>
            If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzFreeContext(System.IntPtr)">
      <summary>
            The AuthzFreeContext function frees all structures and memory associated with the client context. The list of handles for a client is freed in this call.
            <para>
            Starting with Windows Server 2012 and Windows 8, this function also frees the memory associated with device groups, user claims, and device claims.
            </para></summary>
      <param name="AuthzClientContext">The AUTHZ_CLIENT_CONTEXT_HANDLE structure to be freed.</param>
      <returns>
            If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzFreeHandle(System.IntPtr)">
      <summary>The AuthzFreeHandle function finds and deletes a handle from the handle list.</summary>
      <param name="AuthzHandle">A handle to be freed.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzFreeResourceManager(System.IntPtr)">
      <summary>
            The AuthzFreeResourceManager function frees a resource manager object.
            </summary>
      <param name="AuthzResourceManager">The AUTHZ_RESOURCE_MANAGER_HANDLE to be freed.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzGetInformationFromContext(Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS,System.UInt32,System.UInt32@,System.IntPtr)">
      <summary>
            The AuthzGetInformationFromContext function returns information about an Authz context.
            <para>Starting with Windows Server 2012 and Windows 8, device groups are returned as a TOKEN_GROUPS structure. User and device claims are returned as an AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure.</para></summary>
      <param name="hAuthzClientContext">A handle to the context.</param>
      <param name="InfoClass">A value of the AUTHZ_CONTEXT_INFORMATION_CLASS enumeration that indicates the type of information to be returned.</param>
      <param name="BufferSize">Size of the buffer passed.</param>
      <param name="pSizeRequired">A pointer to a DWORD of the buffer size required for returning the structure.</param>
      <param name="Buffer">A pointer to memory that can receive the information. The structure returned depends on the information requested in the InfoClass parameter</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzInitializeCompoundContext(Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE@)">
      <summary>
            The AuthzInitializeCompoundContext function creates a user-mode context from the given user and device security contexts.
            </summary>
      <param name="UserContext">User context to create the compound context from.</param>
      <param name="DeviceContext">Device context to create the compound context from. This must not be the same as the user context.</param>
      <param name="phCompoundContext">Used to return the resultant compound context.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzInitializeContextFromSid(Vanara.PInvoke.Authz.AuthzContextFlags,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE,System.IntPtr,Vanara.PInvoke.AdvApi32.LUID,System.IntPtr,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE@)">
      <summary>
            The AuthzInitializeContextFromSid function creates a user-mode client context from a user security identifier (SID). Domain SIDs retrieve token group attributes from the Active Directory.
            <note>Note  If possible, call the AuthzInitializeContextFromToken function instead of AuthzInitializeContextFromSid. For more information, see Remarks.</note></summary>
      <param name="Flags">The following flags are defined.
            <para>Starting with Windows 8 and Windows Server 2012, when you call this function on a remote context handle, the upper 16 bits must be zero.</para></param>
      <param name="userSid">The SID of the user for whom a client context will be created. This must be a valid user or computer account unless the AUTHZ_SKIP_TOKEN_GROUPS flag is used.</param>
      <param name="AuthzResourceManager">A handle to the resource manager creating this client context. This handle is stored in the client context structure.
            <para>Starting with Windows 8 and Windows Server 2012, the resource manager can be local or remote and is obtained by calling the AuthzInitializeRemoteResourceManager function.</para></param>
      <param name="pExpirationTime">Pointer to a 64-bit integer for expiration date and time of the token. If no value is passed, the token never expires. Expiration time is not currently enforced.</param>
      <param name="Identitifier">Specific identifier of the resource manager. This parameter is not currently used.</param>
      <param name="DynamicGroupArgs">A pointer to parameters to be passed to the callback function that computes dynamic groups. This parameter can be NULL if no dynamic parameters are passed to the callback function.
            <para>Starting with Windows 8 and Windows Server 2012, this parameter must be NULL if the resource manager is remote. Otherwise, ERROR_NOT_SUPPORTED will be set.</para></param>
      <param name="pAuthzClientContext">A pointer to the handle to the client context that the AuthzInitializeContextFromSid function creates. When you have finished using the handle, free it by calling the AuthzFreeContext function.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzInitializeContextFromToken(System.UInt32,Vanara.PInvoke.AdvApi32.SafeTokenHandle,Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE,System.IntPtr,Vanara.PInvoke.AdvApi32.LUID,System.IntPtr,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE@)">
      <summary>The AuthzInitializeContextFromToken function initializes a client authorization context from a kernel token. The kernel token must have been opened for TOKEN_QUERY.
            <para>Starting with Windows Server 2012 and Windows 8, this function can also copy device groups, user claims, and device claims.</para></summary>
      <param name="Flags">Reserved for future use.</param>
      <param name="TokenHandle">A handle to the client token used to initialize the pAuthzClientContext parameter. The token must have been opened with TOKEN_QUERY access.</param>
      <param name="hAuthzResourceManager">A handle to the resource manager that created this client context. This handle is stored in the client context structure.</param>
      <param name="pExpirationTime">Expiration date and time of the token. If no value is passed, the token never expires. Expiration time is not currently enforced.</param>
      <param name="Identitifier">Identifier that is specific to the resource manager. This parameter is not currently used.</param>
      <param name="DynamicGroupArgs">A pointer to parameters to be passed to the callback function that computes dynamic groups.</param>
      <param name="phAuthzClientContext">A pointer to the AuthzClientContext handle returned. Call AuthzFreeContext when done with the client context.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzInitializeObjectAccessAuditEvent(Vanara.PInvoke.Authz.AuthzAuditEventFlags,System.IntPtr,System.String,System.String,System.String,System.String,Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE@,System.UInt32)">
      <summary>
            The AuthzInitializeObjectAccessAuditEvent function initializes auditing for an object.
            </summary>
      <param name="Flags">Modifies the audit.</param>
      <param name="hAuditEventType">Reserved. This parameter should be set to NULL.</param>
      <param name="szOperationType">String that indicates the operation that is to be audited.</param>
      <param name="szObjectType">String that indicates the type of object being accessed.</param>
      <param name="szObjectName">String the indicates the name of the object being accessed.</param>
      <param name="szAdditionalInfo">String, defined by the Resource Manager, for additional audit information.</param>
      <param name="phAuditEvent">Pointer that receives an AUTHZ_AUDIT_EVENT_HANDLE structure.</param>
      <param name="dwAdditionalParamCount">Must be set to zero.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzInitializeResourceManager(Vanara.PInvoke.Authz.AuthzResourceManagerFlags,Vanara.PInvoke.Authz.AuthzAccessCheckCallback,Vanara.PInvoke.Authz.AuthzComputeGroupsCallback,Vanara.PInvoke.Authz.AuthzFreeGroupsCallback,System.String,Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE@)">
      <summary>
            The AuthzInitializeResourceManager function uses Authz to verify that clients have access to various resources.
            </summary>
      <param name="flags">A DWORD value that defines how the resource manager is initialized.
            <para>AUTHZ_RM_FLAG_NO_AUDIT and AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION can be bitwise-combined.</para></param>
      <param name="pfnAccessCheck">A pointer to the AuthzAccessCheckCallback callback function that the resource manager calls each time it encounters a callback access control entry (ACE) during access control list (ACL) evaluation in AuthzAccessCheck or AuthzCachedAccessCheck. This parameter can be NULL if no access check callback function is used.</param>
      <param name="pfnComputeDynamicGroups">A pointer to the AuthzComputeGroupsCallback callback function called by the resource manager during initialization of an AuthzClientContext handle. This parameter can be NULL if no callback function is used to compute dynamic groups.</param>
      <param name="pfnFreeDynamicGroups">A pointer to the AuthzFreeGroupsCallback callback function called by the resource manager to free security identifier (SID) attribute arrays allocated by the compute dynamic groups callback. This parameter can be NULL if no callback function is used to compute dynamic groups.</param>
      <param name="name">A string that identifies the resource manager. This parameter can be NULL if the resource manager does not need a name.</param>
      <param name="rm">A pointer to the returned resource manager handle. When you have finished using the handle, free it by calling the AuthzFreeResourceManager function.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzModifyClaims(Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS,Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION[],Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION)">
      <summary>
            The AuthzModifyClaims function adds, deletes, or modifies user and device claims in the Authz client context.
            </summary>
      <param name="hAuthzClientContext">A handle to the client context to be modified.</param>
      <param name="ClaimClass">Type of information to be modified. The caller can specify AuthzContextInfoUserClaims or AuthzContextInfoDeviceClaims.</param>
      <param name="pClaimOperations">A pointer to an array of AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration values that specify the type of claim modification to make.</param>
      <param name="pClaims">A pointer to an AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that specifies the claims to modify.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzModifySecurityAttributes(Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION[],Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION)">
      <summary>
            The AuthzModifySids function adds, deletes, or modifies user and device groups in the Authz client context.
            </summary>
      <param name="hAuthzClientContext">A handle to the client context to be modified.</param>
      <param name="pOperations">A pointer to an array of AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration values that specify the types of modifications to make.
            <para>This array must have only one element if the value of that element is AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL. Otherwise, the array has the same number of elements as the pAttributes array.</para></param>
      <param name="pAttributes">A pointer to an AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that specifies the attributes to modify.</param>
      <returns>
            If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AuthzModifySids(Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS,Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION[],Vanara.PInvoke.AdvApi32.TOKEN_GROUPS@)">
      <summary>
            The AuthzModifySids function adds, deletes, or modifies user and device groups in the Authz client context.
            </summary>
      <param name="hAuthzClientContext">A handle to the client context to be modified.</param>
      <param name="SidClass">Type of information to be modified. The caller can specify AuthzContextInfoGroupsSids, AuthzContextInfoRestrictedSids, or AuthzContextInfoDeviceSids.</param>
      <param name="pSidOperations">A pointer to an array of AUTHZ_SID_OPERATION enumeration values that specify the group modifications to make.</param>
      <param name="pSids">A pointer to a TOKEN_GROUPS structure that specifies the groups to modify.</param>
      <returns>If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY">
      <summary>The AUTHZ_ACCESS_REPLY structure defines an access check reply.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY" /> struct.
            </summary>
      <param name="count">The count of array members in each of the three arrays.</param>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.Error">
      <summary>An array of results for each element of the array. Memory for this array is allocated by the application before calling AccessCheck.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.ErrorValues">
      <summary>Gets or sets the results for each element of the array. The length of this array must match the value in <see cref="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.ResultListLength" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.GrantedAccessMask">
      <summary>An array of granted access masks. Memory for this array is allocated by the application before calling AccessCheck.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.GrantedAccessMaskValues">
      <summary>Gets or sets the granted access mask values. The length of this array must match the value in <see cref="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.ResultListLength" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.ResultListLength">
      <summary>
            The number of elements in the GrantedAccessMask, SaclEvaluationResults, and Error arrays. This number matches the number of entries in the object
            type list structure used in the access check. If no object type is used to represent the object, then set ResultListLength to one.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.SaclEvaluationResults">
      <summary>
            An array of system access control list (SACL) evaluation results. Memory for this array is allocated by the application before calling
            AccessCheck. SACL evaluation will only be performed if auditing is requested.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.SaclEvaluationResultsValues">
      <summary>Gets or sets the system access control list (SACL) evaluation results values. The length of this array must match the value in <see cref="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY.ResultListLength" />.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST">
      <summary>
            The AUTHZ_ACCESS_REQUEST structure defines an access check request.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST" /> struct.
            </summary>
      <param name="access">The access.</param>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST.DesiredAccess">
      <summary>
            The type of access to test for.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST.ObjectTypeList">
      <summary>
            An array of OBJECT_TYPE_LIST structures in the object tree for the object. Set to NULL unless the application checks access at the property level.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST.ObjectTypeListLength">
      <summary>
            The number of elements in the ObjectTypeList array. This member is necessary only if the application checks access at the property level.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST.ObjectTypes">
      <summary>
            Gets or sets the object types.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST.OptionalArguments">
      <summary>
            A pointer to memory to pass to AuthzAccessCheckCallback when checking callback access control entries (ACEs).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST.PrincipalSelfSid">
      <summary>
            The security identifier (SID) to use for the principal self SID in the access control list (ACL).
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS">
      <summary>
            The AUTHZ_CONTEXT_INFORMATION_CLASS enumeration specifies the type of information to be retrieved from an existing AuthzClientContext. This
            enumeration is used by the AuthzGetInformationFromContext function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoUserSid">
      <summary>Retrieves a TOKEN_USER structure that contains a user security identifier (SID) and its attribute.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoGroupsSids">
      <summary>Retrieves a TOKEN_GROUPS structure that contains the group SIDs to which the user belongs and their attributes.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoRestrictedSids">
      <summary>Retrieves a TOKEN_GROUPS structure that contains the restricted group SIDs in the context and their attributes.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoPrivileges">
      <summary>Retrieves a TOKEN_PRIVILEGES structure that contains the privileges held by the user.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoExpirationTime">
      <summary>Retrieves the expiration time set on the context.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoServerContext">
      <summary>This constant is reserved. Do not use it.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoIdentifier">
      <summary>Retrieves an LUID structures used by the resource manager to identify the context.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoSource">
      <summary>This constant is reserved. Do not use it.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoAll">
      <summary>This constant is reserved. Do not use it.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoAuthenticationId">
      <summary>This constant is reserved. Do not use it.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoSecurityAttributes">
      <summary>
            Retrieves an AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that contains security attributes.
            <para><c>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoDeviceSids">
      <summary>
            Retrieves a TOKEN_GROUPS structure that contains device SIDs and their attributes.
            <para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoUserClaims">
      <summary>
            Retrieves a AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that contains user claims.
            <para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoDeviceClaims">
      <summary>
            Retrieves a AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that contains device claims.
            <para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoAppContainerSid">
      <summary>
            Retrieves a TOKEN_APPCONTAINER_INFORMATION structure that contains the app container SID.
            <para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_CONTEXT_INFORMATION_CLASS.AuthzContextInfoCapabilitySids">
      <summary>
            Retrieves a TOKEN_GROUPS structure that contains capability SIDs.
            <para><c>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:</c> This value is not supported.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE">
      <summary>Used by the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_INVALID">
      <summary>Invalid value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_INT64">
      <summary>The Values member refers to a security attribute that is of INT64 type.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_UINT64">
      <summary>The Values member refers to a security attribute that is of UINT64 type.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_STRING">
      <summary>The Values member refers to a security attribute that is of STRING type.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_FQBN">
      <summary>The Values member refers to a security attribute that is of AUTHZ_SECURITY_ATTRIBUTE_TYPE_FQBN type.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_SID">
      <summary>
            The Values member refers to a security attribute that is of AUTHZ_SECURITY_ATTRIBUTE_TYPE_SID type.
            <para><c>Windows Server 2008 R2 and Windows 7:</c> This value type is not available.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_BOOLEAN">
      <summary>
            The Values member refers to a security attribute that is of AUTHZ_SECURITY_ATTRIBUTE_TYPE_BOOLEAN type.
            <para><c>Windows Server 2008 R2 and Windows 7:</c> This value type is not available.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_DATATYPE.AUTHZ_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING">
      <summary>The Values member refers to a security attribute that is of AUTHZ_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING type.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FLAGS">
      <summary>Used by the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FLAGS.NONE">
      <summary>No flags specified.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FLAGS.AUTHZ_SECURITY_ATTRIBUTE_NON_INHERITABLE">
      <summary>This security attribute is not inherited across processes.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FLAGS.AUTHZ_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE">
      <summary>The value of the attribute is case sensitive. This flag is valid for values that contain string types.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE">
      <summary>The AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE structure specifies a fully qualified binary name value associated with a security attribute.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE.pName">
      <summary>A pointer to strings that specify the names of the publisher, the product, and the original binary file of the value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE.Version">
      <summary>The version number of the structure.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE">
      <summary>The AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE structure specifies an octet string value for a security attribute.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE.pValue">
      <summary>A pointer to the value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE.ValueLength">
      <summary>The length, in bytes, of the pValue member.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION">
      <summary>
            The AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration indicates the type of modification to be made to security attributes by a call to the AuthzModifySecurityAttributes function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION.AUTHZ_SECURITY_ATTRIBUTE_OPERATION_NONE">
      <summary>
            Do not perform any modification.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION.AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL">
      <summary>
            Delete all existing security attributes and their values in the token and replace them with the specified attributes and values.
            <para>If no new attributes are specified, all existing attributes and values are deleted.</para><para>This operation must be the only operation specified and can be specified only once in a single call to AuthzModifySecurityAttributes. If the operation is not specified as the first in the list of operations, the call to AuthzModifySecurityAttributes fails. If the operation is specified as the first in the array of operations performed, the rest of the operations are ignored.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION.AUTHZ_SECURITY_ATTRIBUTE_OPERATION_ADD">
      <summary>
            Add a new attribute or a new value to an existing attribute.
            <para>If the value specified for any attribute already exists for that attribute, the call to AuthzModifySecurityAttributes fails.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION.AUTHZ_SECURITY_ATTRIBUTE_OPERATION_DELETE">
      <summary>
            Delete the specified values of the specified attributes. If an attribute is specified without a value, that attribute is deleted.
            <para>If this operation results in an attribute that does not contain any values, that attribute is deleted.</para><para>If a value is specified that does not match an existing attribute, no modifications are performed and the call to AuthzModifySecurityAttributes fails.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OPERATION.AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE">
      <summary>
            The existing values of the specified security attributes are replaced by the specified new values.
            <para>If any of the specified attributes does not already exist, they are added.</para><para>When no value is specified for an attribute, that attribute is deleted. Otherwise, the operation is simply ignored and no failure is reported.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1">
      <summary>The AUTHZ_SECURITY_ATTRIBUTE_V1 structure defines a security attribute that can be associated with an authorization context.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.#ctor(System.String,System.Boolean[])">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> struct.
            </summary>
      <param name="name">The name.</param>
      <param name="values">The value.</param>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.#ctor(System.String,System.Int64[])">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> struct.
            </summary>
      <param name="name">The name.</param>
      <param name="values">The value.</param>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.#ctor(System.String,System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> struct.
            </summary>
      <param name="name">The name.</param>
      <param name="values">The value.</param>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.#ctor(System.String,System.UInt64[])">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> struct.
            </summary>
      <param name="name">The name.</param>
      <param name="values">The value.</param>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.#ctor(System.String,Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE[])">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> struct.
            </summary>
      <param name="name">The name.</param>
      <param name="values">The value.</param>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.#ctor(System.String,Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE[])">
      <summary>
            Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1" /> struct.
            </summary>
      <param name="name">The name.</param>
      <param name="values">The value.</param>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.Flags">
      <summary>A combination of one or more of the following values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.pName">
      <summary>A pointer to a name of a security attribute.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.Reserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.ValueCount">
      <summary>The number of values specified in the Values member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.Values">
      <summary>A pointer to the value.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1.ValueType">
      <summary>The data type of the values pointed to by the Values member.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1_Union">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1_Union</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1_Union.pFqbn">
      <summary>A pointer to one or more AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE structures.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1_Union.pInt64">
      <summary>A pointer to one or more numeric attribute values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1_Union.pOctetString">
      <summary>A pointer to one or more AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE structures.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1_Union.ppString">
      <summary>A pointer to one or more string attribute values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1_Union.pUInt64">
      <summary>A pointer to one or more numeric attribute values.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION">
      <summary>Specifies one or more security attributes.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.#ctor(Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1[])">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION</parameter>
          </include>
        </markup>
      </summary>
      <param name="attributes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>attributes</parameter>
            <parameter>M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.#ctor(Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTE_V1[])</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.AttributeCount">
      <summary>The number of attributes specified by the Attribute member.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.FromPtr(System.IntPtr)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.FromPtr(System.IntPtr)</parameter>
          </include>
        </markup>
      </summary>
      <param name="ptr">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ptr</parameter>
            <parameter>M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.FromPtr(System.IntPtr)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.FromPtr(System.IntPtr)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.pAttributeV1">
      <summary>An array of AUTHZ_SECURITY_ATTRIBUTE_V1 structures of the length of the AttributeCount member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.Reserved">
      <summary>Reserved. Do not use.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION.Version">
      <summary>The version of this structure. Currently the only value supported is 1.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION">
      <summary>
            The AUTHZ_SID_OPERATION enumeration indicates the type of SID operations that can be made by a call to the AuthzModifySids function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION.AUTHZ_SID_OPERATION_NONE">
      <summary>
            Do not modify anything.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION.AUTHZ_SID_OPERATION_REPLACE_ALL">
      <summary>
            Deletes all existing SIDs and replaces them with the specified SIDs. If the replacement SIDs are not specified, all existing SIDs are deleted. This operation can be specified only once and must be the only operation specified.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION.AUTHZ_SID_OPERATION_ADD">
      <summary>
            Adds a new SID. If the SID already exists, the call fails.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION.AUTHZ_SID_OPERATION_DELETE">
      <summary>
            Deletes the specified SID. If no matching SID is found, no modifications are done and the call fails.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AUTHZ_SID_OPERATION.AUTHZ_SID_OPERATION_REPLACE">
      <summary>
            Replaces the existing SID with the specified SID. If the SID does not already exist, then adds the SID.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AuthzAccessCheckCallback">
      <summary>
            The AuthzAccessCheckCallback function is an application-defined function that handles callback access control entries (ACEs) during an access check.
            AuthzAccessCheckCallback is a placeholder for the application-defined function name. The application registers this callback by calling AuthzInitializeResourceManager.
            </summary>
      <param name="hAuthzClientContext">A handle to a client context.</param>
      <param name="pAce">A pointer to the ACE to evaluate for inclusion in the call to the AuthzAccessCheck function.</param>
      <param name="pArgs">Data passed in the DynamicGroupArgs parameter of the call to AuthzAccessCheck or AuthzCachedAccessCheck.</param>
      <param name="pbAceApplicable">A pointer to a Boolean variable that receives the results of the evaluation of the logic defined by the application.
            <para>The results are TRUE if the logic determines that the ACE is applicable and will be included in the call to AuthzAccessCheck; otherwise, the results are FALSE.</para></param>
      <returns>
            If the function succeeds, the function returns TRUE.
            <para>If the function is unable to perform the evaluation, it returns FALSE. Use SetLastError to return an error to the access check function.</para></returns>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AuthzAccessCheckFlags">
      <summary>Flags used in the <see cref="M:Vanara.PInvoke.Authz.AuthzAccessCheck(Vanara.PInvoke.Authz.AuthzAccessCheckFlags,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE,Vanara.PInvoke.Authz.AUTHZ_ACCESS_REQUEST@,Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE,Vanara.PInvoke.AdvApi32.SafeSecurityDescriptor,Vanara.PInvoke.AdvApi32.SECURITY_DESCRIPTOR[],System.UInt32,Vanara.PInvoke.Authz.AUTHZ_ACCESS_REPLY,Vanara.PInvoke.Authz.SafeAUTHZ_ACCESS_CHECK_RESULTS_HANDLE@)" /> method.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzAccessCheckFlags.NONE">
      <summary>If phAccessCheckResults is not NULL, a deep copy of the security descriptor is copied to the handle referenced by phAccessCheckResults.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzAccessCheckFlags.AUTHZ_ACCESS_CHECK_NO_DEEP_COPY_SD">
      <summary>
            A deep copy of the security descriptor is not performed. The calling application must pass the address of an AUTHZ_ACCESS_CHECK_RESULTS_HANDLE
            handle in phAccessCheckResults. The AuthzAccessCheck function sets this handle to a security descriptor that must remain valid during subsequent
            calls to AuthzCachedAccessCheck.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AuthzAuditEventFlags">
      <summary>
            Flags for the <see cref="M:Vanara.PInvoke.Authz.AuthzInitializeObjectAccessAuditEvent(Vanara.PInvoke.Authz.AuthzAuditEventFlags,System.IntPtr,System.String,System.String,System.String,System.String,Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE@,System.UInt32)" /> method.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzAuditEventFlags.NONE">
      <summary>
            No flags set.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzAuditEventFlags.AUTHZ_NO_SUCCESS_AUDIT">
      <summary>
            Disable generation of success audits.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzAuditEventFlags.AUTHZ_NO_FAILURE_AUDIT">
      <summary>
            Disable generation of failure audits.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzAuditEventFlags.AUTHZ_NO_ALLOC_STRINGS">
      <summary>
            Use pointers to the passed strings instead of allocating memory and copying the strings. The calling application must ensure that the passed memory stays valid during access checks.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzAuditEventFlags.AUTHZ_WPD_CATEGORY_FLAG">
      <summary>
            Undocumented.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AuthzComputeGroupsCallback">
      <summary>
            The AuthzComputeGroupsCallback function is an application-defined function that creates a list of security identifiers (SIDs) that apply to a client. AuthzComputeGroupsCallback is a placeholder for the application-defined function name.
            </summary>
      <param name="hAuthzClientContext">A handle to a client context.</param>
      <param name="Args">Data passed in the DynamicGroupArgs parameter of a call to the AuthzInitializeContextFromAuthzContext, AuthzInitializeContextFromSid, or AuthzInitializeContextFromToken function.</param>
      <param name="pSidAttrArray">A pointer to a pointer variable that receives the address of an array of SID_AND_ATTRIBUTES structures. These structures represent the groups to which the client belongs.</param>
      <param name="pSidCount">The number of structures in pSidAttrArray.</param>
      <param name="pRestrictedSidAttrArray">A pointer to a pointer variable that receives the address of an array of SID_AND_ATTRIBUTES structures. These structures represent the groups from which the client is restricted.</param>
      <param name="pRestrictedSidCount">The number of structures in pSidRestrictedAttrArray.</param>
      <returns>If the function successfully returns a list of SIDs, the return value is TRUE.
            <para>If the function fails, the return value is FALSE.</para></returns>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AuthzContextFlags">
      <summary>
            Flags for the <see cref="M:Vanara.PInvoke.Authz.AuthzInitializeContextFromSid(Vanara.PInvoke.Authz.AuthzContextFlags,Vanara.PInvoke.AdvApi32.PSID,Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE,System.IntPtr,Vanara.PInvoke.AdvApi32.LUID,System.IntPtr,Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE@)" /> method.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzContextFlags.DEFAULT">
      <summary>
            Default value.
            <para>AuthzInitializeContextFromSid attempts to retrieve the user's token group information by performing an S4U logon.</para><para>If S4U logon is not supported by the user's domain or the calling computer, AuthzInitializeContextFromSid queries the user's account object for group information. When an account is queried directly, some groups that represent logon characteristics, such as Network, Interactive, Anonymous, Network Service, or Local Service, are omitted. Applications can explicitly add such group SIDs by implementing the AuthzComputeGroupsCallback function or calling the AuthzAddSidsToContext function.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzContextFlags.AUTHZ_SKIP_TOKEN_GROUPS">
      <summary>
            Causes AuthzInitializeContextFromSid to skip all group evaluations. When this flag is used, the context returned contains only the SID specified by the UserSid parameter. The specified SID can be an arbitrary or application-specific SID. Other SIDs can be added to this context by implementing the AuthzComputeGroupsCallback function or by calling the AuthzAddSidsToContext function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzContextFlags.AUTHZ_REQUIRE_S4U_LOGON">
      <summary>
            Causes AuthzInitializeContextFromSid to fail if Windows Services For User is not available to retrieve token group information.
            <para><c>Windows XP:</c> This flag is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzContextFlags.AUTHZ_COMPUTE_PRIVILEGES">
      <summary>
            Causes AuthzInitializeContextFromSid to retrieve privileges for the new context. If this function performs an S4U logon, it retrieves privileges from the token. Otherwise, the function retrieves privileges from all SIDs in the context.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AuthzFreeGroupsCallback">
      <summary>
            The AuthzFreeGroupsCallback function is an application-defined function that frees memory allocated by the AuthzComputeGroupsCallback function. AuthzFreeGroupsCallback is a placeholder for the application-defined function name.
            </summary>
      <param name="pSidAttrArray">A pointer to memory allocated by AuthzComputeGroupsCallback.</param>
    </member>
    <member name="T:Vanara.PInvoke.Authz.AuthzResourceManagerFlags">
      <summary>Flags for the <see cref="M:Vanara.PInvoke.Authz.AuthzInitializeResourceManager(Vanara.PInvoke.Authz.AuthzResourceManagerFlags,Vanara.PInvoke.Authz.AuthzAccessCheckCallback,Vanara.PInvoke.Authz.AuthzComputeGroupsCallback,Vanara.PInvoke.Authz.AuthzFreeGroupsCallback,System.String,Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE@)" /> method.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzResourceManagerFlags.DEFAULT">
      <summary>
            Default call to the function. The resource manager is initialized as the principal identified in the process token, and auditing is in effect.
            Note that unless the AUTHZ_RM_FLAG_NO_AUDIT flag is set, SeAuditPrivilege must be enabled for the function to succeed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzResourceManagerFlags.AUTHZ_RM_FLAG_NO_AUDIT">
      <summary>Auditing is not in effect. If this flag is set, the caller does not need to have SeAuditPrivilege enabled to call this function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzResourceManagerFlags.AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION">
      <summary>The resource manager is initialized as the identity of the thread token.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Authz.AuthzResourceManagerFlags.AUTHZ_RM_FLAG_NO_CENTRALIZED_ACCESS_POLICIES">
      <summary>The resource manager ignores CAP IDs and does not evaluate centralized access policies.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.SafeAUTHZ_ACCESS_CHECK_RESULTS_HANDLE">
      <summary>A safe handle for AUTHZ_ACCESS_CHECK_RESULTS_HANDLE.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_ACCESS_CHECK_RESULTS_HANDLE.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_ACCESS_CHECK_RESULTS_HANDLE" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_ACCESS_CHECK_RESULTS_HANDLE.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_ACCESS_CHECK_RESULTS_HANDLE" /> class.</summary>
      <param name="ptr">An existing handle.</param>
      <param name="own">if set to <c>true</c> free handle when disposed.</param>
    </member>
    <member name="T:Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE">
      <summary>A safe handle for AUTHZ_AUDIT_EVENT_HANDLE.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE" /> class.</summary>
      <param name="ptr">An existing handle.</param>
      <param name="own">if set to <c>true</c> free handle when disposed.</param>
    </member>
    <member name="F:Vanara.PInvoke.Authz.SafeAUTHZ_AUDIT_EVENT_HANDLE.Null">
      <summary>A <c>null</c> value equivalent.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE">
      <summary>A safe handle for AUTHZ_CLIENT_CONTEXT_HANDLE.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_CLIENT_CONTEXT_HANDLE" /> class.</summary>
      <param name="ptr">An existing handle.</param>
      <param name="own">if set to <c>true</c> free handle when disposed.</param>
    </member>
    <member name="T:Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE">
      <summary>A safe handle for AUTHZ_RESOURCE_MANAGER_HANDLE.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE" /> class.</summary>
      <param name="ptr">An existing handle.</param>
      <param name="own">if set to <c>true</c> free handle when disposed.</param>
    </member>
    <member name="F:Vanara.PInvoke.Authz.SafeAUTHZ_RESOURCE_MANAGER_HANDLE.Null">
      <summary>A <c>null</c> value equivalent.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetSecApi">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.NetSecApi</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.NetSecApi.LsaConnectUntrusted(Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle@)">
      <summary>The LsaConnectUntrusted function establishes an untrusted connection to the LSA server.</summary>
      <param name="LsaHandle">Pointer to a handle that receives the connection handle, which must be provided in future authentication services.</param>
      <returns>If the function succeeds, the return value is STATUS_SUCCESS.
            <para>If the function fails, the return value is an NTSTATUS code. For more information, see LSA Policy Function Return Values.</para><para>The LsaNtStatusToWinError function converts an NTSTATUS code to a Windows error code.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.NetSecApi.LsaDeregisterLogonProcess(System.IntPtr)">
      <summary>The LsaDeregisterLogonProcess function deletes the caller's logon application context and closes the connection to the LSA server.</summary>
      <param name="LsaHandle">Handle obtained from a LsaRegisterLogonProcess or LsaConnectUntrusted call.</param>
      <returns>If the function succeeds, the return value is STATUS_SUCCESS.
            <para>If the function fails, the return value is an NTSTATUS code. For more information, see LSA Policy Function Return Values.</para><para>The LsaNtStatusToWinError function converts an NTSTATUS code to a Windows error code.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.NetSecApi.LsaLookupAuthenticationPackage(Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle,System.String,System.Int32@)">
      <summary>The LsaLookupAuthenticationPackage function obtains the unique identifier of an authentication package.</summary>
      <param name="LsaHandle">Handle obtained from a previous call to LsaRegisterLogonProcess or LsaConnectUntrusted.</param>
      <param name="PackageName">A string that specifies the name of the authentication package. The package name must not exceed 127 bytes in length. The following table lists the names of the Microsoft-provided authentication packages.
             <list type="table"><listheader><term>Value</term><term>Meaning</term></listheader><item><term>MSV1_0_PACKAGE_NAME</term><description>The MSV1_0 authentication package name.</description></item><item><term>MICROSOFT_KERBEROS_NAME</term><description>The Kerberos authentication package name.</description></item><item><term>NEGOSSP_NAME</term><description>The Negotiate authentication package name.</description></item></list></param>
      <param name="AuthenticationPackage">Pointer to a ULONG that receives the authentication package identifier.</param>
      <returns>If the function succeeds, the return value is STATUS_SUCCESS.
             <para>If the function fails, the return value is an NTSTATUS code. The following are possible error codes.</para><list type="table"><listheader><term>Return code</term><term>Description</term></listheader><item><term>STATUS_NO_SUCH_PACKAGE</term><description>The specified authentication package is unknown to the LSA.</description></item><item><term>STATUS_NAME_TOO_LONG</term><description>The authentication package name exceeds 127 bytes.</description></item></list></returns>
    </member>
    <member name="M:Vanara.PInvoke.NetSecApi.LsaRegisterLogonProcess(System.String,Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle@,System.UInt32@)">
      <summary>The LsaRegisterLogonProcess function establishes a connection to the LSA server and verifies that the caller is a logon application.</summary>
      <param name="LogonProcessName">String identifying the logon application. This should be a printable name suitable for display to administrators. For example, the Windows logon application might use the name "User32LogonProcess". This name is used by the LSA during auditing. LsaRegisterLogonProcess does not check whether the name is already in use. This string must not exceed 127 bytes.</param>
      <param name="LsaHandle">Pointer that receives a handle used in future authentication function calls.</param>
      <param name="SecurityMode">The value returned is not meaningful and should be ignored.</param>
      <returns>If the function succeeds, the return value is STATUS_SUCCESS.
            <para>If the function fails, the return value is an NTSTATUS code. For more information, see LSA Policy Function Return Values.</para><para>The LsaNtStatusToWinError function converts an NTSTATUS code to a Windows error code.</para></returns>
    </member>
    <member name="F:Vanara.PInvoke.NetSecApi.MICROSOFT_KERBEROS_NAME">
      <summary>The Kerberos authentication package name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetSecApi.MSV1_0_PACKAGE_NAME">
      <summary>The MSV1_0 authentication package name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetSecApi.NEGOSSP_NAME">
      <summary>The Negotiate authentication package name.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle">
      <summary>
            A SafeHandle for security descriptors. If owned, will call LocalFree on the pointer when disposed.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NetSecApi.SafeLsaConnectionHandle" /> class from an existing pointer.</summary>
      <param name="handle">The connection handle.</param>
      <param name="own">if set to <c>true</c> indicates that this pointer should be freed when disposed.</param>
    </member>
  </members>
</doc>