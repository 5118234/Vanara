<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Vanara.PInvoke.User32</name>
  </assembly>
  <members>
    <member name="T:Vanara.PInvoke.User32">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.User32</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.User32.CallNextHookEx(Vanara.PInvoke.User32.SafeHookHandle,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
            Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after
            processing the hook information.
            <para>See [ https://msdn.microsoft.com/en-us/library/windows/desktop/ms644974%28v=vs.85%29.aspx ] for more information.</para></summary>
      <param name="hhk">C++ ( hhk [in, optional]. Type: HHOOK ) <br /> This parameter is ignored.</param>
      <param name="nCode">
            C++ ( nCode [in]. Type: int ) <br /> The hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to
            process the hook information.
            </param>
      <param name="wParam">
            C++ ( wParam [in]. Type: WPARAM ) <br /> The wParam value passed to the current hook procedure. The meaning of this parameter depends on the type of
            hook associated with the current hook chain.
            </param>
      <param name="lParam">
            C++ ( lParam [in]. Type: LPARAM ) <br /> The lParam value passed to the current hook procedure. The meaning of this parameter depends on the type of
            hook associated with the current hook chain.
            </param>
      <returns>
            C++ ( Type: LRESULT ) <br /> This value is returned by the next hook procedure in the chain. The current hook procedure must also return this value.
            The meaning of the return value depends on the hook type. For more information, see the descriptions of the individual hook procedures.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.ChildWindowFromPointEx(System.Runtime.InteropServices.HandleRef,System.Drawing.Point@,Vanara.PInvoke.User32.ChildWindowSkipOptions)">
      <summary>
            Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. The function can ignore invisible, disabled, and transparent child windows. The search is restricted to immediate child windows. Grandchildren and deeper descendants are not searched.
            </summary>
      <param name="hwndParent">A handle to the parent window.</param>
      <param name="pt">A structure that defines the client coordinates (relative to hwndParent) of the point to be checked.</param>
      <param name="uFlags">The child windows to be skipped. This parameter can be one or more of the following values.</param>
      <returns>The return value is a handle to the first child window that contains the point and meets the criteria specified by uFlags. If the point is within the parent window but not within any child window that meets the criteria, the return value is a handle to the parent window. If the point lies outside the parent window or if the function fails, the return value is NULL.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.DestroyIcon(System.IntPtr)">
      <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
      <param name="hIcon">A handle to the icon to be destroyed. The icon must not be in use.</param>
      <returns>If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.DrawText(Vanara.PInvoke.Gdi32.SafeDCHandle,System.String,System.Int32,Vanara.PInvoke.RECT@,Vanara.PInvoke.DrawTextFlags)">
      <summary>
            The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).
            </summary>
      <param name="hDC">A handle to the device context.</param>
      <param name="lpchText">A pointer to the string that specifies the text to be drawn. If the nCount parameter is -1, the string must be null-terminated. If uFormat includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</param>
      <param name="nCount">The length, in characters, of the string. If nCount is -1, then the lpchText parameter is assumed to be a pointer to a null-terminated string and DrawText computes the character count automatically.</param>
      <param name="lpRect">A pointer to a RECT structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
      <param name="uFormat">The method of formatting the text.</param>
      <returns>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from lpRect-&gt;top to the bottom of the drawn text. If the function fails, the return value is zero.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.ExitWindowsEx(Vanara.PInvoke.User32.ExitWindowsFlags,Vanara.PInvoke.SystemShutDownReason)">
      <summary>
            The ExitWindowsEx function either logs off the current user, shuts down the system, or shuts down and restarts the system. It sends the WM_QUERYENDSESSION message to all applications to determine if they can be terminated.
            </summary>
      <param name="uFlags">Specifies the type of shutdown.</param>
      <param name="dwReason">The reason for initiating the shutdown.</param>
      <returns>If the function succeeds, the return value is nonzero.<br></br><br>If the function fails, the return value is zero. To get extended error information, call Marshal.GetLastWin32Error.</br></returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.GetActiveWindow">
      <summary>
            Retrieves the window handle to the active window attached to the calling thread's message queue.
            </summary>
      <returns>The return value is the handle to the active window attached to the calling thread's message queue. Otherwise, the return value is NULL.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.GetClientRect(System.Runtime.InteropServices.HandleRef,Vanara.PInvoke.RECT@)">
      <summary>
            Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).
            </summary>
      <param name="hWnd">A handle to the window whose client coordinates are to be retrieved.</param>
      <param name="lpRect">A pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window.</param>
      <returns>If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.GetIconInfo(System.IntPtr,Vanara.PInvoke.User32.ICONINFO)">
      <summary>Retrieves information about the specified icon or cursor.</summary>
      <param name="hIcon">A handle to the icon or cursor. To retrieve information about a standard icon or cursor, specify one of the following values.</param>
      <param name="info">A pointer to an ICONINFO structure. The function fills in the structure's members.</param>
      <returns>
            If the function succeeds, the return value is nonzero and the function fills in the members of the specified ICONINFO structure. If the function
            fails, the return value is zero.To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.GetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32)">
      <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
      <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
      <param name="nIndex">The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To retrieve any other value, specify one of the following values.</param>
      <returns>If the function succeeds, the return value is the requested value. If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.GetWindowLong32(System.Runtime.InteropServices.HandleRef,System.Int32)">
      <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
      <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
      <param name="nIndex">The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</param>
      <returns>If the function succeeds, the return value is the requested value. If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.GetWindowLongPtr(System.Runtime.InteropServices.HandleRef,System.Int32)">
      <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
      <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
      <param name="nIndex">The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To retrieve any other value, specify one of the following values.</param>
      <returns>If the function succeeds, the return value is the requested value. If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.GetWindowRect(System.Runtime.InteropServices.HandleRef,Vanara.PInvoke.RECT@)">
      <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
      <param name="hWnd">A handle to the window.</param>
      <param name="lpRect">A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
      <returns>If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.InvalidateRect(System.Runtime.InteropServices.HandleRef,Vanara.PInvoke.PRECT,System.Boolean)">
      <summary>
            The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn.
            </summary>
      <param name="hWnd">A handle to the window whose update region has changed. If this parameter is NULL, the system invalidates and redraws all windows, not just the windows for this application, and sends the WM_ERASEBKGND and WM_NCPAINT messages before the function returns. Setting this parameter to NULL is not recommended.</param>
      <param name="rect">A pointer to a RECT structure that contains the client coordinates of the rectangle to be added to the update region. If this parameter is NULL, the entire client area is added to the update region.</param>
      <param name="bErase">Specifies whether the background within the update region is to be erased when the update region is processed. If this parameter is TRUE, the background is erased when the BeginPaint function is called. If this parameter is FALSE, the background remains unchanged.</param>
      <returns>If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.LoadImage(Vanara.PInvoke.Kernel32.SafeLibraryHandle,Vanara.PInvoke.SafeResourceId,Vanara.PInvoke.User32.LoadImageType,System.Int32,System.Int32,Vanara.PInvoke.User32.LoadImageOptions)">
      <summary>
            Loads an icon, cursor, animated cursor, or bitmap.
            </summary>
      <param name="hinst">A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see GetModuleHandle. Note that as of 32-bit Windows, an instance handle (HINSTANCE), such as the application instance handle exposed by system function call of WinMain, and a module handle (HMODULE) are the same thing.
            <para>To load an OEM image, set this parameter to NULL.</para><para>To load a stand-alone resource (icon, cursor, or bitmap file)—for example, c:\myimage.bmp—set this parameter to NULL.</para></param>
      <param name="lpszName">The image to be loaded. If the hinst parameter is non-NULL and the fuLoad parameter omits LR_LOADFROMFILE, lpszName specifies the image resource in the hinst module. If the image resource is to be loaded by name from the module, the lpszName parameter is a pointer to a null-terminated string that contains the name of the image resource. If the image resource is to be loaded by ordinal from the module, use the MAKEINTRESOURCE macro to convert the image ordinal into a form that can be passed to the LoadImage function. For more information, see the Remarks section below.
            <para>If the hinst parameter is NULL and the fuLoad parameter omits the LR_LOADFROMFILE value, the lpszName specifies the OEM image to load.</para><para>To pass these constants to the LoadImage function, use the MAKEINTRESOURCE macro. For example, to load the OCR_NORMAL cursor, pass MAKEINTRESOURCE(OCR_NORMAL) as the lpszName parameter, NULL as the hinst parameter, and LR_SHARED as one of the flags to the fuLoad parameter.</para><para>If the fuLoad parameter includes the LR_LOADFROMFILE value, lpszName is the name of the file that contains the stand-alone resource (icon, cursor, or bitmap file). Therefore, set hinst to NULL.</para></param>
      <param name="uType">The type of image to be loaded. This parameter can be one of the following values.</param>
      <param name="cxDesired">The width, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CXICON or SM_CXCURSOR system metric value to set the width. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource width.</param>
      <param name="cyDesired">The height, in pixels, of the icon or cursor. If this parameter is zero and the fuLoad parameter is LR_DEFAULTSIZE, the function uses the SM_CYICON or SM_CYCURSOR system metric value to set the height. If this parameter is zero and LR_DEFAULTSIZE is not used, the function uses the actual resource height.</param>
      <param name="fuLoad">Loading options.</param>
      <returns>If the function succeeds, the return value is the handle of the newly loaded image. If the function fails, the return value is NULL.To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.LoadString(Vanara.PInvoke.Kernel32.SafeLibraryHandle,System.Int32,System.IntPtr@,System.Int32)">
      <summary>
            Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.
            </summary>
      <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.</param>
      <param name="uID">The identifier of the string to be loaded.</param>
      <param name="lpBuffer">The buffer is to receive the string. Must be of sufficient length to hold a pointer (8 bytes).</param>
      <param name="nBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the resource itself.</param>
      <returns>If the function succeeds, the return value is the number of characters copied into the buffer, not including the terminating null character, or zero if the string resource does not exist. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.LoadString(Vanara.PInvoke.Kernel32.SafeLibraryHandle,System.Int32,System.Text.StringBuilder,System.Int32)">
      <summary>
            Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.
            </summary>
      <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.</param>
      <param name="uID">The identifier of the string to be loaded.</param>
      <param name="lpBuffer">The buffer is to receive the string. Must be of sufficient length to hold a pointer (8 bytes).</param>
      <param name="nBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the resource itself.</param>
      <returns>If the function succeeds, the return value is the number of characters copied into the buffer, not including the terminating null character, or zero if the string resource does not exist. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.LockWorkStation">
      <summary>
            Locks the workstation's display, protecting it from unauthorized use.
            </summary>
      <returns>0 on failure, non-zero for success</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.MapWindowPoints(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Drawing.Point@,System.Int32)">
      <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.
            </summary>
      <param name="hWndFrom">A handle to the window from which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are presumed to be in screen coordinates.</param>
      <param name="hWndTo">A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are converted to screen coordinates.</param>
      <param name="lpPoints">A pointer to an array of POINT structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a RECT structure, in which case the cPoints parameter should be set to 2.</param>
      <param name="cPoints">The number of POINT structures in the array pointed to by the lpPoints parameter.</param>
      <returns>If the function succeeds, the low-order word of the return value is the number of pixels added to the horizontal coordinate of each source point in order to compute the horizontal coordinate of each destination point. (In addition to that, if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal coordinate is multiplied by -1.) The high-order word is the number of pixels added to the vertical coordinate of each source point in order to compute the vertical coordinate of each destination point.
            <para>If the function fails, the return value is zero. Call SetLastError prior to calling this method to differentiate an error return value from a legitimate "0" return value.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.MapWindowPoints(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Drawing.Point[],System.Int32)">
      <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.
            </summary>
      <param name="hWndFrom">A handle to the window from which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are presumed to be in screen coordinates.</param>
      <param name="hWndTo">A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are converted to screen coordinates.</param>
      <param name="lpPoints">A pointer to an array of POINT structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a RECT structure, in which case the cPoints parameter should be set to 2.</param>
      <param name="cPoints">The number of POINT structures in the array pointed to by the lpPoints parameter.</param>
      <returns>If the function succeeds, the low-order word of the return value is the number of pixels added to the horizontal coordinate of each source point in order to compute the horizontal coordinate of each destination point. (In addition to that, if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal coordinate is multiplied by -1.) The high-order word is the number of pixels added to the vertical coordinate of each source point in order to compute the vertical coordinate of each destination point.
            <para>If the function fails, the return value is zero. Call SetLastError prior to calling this method to differentiate an error return value from a legitimate "0" return value.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.MapWindowPoints(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,Vanara.PInvoke.RECT@,System.Int32)">
      <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.
            </summary>
      <param name="hWndFrom">A handle to the window from which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are presumed to be in screen coordinates.</param>
      <param name="hWndTo">A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP, the points are converted to screen coordinates.</param>
      <param name="lpPoints">A pointer to an array of POINT structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a RECT structure, in which case the cPoints parameter should be set to 2.</param>
      <param name="cPoints">The number of POINT structures in the array pointed to by the lpPoints parameter.</param>
      <returns>If the function succeeds, the low-order word of the return value is the number of pixels added to the horizontal coordinate of each source point in order to compute the horizontal coordinate of each destination point. (In addition to that, if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal coordinate is multiplied by -1.) The high-order word is the number of pixels added to the vertical coordinate of each source point in order to compute the vertical coordinate of each destination point.
            <para>If the function fails, the return value is zero. Call SetLastError prior to calling this method to differentiate an error return value from a legitimate "0" return value.</para></returns>
    </member>
    <member name="F:Vanara.PInvoke.User32.OCM_NOTIFY">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.User32.OCM_NOTIFY</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.User32.RealGetWindowClass(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.User32.RealGetWindowClass(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hwnd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hwnd</parameter>
            <parameter>M:Vanara.PInvoke.User32.RealGetWindowClass(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="pszType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pszType</parameter>
            <parameter>M:Vanara.PInvoke.User32.RealGetWindowClass(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="cchType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cchType</parameter>
            <parameter>M:Vanara.PInvoke.User32.RealGetWindowClass(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.User32.RealGetWindowClass(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.RegisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32,Vanara.PInvoke.User32.HotKeyModifiers,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.User32.RegisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32,Vanara.PInvoke.User32.HotKeyModifiers,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hWnd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hWnd</parameter>
            <parameter>M:Vanara.PInvoke.User32.RegisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32,Vanara.PInvoke.User32.HotKeyModifiers,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Vanara.PInvoke.User32.RegisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32,Vanara.PInvoke.User32.HotKeyModifiers,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="fsModifiers">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fsModifiers</parameter>
            <parameter>M:Vanara.PInvoke.User32.RegisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32,Vanara.PInvoke.User32.HotKeyModifiers,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="vk">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>vk</parameter>
            <parameter>M:Vanara.PInvoke.User32.RegisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32,Vanara.PInvoke.User32.HotKeyModifiers,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.User32.RegisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32,Vanara.PInvoke.User32.HotKeyModifiers,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.RegisterWindowMessage(System.String)">
      <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            </summary>
      <param name="lpString">The message to be registered.</param>
      <returns>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.ScreenToClient(System.Runtime.InteropServices.HandleRef,System.Drawing.Point@)">
      <summary>
            The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates.
            </summary>
      <param name="hWnd">A handle to the window whose client area will be used for the conversion.</param>
      <param name="lpPoint">A pointer to a POINT structure that specifies the screen coordinates to be converted.</param>
      <returns>If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.Int32,System.Int32)">
      <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
      <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
      <param name="msg">The message to be sent.</param>
      <param name="wParam">Additional message-specific information.</param>
      <param name="lParam">Additional message-specific information.</param>
      <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.Int32,System.String)">
      <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
      <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
      <param name="msg">The message to be sent.</param>
      <param name="wParam">Additional message-specific information.</param>
      <param name="lParam">Additional message-specific information.</param>
      <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.Int32@,System.Text.StringBuilder)">
      <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
      <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
      <param name="msg">The message to be sent.</param>
      <param name="wParam">Additional message-specific information.</param>
      <param name="lParam">Additional message-specific information.</param>
      <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
      <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
      <param name="msg">The message to be sent.</param>
      <param name="wParam">Additional message-specific information.</param>
      <param name="lParam">Additional message-specific information.</param>
      <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,System.String)">
      <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
      <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
      <param name="msg">The message to be sent.</param>
      <param name="wParam">Additional message-specific information.</param>
      <param name="lParam">Additional message-specific information.</param>
      <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,Vanara.PInvoke.RECT@)">
      <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
      <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
      <param name="msg">The message to be sent.</param>
      <param name="wParam">Additional message-specific information.</param>
      <param name="rect">Additional message-specific information.</param>
      <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.UIntPtr,System.UIntPtr)">
      <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
      <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
      <param name="msg">The message to be sent.</param>
      <param name="wParam">Additional message-specific information.</param>
      <param name="lParam">Additional message-specific information.</param>
      <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32,System.IntPtr)">
      <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            </summary>
      <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs. The SetWindowLongPtr function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</param>
      <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. Alternately, this can be a value from <see cref="T:Vanara.PInvoke.User32.WindowLongFlags" />.</param>
      <param name="dwNewLong">The replacement value.</param>
      <returns>If the function succeeds, the return value is the previous value of the specified offset. If the function fails, the return value is zero. To get extended error information, call GetLastError.
            <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling SetLastError with 0, then call SetWindowLongPtr. Function failure will be indicated by a return value of zero and a GetLastError result that is nonzero.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SetWindowPos(System.Runtime.InteropServices.HandleRef,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.User32.SetWindowPosFlags)">
      <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
      <param name="hWnd">A handle to the window.</param>
      <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values.
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term><c>HWND_BOTTOM</c> (HWND)1</term><description>Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.</description></item><item><term><c>HWND_NOTOPMOST</c> (HWND)-2</term><description>Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.</description></item><item><term><c>HWND_TOP</c> (HWND)0</term><description>Places the window at the top of the Z order.</description></item><item><term><c>HWND_TOPMOST</c> (HWND)-1</term><description>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</description></item></list></param>
      <param name="X">The new position of the left side of the window, in client coordinates.</param>
      <param name="Y">The new position of the top of the window, in client coordinates.</param>
      <param name="cx">The new width of the window, in pixels.</param>
      <param name="cy">The new height of the window, in pixels.</param>
      <param name="uFlags">The window sizing and positioning flags.</param>
      <returns>If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SetWindowsHookEx(Vanara.PInvoke.User32.HookType,Vanara.PInvoke.User32.HookProc,Vanara.PInvoke.Kernel32.SafeLibraryHandle,System.Int32)">
      <summary>
            Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of
            events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.
            <para>See https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990%28v=vs.85%29.aspx for more information</para></summary>
      <param name="idHook">
            C++ ( idHook [in]. Type: int ) <br /> The type of hook procedure to be installed. This parameter can be one of the following values.
            <list type="table"><listheader><term>Possible Hook Types</term></listheader><item><term>WH_CALLWNDPROC (4)</term><description>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the CallWndProc hook  procedure.</description></item><item><term>WH_CALLWNDPROCRET (12)</term><description>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the CallWndRetProc hook procedure.</description></item><item><term>WH_CBT (5)</term><description>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the CBTProc hook procedure.</description></item><item><term>WH_DEBUG (9)</term><description>Installs a hook procedure useful for debugging other hook procedures. For more information, see the DebugProc hook procedure.</description></item><item><term>WH_FOREGROUNDIDLE (11)</term><description>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the ForegroundIdleProc hook procedure.</description></item><item><term>WH_GETMESSAGE (3)</term><description>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the GetMsgProc hook procedure.</description></item><item><term>WH_JOURNALPLAYBACK (1)</term><description>Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure. For more information, see the JournalPlaybackProc hook procedure.</description></item><item><term>WH_JOURNALRECORD (0)</term><description>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the JournalRecordProc hook procedure.</description></item><item><term>WH_KEYBOARD (2)</term><description>Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure.</description></item><item><term>WH_KEYBOARD_LL (13)</term><description>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the LowLevelKeyboardProc hook procedure.</description></item><item><term>WH_MOUSE (7)</term><description>Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure.</description></item><item><term>WH_MOUSE_LL (14)</term><description>Installs a hook procedure that monitors low-level mouse input events. For more information, see the LowLevelMouseProc hook procedure.</description></item><item><term>WH_MSGFILTER (-1)</term><description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the MessageProc hook procedure.</description></item><item><term>WH_SHELL (10)</term><description>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the ShellProc hook procedure.</description></item><item><term>WH_SYSMSGFILTER (6)</term><description></description></item></list></param>
      <param name="lpfn">
            C++ ( lpfn [in]. Type: HOOKPROC ) <br /> A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a thread
            created by a different process, the lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can point to a hook procedure in the code
            associated with the current process.
            </param>
      <param name="hMod">
            C++ ( hMod [in]. Type: HINSTANCE ) <br /> A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod parameter must
            be set to NULL if the dwThreadId parameter specifies a thread created by the current process and if the hook procedure is within the code associated
            with the current process.
            </param>
      <param name="dwThreadId">
            C++ ( dwThreadId [in]. Type: DWORD ) <br /> The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this
            parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store
            apps, see the Remarks section.
            </param>
      <returns>
            C++ ( Type: HHOOK ) <br /> If the function succeeds, the return value is the handle to the hook procedure. If the function fails, the return value is NULL.
            <para>To get extended error information, call GetLastError.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.SetWindowText(System.Runtime.InteropServices.HandleRef,System.String)">
      <summary>
            Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.
            </summary>
      <param name="hWnd">A handle to the window or control whose text is to be changed.</param>
      <param name="lpString">The new title or control text.</param>
      <returns>If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.ShutdownBlockReasonCreate(System.Runtime.InteropServices.HandleRef,System.String)">
      <summary>
            Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated.
            </summary>
      <param name="hWnd">A handle to the main window of the application.</param>
      <param name="reason">The reason the application must block system shutdown. This string will be truncated for display purposes after MAX_STR_BLOCKREASON characters.</param>
      <returns>If the call succeeds, the return value is nonzero. If the call fails, the return value is zero. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.ShutdownBlockReasonDestroy(System.Runtime.InteropServices.HandleRef)">
      <summary>
            Indicates that the system can be shut down and frees the reason string.
            </summary>
      <param name="hWnd">A handle to the main window of the application.</param>
      <returns>If the call succeeds, the return value is nonzero. If the call fails, the return value is zero. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.ShutdownBlockReasonQuery(System.Runtime.InteropServices.HandleRef,System.String@)">
      <summary>Retrieves the reason string set by the <see cref="M:Vanara.PInvoke.User32.ShutdownBlockReasonCreate(System.Runtime.InteropServices.HandleRef,System.String)" /> function.</summary>
      <param name="hWnd">A handle to the main window of the application.</param>
      <param name="reason">On success, receives the reason string.</param>
      <returns>If the call succeeds, the return value is nonzero. If the call fails, the return value is zero. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.ShutdownBlockReasonQuery(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.UInt32@)">
      <summary>Retrieves the reason string set by the <see cref="M:Vanara.PInvoke.User32.ShutdownBlockReasonCreate(System.Runtime.InteropServices.HandleRef,System.String)" /> function.</summary>
      <param name="hWnd">A handle to the main window of the application.</param>
      <param name="pwszBuff">
            A pointer to a buffer that receives the reason string. If this parameter is NULL, the function retrieves the number of characters in the reason string.
            </param>
      <param name="pcchBuff">
            A pointer to a variable that specifies the size of the pwszBuff buffer, in characters. If the function succeeds, this variable receives the number of
            characters copied into the buffer, including the null-terminating character. If the buffer is too small, the variable receives the required buffer
            size, in characters, not including the null-terminating character.
            </param>
      <returns>
            If the call succeeds, the return value is nonzero. If the call fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.UnhookWindowsHookEx(System.IntPtr)">
      <summary>Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.</summary>
      <param name="hhk">A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx.</param>
      <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.UnregisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.User32.UnregisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hWnd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hWnd</parameter>
            <parameter>M:Vanara.PInvoke.User32.UnregisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Vanara.PInvoke.User32.UnregisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.User32.UnregisterHotKey(System.Runtime.InteropServices.HandleRef,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Vanara.PInvoke.User32.WindowFromPoint(System.Drawing.Point)">
      <summary>Retrieves a handle to the window that contains the specified point.</summary>
      <param name="Point">The point to be checked.</param>
      <returns>
            The return value is a handle to the window that contains the point. If no window exists at the given point, the return value is NULL. If the point is
            over a static text control, the return value is a handle to the window under the static text control.
            </returns>
    </member>
    <member name="T:Vanara.PInvoke.User32.ChildWindowSkipOptions">
      <summary>
            For use with ChildWindowFromPointEx 
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ChildWindowSkipOptions.CWP_ALL">
      <summary>
            Does not skip any child windows
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ChildWindowSkipOptions.CWP_SKIPINVISIBLE">
      <summary>
            Skips invisible child windows
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ChildWindowSkipOptions.CWP_SKIPDISABLED">
      <summary>
            Skips disabled child windows
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ChildWindowSkipOptions.CWP_SKIPTRANSPARENT">
      <summary>
            Skips transparent child windows
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.CopyImageOptions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.User32.CopyImageOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.CopyImageOptions.LR_COPYRETURNORG">
      <summary>Returns the original hImage if it satisfies the criteria for the copy—that is, correct dimensions and color depth—in which case the LR_COPYDELETEORG flag is ignored. If this flag is not specified, a new object is always created.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.CopyImageOptions.LR_COPYDELETEORG">
      <summary>Deletes the original image after creating the copy.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.CopyImageOptions.LR_COPYFROMRESOURCE">
      <summary>Tries to reload an icon or cursor resource from the original resource file rather than simply copying the current image. This is useful for creating a different-sized copy when the resource file contains multiple sizes of the resource. Without this flag, CopyImage stretches the original image to the new size. If this flag is set, CopyImage uses the size in the resource file closest to the desired size. This will succeed only if hImage was loaded by LoadIcon or LoadCursor, or by LoadImage with the LR_SHARED flag.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.CopyImageOptions.LR_CREATEDIBSECTION">
      <summary>When the uType parameter specifies IMAGE_BITMAP, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.CopyImageOptions.LR_DEFAULTSIZE">
      <summary>Uses the width or height specified by the system metric values for cursors or icons, if the cxDesired or cyDesired values are set to zero. If this flag is not specified and cxDesired and cyDesired are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.CopyImageOptions.LR_MONOCHROME">
      <summary>Loads the image in black and white.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.DialogProc">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.User32.DialogProc</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.ExitWindowsFlags">
      <summary>
            The shutdown type for the <see cref="M:Vanara.PInvoke.User32.ExitWindowsEx(Vanara.PInvoke.User32.ExitWindowsFlags,Vanara.PInvoke.SystemShutDownReason)" /> method.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_LOGOFF">
      <summary>
            Shuts down all processes running in the logon session of the process that called the ExitWindowsEx function. Then it logs the user off.
            <para>This flag can be used only by processes running in an interactive user's logon session.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_SHUTDOWN">
      <summary>
            Shuts down the system to a point at which it is safe to turn off the power. All file buffers have been flushed to disk, and all running processes have stopped.
            <para>The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.</para><para>Specifying this flag will not turn off the power even if the system supports the power-off feature. You must specify EWX_POWEROFF to do this.</para><para>Windows XP with SP1:  If the system supports the power-off feature, specifying this flag turns off the power.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_REBOOT">
      <summary>
            Shuts down the system and then restarts the system.
            <para>The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_FORCE">
      <summary>
            This flag has no effect if terminal services is enabled. Otherwise, the system does not send the WM_QUERYENDSESSION message. This can cause applications to lose data. Therefore, you should only use this flag in an emergency.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_POWEROFF">
      <summary>
            Shuts down the system and turns off the power. The system must support the power-off feature.
            <para>The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_FORCEIFHUNG">
      <summary>
            Forces processes to terminate if they do not respond to the WM_QUERYENDSESSION or WM_ENDSESSION message within the timeout interval. For more information, see the Remarks.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_QUICKRESOLVE">
      <summary>
            The ewx quickresolve
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_RESTARTAPPS">
      <summary>
            Shuts down the system and then restarts it, as well as any applications that have been registered for restart using the RegisterApplicationRestart function. These application receive the WM_QUERYENDSESSION message with lParam set to the ENDSESSION_CLOSEAPP value. For more information, see Guidelines for Applications.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_HYBRID_SHUTDOWN">
      <summary>
            Beginning with Windows 8:  You can prepare the system for a faster startup by combining the EWX_HYBRID_SHUTDOWN flag with the EWX_SHUTDOWN flag.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ExitWindowsFlags.EWX_BOOTOPTIONS">
      <summary>
            When combined with the EWX_REBOOT flag, will reboot to the boot options.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.GRPICONDIR">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.User32.GRPICONDIR</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIR.idCount">
      <summary>Icon count</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIR.idReserved">
      <summary>Reserved (must be 0)</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIR.idType">
      <summary>Resource type</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.GRPICONDIRENTRY">
      <summary>Represents an icon as stored in a resource</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.bColorCount">
      <summary>Number of colors in image (0 if &gt;= 8bpp)</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.bHeight">
      <summary>Height, in pixels, of the image</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.bReserved">
      <summary>Reserved</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.bWidth">
      <summary>Width, in pixels, of the image</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.dwBytesInRes">
      <summary>How many bytes in this resource?</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.nId">
      <summary>The ID</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.wBitCount">
      <summary>Bits per pixel</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.GRPICONDIRENTRY.wPlanes">
      <summary>Color Planes</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.HitTestValues">
      <summary>
            Values to use a return codes when handling the WM_HCHITTEST message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTBORDER">
      <summary>In the border of a window that does not have a sizing border.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTBOTTOM">
      <summary>In the lower-horizontal border of a resizable window (the user can click the mouse to resize the window vertically).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTBOTTOMLEFT">
      <summary>In the lower-left corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTBOTTOMRIGHT">
      <summary>In the lower-right corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTCAPTION">
      <summary>In a title bar.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTCLIENT">
      <summary>In a client area.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTCLOSE">
      <summary>In a Close button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTERROR">
      <summary>
            On the screen background or on a dividing line between windows (same as HTNOWHERE, except that the DefWindowProc function produces a system beep
            to indicate an error).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTGROWBOX">
      <summary>In a size box (same as HTSIZE).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTHELP">
      <summary>In a Help button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTHSCROLL">
      <summary>In a horizontal scroll bar.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTLEFT">
      <summary>In the left border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTMENU">
      <summary>In a menu.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTMAXBUTTON">
      <summary>In a Maximize button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTMINBUTTON">
      <summary>In a Minimize button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTNOWHERE">
      <summary>On the screen background or on a dividing line between windows.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTREDUCE">
      <summary>In a Minimize button.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTRIGHT">
      <summary>In the right border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTSIZE">
      <summary>In a size box (same as HTGROWBOX).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTSYSMENU">
      <summary>In a window menu or in a Close button in a child window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTTOP">
      <summary>In the upper-horizontal border of a window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTTOPLEFT">
      <summary>In the upper-left corner of a window border.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTTOPRIGHT">
      <summary>In the upper-right corner of a window border.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTTRANSPARENT">
      <summary>
            In a window currently covered by another window in the same thread (the message will be sent to underlying windows in the same thread until one
            of them returns a code that is not HTTRANSPARENT).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTVSCROLL">
      <summary>In the vertical scroll bar.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HitTestValues.HTZOOM">
      <summary>In a Maximize button.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.HookProc">
      <summary>The delegate for a hook procedure set by SetWindowsHookEx.</summary>
      <param name="nCode">A hook code that the hook procedure uses to determine the action to perform. The value of the hook code depends on the type of the hook; each type has its own characteristic set of hook codes.</param>
      <param name="wParam">The value depends on the hook code, but typically contains information about a message that was sent or posted.</param>
      <param name="lParam">The value depends on the hook code, but typically contains information about a message that was sent or posted.</param>
      <returns>The value depends on the hook code.</returns>
    </member>
    <member name="T:Vanara.PInvoke.User32.HookType">
      <summary>The type of hook procedure to be installed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_MSGFILTER">
      <summary>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the MessageProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_JOURNALRECORD">
      <summary>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the JournalRecordProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_JOURNALPLAYBACK">
      <summary>Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure. For more information, see the JournalPlaybackProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_KEYBOARD">
      <summary>Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_GETMESSAGE">
      <summary>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the GetMsgProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_CALLWNDPROC">
      <summary>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the CallWndProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_CBT">
      <summary>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the CBTProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_SYSMSGFILTER">
      <summary>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the SysMsgProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_MOUSE">
      <summary>Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_HARDWARE">
      <summary></summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_DEBUG">
      <summary>Installs a hook procedure useful for debugging other hook procedures. For more information, see the DebugProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_SHELL">
      <summary>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the ShellProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_FOREGROUNDIDLE">
      <summary>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the ForegroundIdleProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_CALLWNDPROCRET">
      <summary>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the CallWndRetProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_KEYBOARD_LL">
      <summary>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the LowLevelKeyboardProc hook procedure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.HookType.WH_MOUSE_LL">
      <summary>Installs a hook procedure that monitors low-level mouse input events. For more information, see the LowLevelMouseProc hook procedure.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.HotKeyModifiers">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.User32.HotKeyModifiers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.ICONINFO">
      <summary>Contains information about an icon or a cursor.</summary>
    </member>
    <member name="M:Vanara.PInvoke.User32.ICONINFO.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.User32.ICONINFO</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Vanara.PInvoke.User32.ICONINFO.Bitmap">
      <summary>Gets the color bitmap associated with the icon.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ICONINFO.fIcon">
      <summary>Specifies whether this structure defines an icon or a cursor. A value of TRUE specifies an icon; FALSE specifies a cursor.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ICONINFO.hbmColor">
      <summary>
            A handle to the icon color bitmap. This member can be optional if this structure defines a black and white icon. The AND bitmask of hbmMask is
            applied with the SRCAND flag to the destination; subsequently, the color bitmap is applied (using XOR) to the destination by using the SRCINVERT flag.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ICONINFO.hbmMask">
      <summary>
            The icon bitmask bitmap. If this structure defines a black and white icon, this bitmask is formatted so that the upper half is the icon AND
            bitmask and the lower half is the icon XOR bitmask. Under this condition, the height should be an even multiple of two. If this structure defines
            a color icon, this mask only defines the AND bitmask of the icon.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.User32.ICONINFO.Mask">
      <summary>Gets the AND bitmap mask associated with the icon.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ICONINFO.xHotspot">
      <summary>
            The x-coordinate of a cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.ICONINFO.yHotspot">
      <summary>
            The y-coordinate of the cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member
            is ignored.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.LoadImageOptions">
      <summary>
            Specifies the load options for <see cref="M:Vanara.PInvoke.User32.LoadImage(Vanara.PInvoke.Kernel32.SafeLibraryHandle,Vanara.PInvoke.SafeResourceId,Vanara.PInvoke.User32.LoadImageType,System.Int32,System.Int32,Vanara.PInvoke.User32.LoadImageOptions)" />.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_DEFAULTCOLOR">
      <summary>The default flag; it does nothing. All it means is "not LR_MONOCHROME".</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_MONOCHROME">
      <summary>Loads the image in black and white.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_COLOR">
      <summary>Undocumented</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_LOADFROMFILE">
      <summary>Loads the stand-alone image from the file specified by lpszName (icon, cursor, or bitmap file).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_LOADTRANSPARENT">
      <summary>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (COLOR_WINDOW). All pixels in the image that use that entry become the default window color. This value applies only to images that have corresponding color tables.
            <para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para><para>If fuLoad includes both the LR_LOADTRANSPARENT and LR_LOADMAP3DCOLORS values, LR_LOADTRANSPARENT takes precedence. However, the color table entry is replaced with COLOR_3DFACE rather than COLOR_WINDOW.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_DEFAULTSIZE">
      <summary>Uses the width or height specified by the system metric values for cursors or icons, if the cxDesired or cyDesired values are set to zero. If this flag is not specified and cxDesired and cyDesired are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_VGACOLOR">
      <summary>Uses true VGA colors.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_LOADMAP3DCOLORS">
      <summary>Searches the color table for the image and replaces the following shades of gray with the corresponding 3-D color.
            <list type="bullet"><item><description>Dk Gray, RGB(128,128,128) with COLOR_3DSHADOW</description></item><item><description>Gray, RGB(192,192,192) with COLOR_3DFACE</description></item><item><description>Lt Gray, RGB(223,223,223) with COLOR_3DLIGHT</description></item></list><para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_CREATEDIBSECTION">
      <summary>When the uType parameter specifies IMAGE_BITMAP, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageOptions.LR_SHARED">
      <summary>Shares the image handle if the image is loaded multiple times. If LR_SHARED is not set, a second call to LoadImage for the same resource will load the image again and return a different handle.
            <para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use LR_SHARED for images that have non-standard sizes, that may change after loading, or that are loaded from a file.</para><para>When loading a system icon or cursor, you must use LR_SHARED or the function will fail to load the resource.</para><para>This function finds the first image in the cache with the requested resource name, regardless of the size requested.</para></summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.LoadImageType">
      <summary>
            Specifies the type of image to be loaded by <see cref="M:Vanara.PInvoke.User32.LoadImage(Vanara.PInvoke.Kernel32.SafeLibraryHandle,Vanara.PInvoke.SafeResourceId,Vanara.PInvoke.User32.LoadImageType,System.Int32,System.Int32,Vanara.PInvoke.User32.LoadImageOptions)" />.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageType.IMAGE_BITMAP">
      <summary>Loads a bitmap.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageType.IMAGE_ICON">
      <summary>Loads an icon.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageType.IMAGE_CURSOR">
      <summary>Loads a cursor.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.LoadImageType.IMAGE_ENHMETAFILE">
      <summary>Loads an enhanced metafile.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.MINMAXINFO">
      <summary>Contains information about a window's maximized size and position and its minimum and maximum tracking size.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.MINMAXINFO.maxPosition">
      <summary>
            The position of the left side of the maximized window (x member) and the position of the top of the maximized window (y member). For top-level
            windows, this value is based on the position of the primary monitor.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.MINMAXINFO.maxSize">
      <summary>
            The maximized width (x member) and the maximized height (y member) of the window. For top-level windows, this value is based on the width of the
            primary monitor.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.MINMAXINFO.maxTrackSize">
      <summary>
            The maximum tracking width (x member) and the maximum tracking height (y member) of the window. This value is based on the size of the virtual
            screen and can be obtained programmatically from the system metrics SM_CXMAXTRACK and SM_CYMAXTRACK (see the GetSystemMetrics function).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.MINMAXINFO.minTrackSize">
      <summary>
            The minimum tracking width (x member) and the minimum tracking height (y member) of the window. This value can be obtained programmatically from
            the system metrics SM_CXMINTRACK and SM_CYMINTRACK (see the GetSystemMetrics function).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.MINMAXINFO.reserved">
      <summary>Reserved; do not use.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.NMHDR">
      <summary>
            Contains information about a notification message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.NMHDR.code">
      <summary>A notification code. This member can be one of the common notification codes (see Notifications under General Control Reference), or it can be a control-specific notification code.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.NMHDR.hwndFrom">
      <summary>A window handle to the control sending the message.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.NMHDR.idFrom">
      <summary>An identifier of the control sending the message.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.SafeHookHandle">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.User32.SafeHookHandle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.User32.SafeHookHandle.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.User32.SafeHookHandle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.User32.SafeHookHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.User32.SafeHookHandle</parameter>
          </include>
        </markup>
      </summary>
      <param name="handle">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>handle</parameter>
            <parameter>M:Vanara.PInvoke.User32.SafeHookHandle.#ctor(System.IntPtr,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="own">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>own</parameter>
            <parameter>M:Vanara.PInvoke.User32.SafeHookHandle.#ctor(System.IntPtr,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Vanara.PInvoke.User32.SetWindowPosFlags">
      <summary>Window sizing and positioning flags.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_ASYNCWINDOWPOS">
      <summary>
            If the calling thread and the thread that owns the window are attached to different input queues, the
            system posts the request to the thread that owns the window. This prevents the calling thread from
            blocking its execution while other threads process the request.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_DEFERERASE">
      <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_DRAWFRAME">
      <summary>Draws a frame (defined in the window's class description) around the window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_FRAMECHANGED">
      <summary>
            Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the
            window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is
            sent only when the window's size is being changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_HIDEWINDOW">
      <summary>Hides the window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOACTIVATE">
      <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to the top of
            either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOCOPYBITS">
      <summary>
            Discards the entire contents of the client area. If this flag is not specified, the valid contents of the
            client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOMOVE">
      <summary>Retains the current position (ignores X and Y parameters).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOOWNERZORDER">
      <summary>Does not change the owner window's position in the Z order.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOREDRAW">
      <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the
            client area, the nonclient area (including the title bar and scroll bars), and any part of the parent
            window uncovered as a result of the window being moved. When this flag is set, the application must
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOREPOSITION">
      <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOSENDCHANGING">
      <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOSIZE">
      <summary>Retains the current size (ignores the cx and cy parameters).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_NOZORDER">
      <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SetWindowPosFlags.SWP_SHOWWINDOW">
      <summary>Displays the window.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.SpecialWindowHandles">
      <summary>Special window handles</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SpecialWindowHandles.HWND_BOTTOM">
      <summary>
            Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the
            window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SpecialWindowHandles.HWND_NOTOPMOST">
      <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no
            effect if the window is already a non-topmost window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SpecialWindowHandles.HWND_TOP">
      <summary>Places the window at the top of the Z order.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.SpecialWindowHandles.HWND_TOPMOST">
      <summary>
            Places the window above all non-topmost windows. The window maintains its topmost position even when it
            is deactivated.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.WindowLongFlags">
      <summary>Flags used for <see cref="M:Vanara.PInvoke.User32.GetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32)" /> and <see cref="M:Vanara.PInvoke.User32.SetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32,System.IntPtr)" /> methods to retrieve information about a window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.GWL_EXSTYLE">
      <summary>The extended window styles</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.GWL_HINSTANCE">
      <summary>The application instance handle</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.GWL_HWNDPARENT">
      <summary>The parent window handle</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.GWL_ID">
      <summary>The window identifier</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.GWL_STYLE">
      <summary>The window styles</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.GWL_USERDATA">
      <summary>The window user data</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.GWL_WNDPROC">
      <summary>The window procedure address or handle</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.DWLP_USER">
      <summary>The dialog user data</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.DWLP_MSGRESULT">
      <summary>The dialog procedure message result</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowLongFlags.DWLP_DLGPROC">
      <summary>The dialog procedure address or handle</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.WindowMessage">
      <summary>Windows Messages</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NULL">
      <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CREATE">
      <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DESTROY">
      <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOVE">
      <summary>
            The WM_MOVE message is sent after a window has been moved.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SIZE">
      <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ACTIVATE">
      <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETFOCUS">
      <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_KILLFOCUS">
      <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ENABLE">
      <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETREDRAW">
      <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETTEXT">
      <summary>
            An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETTEXT">
      <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETTEXTLENGTH">
      <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PAINT">
      <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CLOSE">
      <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_QUERYENDSESSION">
      <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_QUERYOPEN">
      <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ENDSESSION">
      <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_QUIT">
      <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ERASEBKGND">
      <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYSCOLORCHANGE">
      <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SHOWWINDOW">
      <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_WININICHANGE">
      <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETTINGCHANGE">
      <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DEVMODECHANGE">
      <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ACTIVATEAPP">
      <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_FONTCHANGE">
      <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_TIMECHANGE">
      <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CANCELMODE">
      <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETCURSOR">
      <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSEACTIVATE">
      <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CHILDACTIVATE">
      <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_QUEUESYNC">
      <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETMINMAXINFO">
      <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PAINTICON">
      <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ICONERASEBKGND">
      <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NEXTDLGCTL">
      <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SPOOLERSTATUS">
      <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DRAWITEM">
      <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MEASUREITEM">
      <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DELETEITEM">
      <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_VKEYTOITEM">
      <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CHARTOITEM">
      <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETFONT">
      <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETFONT">
      <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETHOTKEY">
      <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETHOTKEY">
      <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_QUERYDRAGICON">
      <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_COMPAREITEM">
      <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETOBJECT">
      <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_COMPACTING">
      <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_COMMNOTIFY">
      <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_WINDOWPOSCHANGING">
      <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_WINDOWPOSCHANGED">
      <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_POWER">
      <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_COPYDATA">
      <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CANCELJOURNAL">
      <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NOTIFY">
      <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_INPUTLANGCHANGEREQUEST">
      <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_INPUTLANGCHANGE">
      <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_TCARD">
      <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HELP">
      <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_USERCHANGED">
      <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NOTIFYFORMAT">
      <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CONTEXTMENU">
      <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_STYLECHANGING">
      <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_STYLECHANGED">
      <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DISPLAYCHANGE">
      <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETICON">
      <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SETICON">
      <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCCREATE">
      <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCDESTROY">
      <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCCALCSIZE">
      <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCHITTEST">
      <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCPAINT">
      <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCACTIVATE">
      <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETDLGCODE">
      <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYNCPAINT">
      <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCMOUSEMOVE">
      <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCLBUTTONDOWN">
      <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCLBUTTONUP">
      <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCLBUTTONDBLCLK">
      <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCRBUTTONDOWN">
      <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCRBUTTONUP">
      <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCRBUTTONDBLCLK">
      <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCMBUTTONDOWN">
      <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCMBUTTONUP">
      <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCMBUTTONDBLCLK">
      <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCXBUTTONDOWN">
      <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCXBUTTONUP">
      <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCXBUTTONDBLCLK">
      <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_BM_CLICK">
      <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_INPUT_DEVICE_CHANGE">
      <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_INPUT">
      <summary>
            The WM_INPUT message is sent to the window that is getting raw input.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_KEYFIRST">
      <summary>
            This message filters for keyboard messages.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_KEYDOWN">
      <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_KEYUP">
      <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CHAR">
      <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DEADCHAR">
      <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYSKEYDOWN">
      <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYSKEYUP">
      <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYSCHAR">
      <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYSDEADCHAR">
      <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_UNICHAR">
      <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_KEYLAST">
      <summary>
            This message filters for keyboard messages.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_STARTCOMPOSITION">
      <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_ENDCOMPOSITION">
      <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_COMPOSITION">
      <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_INITDIALOG">
      <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_COMMAND">
      <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYSCOMMAND">
      <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_TIMER">
      <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSCROLL">
      <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_VSCROLL">
      <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_INITMENU">
      <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_INITMENUPOPUP">
      <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MENUSELECT">
      <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MENUCHAR">
      <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ENTERIDLE">
      <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MENURBUTTONUP">
      <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MENUDRAG">
      <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MENUGETOBJECT">
      <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_UNINITMENUPOPUP">
      <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MENUCOMMAND">
      <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CHANGEUISTATE">
      <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_UPDATEUISTATE">
      <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_QUERYUISTATE">
      <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CTLCOLORMSGBOX">
      <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CTLCOLOREDIT">
      <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CTLCOLORLISTBOX">
      <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CTLCOLORBTN">
      <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CTLCOLORDLG">
      <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CTLCOLORSCROLLBAR">
      <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CTLCOLORSTATIC">
      <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSEFIRST">
      <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSEMOVE">
      <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_LBUTTONDOWN">
      <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_LBUTTONUP">
      <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_LBUTTONDBLCLK">
      <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_RBUTTONDOWN">
      <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_RBUTTONUP">
      <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_RBUTTONDBLCLK">
      <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MBUTTONDOWN">
      <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MBUTTONUP">
      <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MBUTTONDBLCLK">
      <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSEWHEEL">
      <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_XBUTTONDOWN">
      <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_XBUTTONUP">
      <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_XBUTTONDBLCLK">
      <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSEHWHEEL">
      <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSELAST">
      <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PARENTNOTIFY">
      <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ENTERMENULOOP">
      <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_EXITMENULOOP">
      <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NEXTMENU">
      <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SIZING">
      <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CAPTURECHANGED">
      <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOVING">
      <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_POWERBROADCAST">
      <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DEVICECHANGE">
      <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDICREATE">
      <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDIDESTROY">
      <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDIACTIVATE">
      <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDIRESTORE">
      <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDINEXT">
      <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDIMAXIMIZE">
      <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDITILE">
      <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDICASCADE">
      <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDIICONARRANGE">
      <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDIGETACTIVE">
      <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDISETMENU">
      <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ENTERSIZEMOVE">
      <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_EXITSIZEMOVE">
      <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DROPFILES">
      <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MDIREFRESHMENU">
      <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_SETCONTEXT">
      <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_NOTIFY">
      <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_CONTROL">
      <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_COMPOSITIONFULL">
      <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_SELECT">
      <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_CHAR">
      <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_REQUEST">
      <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_KEYDOWN">
      <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_IME_KEYUP">
      <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSEHOVER">
      <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_MOUSELEAVE">
      <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCMOUSEHOVER">
      <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_NCMOUSELEAVE">
      <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_WTSSESSION_CHANGE">
      <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DPICHANGED">
      <summary>
            The WM_DISPLAYCHANGE message is sent when the effective dots per inch (dpi) for a window has changed. The DPI is the scale factor for a window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CUT">
      <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_COPY">
      <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PASTE">
      <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CLEAR">
      <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_UNDO">
      <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_RENDERFORMAT">
      <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_RENDERALLFORMATS">
      <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DESTROYCLIPBOARD">
      <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DRAWCLIPBOARD">
      <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PAINTCLIPBOARD">
      <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_VSCROLLCLIPBOARD">
      <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SIZECLIPBOARD">
      <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_ASKCBFORMATNAME">
      <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CHANGECBCHAIN">
      <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSCROLLCLIPBOARD">
      <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_QUERYNEWPALETTE">
      <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PALETTEISCHANGING">
      <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PALETTECHANGED">
      <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette.
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HOTKEY">
      <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PRINT">
      <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_PRINTCLIENT">
      <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_APPCOMMAND">
      <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_THEMECHANGED">
      <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CLIPBOARDUPDATE">
      <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DWMCOMPOSITIONCHANGED">
      <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DWMNCRENDERINGCHANGED">
      <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DWMCOLORIZATIONCOLORCHANGED">
      <summary>
            Sent to all top-level windows when the colorization color has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_DWMWINDOWMAXIMIZEDCHANGE">
      <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other window go opaque when this message is sent.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_GETTITLEBARINFOEX">
      <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_APP">
      <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_USER">
      <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CPL_LAUNCH">
      <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_CPL_LAUNCHED">
      <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_REFLECT">
      <summary>
            Reflects messages back to child controls. Sometimes you want to write a self-contained control based on standard Windows control, typically by
            using subclassing or superclassing. Unfortunately, most standard controls send interesting notifications to their parents, not to themselves, so
            your window proc won't normally receive them. A parent window could help by reflecting (sending) those messages back to the child window so that
            your window proc could process them. By convention, a message WM_X is reflected back as (OCM__BASE + WM_X). This is mainly to avoid conflicts
            with real notifications coming from the child windows of the control (e.g. a list view control has a header control as its child window, and
            receives WM_NOTIFY from the header. It would be inconvenient if you had to figure out every time whether WM_NOTIFY came from the header or
            reflected from your parent).
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_SYSTIMER">
      <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_ACCESSIBILITYSTATE">
      <summary>
            The accessibility state has changed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_ACTIVATESHELLWINDOW">
      <summary>
            The shell should activate its main window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_APPCOMMAND">
      <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_GETMINRECT">
      <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_LANGUAGE">
      <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_REDRAW">
      <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_TASKMAN">
      <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWCREATED">
      <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWDESTROYED">
      <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWACTIVATED">
      <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowMessage.WM_HSHELL_WINDOWREPLACED">
      <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.WINDOWPOS">
      <summary>
            Contains information about the size and position of a window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WINDOWPOS.cx">
      <summary>The window width, in pixels.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WINDOWPOS.cy">
      <summary>The window height, in pixels.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WINDOWPOS.flags">
      <summary>The window position. This member can be one or more of the following values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WINDOWPOS.hwnd">
      <summary>A handle to the window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WINDOWPOS.hwndInsertAfter">
      <summary>The position of the window in Z order (front-to-back position). This member can be a handle to the window behind which this window is placed, or can be one of the special values listed with the SetWindowPos function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WINDOWPOS.x">
      <summary>The position of the left edge of the window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WINDOWPOS.y">
      <summary>The position of the top edge of the window.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.WindowStyles">
      <summary>
            Window Styles. The following styles can be specified wherever a window style is required. After the control has been created, these styles cannot be
            modified, except as noted.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_BORDER">
      <summary>The window has a thin-line border.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_CAPTION">
      <summary>The window has a title bar (includes the WS_BORDER style).</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_CHILD">
      <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_CLIPCHILDREN">
      <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_CLIPSIBLINGS">
      <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips
            all other overlapping child windows out of the region of the child window to be updated. If WS_CLIPSIBLINGS is not specified and child windows
            overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_DISABLED">
      <summary>
            The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the
            EnableWindow function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_DLGFRAME">
      <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_GROUP">
      <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the
            next control with the WS_GROUP style. The first control in each group usually has the WS_TABSTOP style so that the user can move from group to
            group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction
            keys. You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the
            SetWindowLong function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_HSCROLL">
      <summary>The window has a horizontal scroll bar.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_MAXIMIZE">
      <summary>The window is initially maximized.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_MAXIMIZEBOX">
      <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_MINIMIZE">
      <summary>The window is initially minimized.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_MINIMIZEBOX">
      <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_OVERLAPPED">
      <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_OVERLAPPEDWINDOW">
      <summary>The window is an overlapped window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_POPUP">
      <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_POPUPWINDOW">
      <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_SIZEFRAME">
      <summary>The window has a sizing border.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_SYSMENU">
      <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_TABSTOP">
      <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key. Pressing the TAB key changes the keyboard focus to
            the next control with the WS_TABSTOP style. You can turn this style on and off to change dialog box navigation. To change this style after a
            window has been created, use the SetWindowLong function. For user-created windows and modeless dialogs to work with tab stops, alter the message
            loop to call the IsDialogMessage function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_VISIBLE">
      <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStyles.WS_VSCROLL">
      <summary>The window has a vertical scroll bar.</summary>
    </member>
    <member name="T:Vanara.PInvoke.User32.WindowStylesEx">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.User32.WindowStylesEx</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_ACCEPTFILES">
      <summary>Specifies a window that accepts drag-drop files.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_APPWINDOW">
      <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_CLIENTEDGE">
      <summary>Specifies a window that has a border with a sunken edge.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_COMPOSITED">
      <summary>
            Specifies a window that paints all descendants in bottom-to-top painting order using double-buffering. This cannot be used if the window has a
            class style of either CS_OWNDC or CS_CLASSDC. This style is not supported in Windows 2000.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_CONTEXTHELP">
      <summary>
            Specifies a window that includes a question mark in the title bar. When the user clicks the question mark, the cursor changes to a question mark
            with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the
            parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window
            that typically contains help for the child window. WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_CONTROLPARENT">
      <summary>
            Specifies a window which contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager
            recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_DLGMODALFRAME">
      <summary>Specifies a window that has a double border.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_LAYERED">
      <summary>
            Specifies a window that is a layered window. This cannot be used for child windows or if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_LAYOUTRTL">
      <summary>
            Specifies a window with the horizontal origin on the right edge. Increasing horizontal values advance to the left. The shell language must
            support reading-order alignment for this to take effect.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_LEFT">
      <summary>Specifies a window that has generic left-aligned properties. This is the default.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
      <summary>
            Specifies a window with the vertical scroll bar (if present) to the left of the client area. The shell language must support reading-order
            alignment for this to take effect.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_LTRREADING">
      <summary>Specifies a window that displays text using left-to-right reading-order properties. This is the default.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_MDICHILD">
      <summary>Specifies a multiple-document interface (MDI) child window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_NOACTIVATE">
      <summary>
            Specifies a top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring
            this window to the foreground when the user minimizes or closes the foreground window. The window does not appear on the taskbar by default. To
            force the window to appear on the taskbar, use the WS_EX_APPWINDOW style. To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_NOINHERITLAYOUT">
      <summary>Specifies a window which does not pass its window layout to its child windows.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
      <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
      <summary>Specifies an overlapped window.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_PALETTEWINDOW">
      <summary>Specifies a palette window, which is a modeless dialog box that presents an array of commands.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_RIGHT">
      <summary>
            Specifies a window that has generic "right-aligned" properties. This depends on the window class. The shell language must support reading-order
            alignment for this to take effect. Using the WS_EX_RIGHT style has the same effect as using the SS_RIGHT (static), ES_RIGHT (edit), and
            BS_RIGHT/BS_RIGHTBUTTON (button) control styles.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
      <summary>Specifies a window with the vertical scroll bar (if present) to the right of the client area. This is the default.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_RTLREADING">
      <summary>
            Specifies a window that displays text using right-to-left reading-order properties. The shell language must support reading-order alignment for
            this to take effect.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_STATICEDGE">
      <summary>Specifies a window with a three-dimensional border style intended to be used for items that do not accept user input.</summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_TOOLWINDOW">
      <summary>
            Specifies a window that is intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and
            the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses
            ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by
            right-clicking or by typing ALT+SPACE.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_TOPMOST">
      <summary>
            Specifies a window that should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or
            remove this style, use the SetWindowPos function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_TRANSPARENT">
      <summary>
            Specifies a window that should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The
            window appears transparent because the bits of underlying sibling windows have already been painted. To achieve transparency without these
            restrictions, use the SetWindowRgn function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.User32.WindowStylesEx.WS_EX_WINDOWEDGE">
      <summary>Specifies a window that has a border with a raised edge.</summary>
    </member>
  </members>
</doc>