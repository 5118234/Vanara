<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Vanara.PInvoke.Gdi32</name>
  </assembly>
  <members>
    <member name="T:Vanara.PInvoke.Gdi32">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Gdi32</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.AlphaBlend(Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.BLENDFUNCTION)">
      <summary>The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels.</summary>
      <param name="hdcDest">A handle to the destination device context.</param>
      <param name="nXOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
      <param name="nYOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
      <param name="nWidthDest">The width, in logical units, of the destination rectangle.</param>
      <param name="nHeightDest">The height, in logical units, of the destination rectangle.</param>
      <param name="hdcSrc">A handle to the source device context.</param>
      <param name="nXOriginSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
      <param name="nYOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
      <param name="nWidthSrc">The width, in logical units, of the source rectangle.</param>
      <param name="nHeightSrc">The height, in logical units, of the source rectangle.</param>
      <param name="blendFunction">
            The alpha-blending function for source and destination bitmaps, a global alpha value to be applied to the entire source bitmap, and format
            information for the source bitmap. The source and destination blend functions are currently limited to AC_SRC_OVER.
            </param>
      <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.BitBlt(Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.RasterOperationMode)">
      <summary>
            The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context
            into a destination device context.
            </summary>
      <param name="hdc">A handle to the destination device context.</param>
      <param name="nXDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
      <param name="nYDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
      <param name="nWidth">The width, in logical units, of the destination rectangle.</param>
      <param name="nHeight">The height, in logical units, of the destination rectangle.</param>
      <param name="hdcSrc">A handle to the source device context.</param>
      <param name="nXSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
      <param name="nYSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
      <param name="dwRop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the color data for the destination
            rectangle to achieve the final color.
            </param>
      <returns>
            If the function succeeds, the return value is nonzero.
            <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.CreateCompatibleDC(System.IntPtr)">
      <summary>The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.</summary>
      <param name="hDC">
            A handle to an existing DC. If this handle is NULL, the function creates a memory DC compatible with the application's current screen.
            </param>
      <returns>
            If the function succeeds, the return value is the handle to a memory DC.
            <para>If the function fails, the return value is NULL.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.CreateDIBSection(Vanara.PInvoke.Gdi32.SafeDCHandle,Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode,System.IntPtr@,System.IntPtr,System.Int32)">
      <summary>
            The CreateDIBSection function creates a DIB that applications can write to directly. The function gives you a pointer to the location of the bitmap
            bit values. You can supply a handle to a file-mapping object that the function will use to create the bitmap, or you can let the system allocate the
            memory for the bitmap.
            </summary>
      <param name="hdc">
            A handle to a device context. If the value of iUsage is DIB_PAL_COLORS, the function uses this device context's logical palette to initialize the DIB colors.
            </param>
      <param name="pbmi">A pointer to a BITMAPINFO structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.</param>
      <param name="iUsage">
            The type of data contained in the bmiColors array member of the BITMAPINFO structure pointed to by pbmi (either logical palette indexes or literal
            RGB values).
            </param>
      <param name="ppvBits">A pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
      <param name="hSection">
            A handle to a file-mapping object that the function will use to create the DIB. This parameter can be NULL.
            <para>
            If hSection is not NULL, it must be a handle to a file-mapping object created by calling the CreateFileMapping function with the PAGE_READWRITE or
            PAGE_WRITECOPY flag. Read-only DIB sections are not supported. Handles created by other means will cause CreateDIBSection to fail.
            </para><para>
            If hSection is not NULL, the CreateDIBSection function locates the bitmap bit values at offset dwOffset in the file-mapping object referred to by
            hSection. An application can later retrieve the hSection handle by calling the GetObject function with the HBITMAP returned by CreateDIBSection.
            </para><para>
            If hSection is NULL, the system allocates memory for the DIB. In this case, the CreateDIBSection function ignores the dwOffset parameter. An
            application cannot later obtain a handle to this memory. The dshSection member of the DIBSECTION structure filled in by calling the GetObject
            function will be NULL.
            </para></param>
      <param name="dwOffset">
            The offset from the beginning of the file-mapping object referenced by hSection where storage for the bitmap bit values is to begin. This value is
            ignored if hSection is NULL. The bitmap bit values are aligned on doubleword boundaries, so dwOffset must be a multiple of the size of a DWORD.
            </param>
      <returns>
            If the function succeeds, the return value is a handle to the newly created DIB, and *ppvBits points to the bitmap bit values.
            <para>If the function fails, the return value is NULL, and *ppvBits is NULL.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.DeleteDC(System.IntPtr)">
      <summary>The DeleteDC function deletes the specified device context (DC).</summary>
      <param name="hdc">A handle to the device context.</param>
      <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.DeleteObject(System.IntPtr)">
      <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object.
            After the object is deleted, the specified handle is no longer valid.
            </summary>
      <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
      <returns>
            If the function succeeds, the return value is nonzero. If the specified handle is not valid or is currently selected into a DC, the return value is zero.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.GdiFlush">
      <summary>The GdiFlush function flushes the calling thread's current batch.</summary>
      <returns>
            If all functions in the current batch succeed, the return value is nonzero.
            <para>If not all functions in the current batch succeed, the return value is zero, indicating that at least one function returned an error.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.GetDIBits(Vanara.PInvoke.Gdi32.SafeDCHandle,System.IntPtr,System.Int32,System.Int32,System.Byte[]@,Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode)">
      <summary>
            The GetDIBits function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format.
            </summary>
      <param name="hdc">A handle to the device context.</param>
      <param name="hbmp">A handle to the bitmap. This must be a compatible bitmap (DDB).</param>
      <param name="uStartScan">The first scan line to retrieve.</param>
      <param name="cScanLines">The number of scan lines to retrieve.</param>
      <param name="lpvBits">
            A pointer to a buffer to receive the bitmap data. If this parameter is NULL, the function passes the dimensions and format of the bitmap to the
            BITMAPINFO structure pointed to by the lpbi parameter.
            </param>
      <param name="lpbi">A pointer to a BITMAPINFO structure that specifies the desired format for the DIB data.</param>
      <param name="uUsage">The format of the bmiColors member of the BITMAPINFO structure.</param>
      <returns>
            If the lpvBits parameter is non-NULL and the function succeeds, the return value is the number of scan lines copied from the bitmap.
            <para>If the lpvBits parameter is NULL and GetDIBits successfully fills the BITMAPINFO structure, the return value is nonzero.</para><para>If the function fails, the return value is zero.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.GetDIBits(Vanara.PInvoke.Gdi32.SafeDCHandle,System.IntPtr,System.Int32,System.Int32,System.IntPtr,Vanara.PInvoke.Gdi32.BITMAPINFO@,Vanara.PInvoke.Gdi32.DIBColorMode)">
      <summary>
            The GetDIBits function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format.
            </summary>
      <param name="hdc">A handle to the device context.</param>
      <param name="hbmp">A handle to the bitmap. This must be a compatible bitmap (DDB).</param>
      <param name="uStartScan">The first scan line to retrieve.</param>
      <param name="cScanLines">The number of scan lines to retrieve.</param>
      <param name="lpvBits">
            A pointer to a buffer to receive the bitmap data. If this parameter is NULL, the function passes the dimensions and format of the bitmap to the
            BITMAPINFO structure pointed to by the lpbi parameter.
            </param>
      <param name="lpbi">A pointer to a BITMAPINFO structure that specifies the desired format for the DIB data.</param>
      <param name="uUsage">The format of the bmiColors member of the BITMAPINFO structure.</param>
      <returns>
            If the lpvBits parameter is non-NULL and the function succeeds, the return value is the number of scan lines copied from the bitmap.
            <para>If the lpvBits parameter is NULL and GetDIBits successfully fills the BITMAPINFO structure, the return value is nonzero.</para><para>If the function fails, the return value is zero.</para></returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.GetObject``1(System.IntPtr)">
      <summary>The GetObject function retrieves information for the specified graphics object.</summary>
      <param name="hgdiobj">
            A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a
            device independent bitmap created by calling the CreateDIBSection function.
            </param>
      <typeparam name="T">The output structure type.</typeparam>
      <returns>The output structure holding the information for the graphics object.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.GetObject(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>The GetObject function retrieves information for the specified graphics object.</summary>
      <param name="hgdiobj">
            A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a
            device independent bitmap created by calling the CreateDIBSection function.
            </param>
      <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
      <param name="lpvObject">
            A pointer to a buffer that receives the information about the specified graphics object. If the <paramref name="lpvObject" /> parameter is NULL, the
            function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.
            </param>
      <returns>
            If the function succeeds, and <paramref name="lpvObject" /> is a valid pointer, the return value is the number of bytes stored into the buffer.
            <para>
            If the function succeeds, and <paramref name="lpvObject" /> is NULL, the return value is the number of bytes required to hold the information the
            function would store into the buffer.
            </para><para>If the function fails, the return value is zero.</para></returns>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LF_FACESIZE">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:Vanara.PInvoke.Gdi32.LF_FACESIZE</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SelectObject(Vanara.PInvoke.Gdi32.SafeDCHandle,System.IntPtr)">
      <summary>
            The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type.
            </summary>
      <param name="hDC">A handle to the DC.</param>
      <param name="hObject">A handle to the object to be selected. The specified object must have been created by using one of the following functions.</param>
      <returns>
            If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. If the selected object
            is a region and the function succeeds, the return value is one of the following values.
            </returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SetBkMode(Vanara.PInvoke.Gdi32.SafeDCHandle,Vanara.PInvoke.Gdi32.BackgroundMode)">
      <summary>
            The SetBkMode function sets the background mix mode of the specified device context. The background mix mode is used with text, hatched brushes, and
            pen styles that are not solid lines.
            </summary>
      <param name="hdc">A handle to the device context.</param>
      <param name="mode">The background mode.</param>
      <returns>If the function succeeds, the return value specifies the previous background mode. If the function fails, the return value is zero.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SetLayout(Vanara.PInvoke.Gdi32.SafeDCHandle,Vanara.PInvoke.Gdi32.DCLayout)">
      <summary>The SetLayout function changes the layout of a device context (DC).</summary>
      <param name="hdc">A handle to the DC.</param>
      <param name="dwLayout">The DC layout.</param>
      <returns>If the function succeeds, it returns the previous layout of the DC. If the function fails, it returns GDI_ERROR.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.TransparentBlt(Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            The TransparentBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device
            context into a destination device context.
            </summary>
      <param name="hdcDest">A handle to the destination device context.</param>
      <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
      <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
      <param name="wDest">The width, in logical units, of the destination rectangle.</param>
      <param name="hDest">The height, in logical units, of the destination rectangle.</param>
      <param name="hdcSrc">A handle to the source device context.</param>
      <param name="xOriginSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
      <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
      <param name="wSrc">The width, in logical units, of the source rectangle.</param>
      <param name="hSrc">The height, in logical units, of the source rectangle.</param>
      <param name="crTransparent">The RGB color in the source bitmap to treat as transparent.</param>
      <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.BackgroundMode">
      <summary>The background mode used by the <see cref="M:Vanara.PInvoke.Gdi32.SetBkMode(Vanara.PInvoke.Gdi32.SafeDCHandle,Vanara.PInvoke.Gdi32.BackgroundMode)" /> function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BackgroundMode.ERROR">
      <summary>Indicates that on return, the <see cref="M:Vanara.PInvoke.Gdi32.SetBkMode(Vanara.PInvoke.Gdi32.SafeDCHandle,Vanara.PInvoke.Gdi32.BackgroundMode)" /> has failed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BackgroundMode.TRANSPARENT">
      <summary>Background remains untouched.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BackgroundMode.OPAQUE">
      <summary>Background is filled with the current background color before the text, hatched brush, or pen is drawn.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.BitmapCompressionMode">
      <summary>The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed). Used in <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_RGB">
      <summary>An uncompressed format.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_RLE8">
      <summary>
            A run-length encoded (RLE) format for bitmaps with 8 bpp. The compression format is a 2-byte format consisting of a count byte followed by a byte
            containing a color index.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_RLE4">
      <summary>
            An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte followed by two word-length color indexes.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_BITFIELDS">
      <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green, and blue
            components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_JPEG">
      <summary>Indicates that the image is a JPEG image.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BitmapCompressionMode.BI_PNG">
      <summary>Indicates that the image is a PNG image.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.BITMAPINFO">
      <summary>The BITMAPINFO structure defines the dimensions and color information for a DIB.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.BITMAPINFO.#ctor(System.Int32,System.Int32,System.UInt16)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.BITMAPINFO" /> structure.</summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="bitCount">The bit count.</param>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFO.bmiColors">
      <summary>
            The bmiColors member contains one of the following:
            <list type="bullet"><item><description>An array of RGBQUAD. The elements of the array that make up the color table.</description></item><item><description>
            An array of 16-bit unsigned integers that specifies indexes into the currently realized logical palette. This use of bmiColors is allowed for
            functions that use DIBs. When bmiColors elements contain indexes to a realized logical palette, they must also call the following bitmap
            functions: CreateDIBitmap, CreateDIBPatternBrush, CreateDIBSection (The iUsage parameter of CreateDIBSection must be set to DIB_PAL_COLORS.)
            </description></item></list><para>The number of entries in the array depends on the values of the biBitCount and biClrUsed members of the BITMAPINFOHEADER structure.</para><para>The colors in the bmiColors table appear in order of importance. For more information, see the Remarks section.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFO.bmiHeader">
      <summary>A BITMAPINFOHEADER structure that contains information about the dimensions of color format.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER">
      <summary>The BITMAPINFOHEADER structure contains information about the dimensions and color format of a DIB.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biBitCount">
      <summary>
            The number of bits-per-pixel. The biBitCount member of the BITMAPINFOHEADER structure determines the number of bits that define each pixel and
            the maximum number of colors in the bitmap. This member must be one of the following values.
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>0</term><description>The number of bits-per-pixel is specified or is implied by the JPEG or PNG format.</description></item><item><term>1</term><description>
            The bitmap is monochrome, and the bmiColors member of BITMAPINFO contains two entries. Each bit in the bitmap array represents a pixel. If the
            bit is clear, the pixel is displayed with the color of the first entry in the bmiColors table; if the bit is set, the pixel has the color of the
            second entry in the table.
            </description></item><item><term>4</term><description>
            The bitmap has a maximum of 16 colors, and the bmiColors member of BITMAPINFO contains up to 16 entries. Each pixel in the bitmap is represented
            by a 4-bit index into the color table. For example, if the first byte in the bitmap is 0x1F, the byte represents two pixels. The first pixel
            contains the color in the second table entry, and the second pixel contains the color in the sixteenth table entry.
            </description></item><item><term>8</term><description>
            The bitmap has a maximum of 256 colors, and the bmiColors member of BITMAPINFO contains up to 256 entries. In this case, each byte in the array
            represents a single pixel.
            </description></item><item><term>16</term><description>
            The bitmap has a maximum of 2^16 colors. If the biCompression member of the BITMAPINFOHEADER is BI_RGB, the bmiColors member of BITMAPINFO is
            NULL. Each WORD in the bitmap array represents a single pixel. The relative intensities of red, green, and blue are represented with five bits
            for each color component. The value for blue is in the least significant five bits, followed by five bits each for green and red. The most
            significant bit is not used. The bmiColors color table is used for optimizing colors used on palette-based devices, and must contain the number
            of entries specified by the biClrUsed member of the BITMAPINFOHEADER.
            <para>
            If the biCompression member of the BITMAPINFOHEADER is BI_BITFIELDS, the bmiColors member contains three DWORD color masks that specify the red,
            green, and blue components, respectively, of each pixel. Each WORD in the bitmap array represents a single pixel.
            </para><para>
            When the biCompression member is BI_BITFIELDS, bits set in each DWORD mask must be contiguous and should not overlap the bits of another mask.
            All the bits in the pixel do not have to be used.
            </para></description></item><item><term>24</term><description>
            The bitmap has a maximum of 2^24 colors, and the bmiColors member of BITMAPINFO is NULL. Each 3-byte triplet in the bitmap array represents the
            relative intensities of blue, green, and red, respectively, for a pixel. The bmiColors color table is used for optimizing colors used on
            palette-based devices, and must contain the number of entries specified by the biClrUsed member of the BITMAPINFOHEADER.
            </description></item><item><term>32</term><description>
            The bitmap has a maximum of 2^32 colors. If the biCompression member of the BITMAPINFOHEADER is BI_RGB, the bmiColors member of BITMAPINFO is
            NULL. Each DWORD in the bitmap array represents the relative intensities of blue, green, and red for a pixel. The value for blue is in the least
            significant 8 bits, followed by 8 bits each for green and red. The high byte in each DWORD is not used. The bmiColors color table is used for
            optimizing colors used on palette-based devices, and must contain the number of entries specified by the biClrUsed member of the BITMAPINFOHEADER.
            <para>
            If the biCompression member of the BITMAPINFOHEADER is BI_BITFIELDS, the bmiColors member contains three DWORD color masks that specify the red,
            green, and blue components, respectively, of each pixel. Each DWORD in the bitmap array represents a single pixel.
            </para><para>
            When the biCompression member is BI_BITFIELDS, bits set in each DWORD mask must be contiguous and should not overlap the bits of another mask.
            All the bits in the pixel do not need to be used.
            </para></description></item></list></summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biClrImportant">
      <summary>The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are required.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biClrUsed">
      <summary>
            The number of color indexes in the color table that are actually used by the bitmap. If this value is zero, the bitmap uses the maximum number of
            colors corresponding to the value of the biBitCount member for the compression mode specified by biCompression.
            <para>
            If biClrUsed is nonzero and the biBitCount member is less than 16, the biClrUsed member specifies the actual number of colors the graphics engine
            or device driver accesses. If biBitCount is 16 or greater, the biClrUsed member specifies the size of the color table used to optimize
            performance of the system color palettes. If biBitCount equals 16 or 32, the optimal color palette starts immediately following the three DWORD masks.
            </para><para>
            When the bitmap array immediately follows the BITMAPINFO structure, it is a packed bitmap. Packed bitmaps are referenced by a single pointer.
            Packed bitmaps require that the biClrUsed member must be either zero or the actual size of the color table.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biCompression">
      <summary>The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biHeight">
      <summary>
            The height of the bitmap, in pixels. If biHeight is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner. If biHeight
            is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            <para>If biHeight is negative, indicating a top-down DIB, biCompression must be either BI_RGB or BI_BITFIELDS. Top-down DIBs cannot be compressed.</para><para>If biCompression is BI_JPEG or BI_PNG, the biHeight member specifies the height of the decompressed JPEG or PNG image file, respectively.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biPlanes">
      <summary>The number of planes for the target device. This value must be set to 1.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biSize">
      <summary>The number of bytes required by the structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biSizeImage">
      <summary>
            The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps. If biCompression is BI_JPEG or BI_PNG, biSizeImage indicates the
            size of the JPEG or PNG image buffer, respectively.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biWidth">
      <summary>
            The width of the bitmap, in pixels. If biCompression is BI_JPEG or BI_PNG, the biWidth member specifies the width of the decompressed JPEG or PNG
            image file, respectively.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biXPelsPerMeter">
      <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. An application can use this value to select a bitmap from a
            resource group that best matches the characteristics of the current device.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BITMAPINFOHEADER.biYPelsPerMeter">
      <summary>The vertical resolution, in pixels-per-meter, of the target device for the bitmap.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.BLENDFUNCTION">
      <summary>
            The BLENDFUNCTION structure controls blending by specifying the blending functions for source and destination bitmaps.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.BLENDFUNCTION.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.BLENDFUNCTION" /> struct and sets the alpha value.</summary>
      <param name="alpha">The alpha.</param>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.AlphaFormat">
      <summary>
            This member controls the way the source and destination bitmaps are interpreted. AlphaFormat has the following value.
            <para><c>AC_SRC_ALPHA</c> This flag is set when the bitmap has an Alpha channel (that is, per-pixel alpha). Note that the APIs use premultiplied alpha,
            which means that the red, green and blue channel values in the bitmap must be premultiplied with the alpha channel value. For example, if the
            alpha channel value is x, the red, green and blue channels must be multiplied by x and divided by 0xff prior to the call.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.BlendFlags">
      <summary>Must be zero.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.BlendOp">
      <summary>
            The source blend operation. Currently, the only source and destination blend operation that has been defined is AC_SRC_OVER. For details, see the
            following Remarks section.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.BLENDFUNCTION.IsEmpty">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Vanara.PInvoke.Gdi32.BLENDFUNCTION.IsEmpty</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.BLENDFUNCTION.SourceConstantAlpha">
      <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap. The SourceConstantAlpha value is combined with any per-pixel alpha
            values in the source bitmap. If you set SourceConstantAlpha to 0, it is assumed that your image is transparent. Set the SourceConstantAlpha value
            to 255 (opaque) when you only want to use per-pixel alpha values.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.DCLayout">
      <summary>The DC layout used by the <see cref="M:Vanara.PInvoke.Gdi32.SetLayout(Vanara.PInvoke.Gdi32.SafeDCHandle,Vanara.PInvoke.Gdi32.DCLayout)" /> function.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.DCLayout.GDI_ERROR">
      <summary>Indicates that on return, the <see cref="M:Vanara.PInvoke.Gdi32.SetLayout(Vanara.PInvoke.Gdi32.SafeDCHandle,Vanara.PInvoke.Gdi32.DCLayout)" /> has failed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_RTL">
      <summary>Sets the default horizontal layout to be right to left.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_BTT">
      <summary>Sets the default horizontal layout to be bottom to top.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_VBH">
      <summary>Sets the default horizontal layout to be vertical before horizontal.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.DCLayout.LAYOUT_BITMAPORIENTATIONPRESERVED">
      <summary>Disables any reflection during BitBlt and StretchBlt operations.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.DIBColorMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Gdi32.DIBColorMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.DIBColorMode.DIB_RGB_COLORS">
      <summary>The BITMAPINFO structure contains an array of literal RGB values.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.DIBColorMode.DIB_PAL_COLORS">
      <summary>
            The bmiColors member of the BITMAPINFO structure is an array of 16-bit indexes into the logical palette of the device context specified by hdc.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.LOGFONT">
      <summary>The LOGFONT structure defines the attributes of a font.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.LOGFONT.FontFamily">
      <summary>Gets or sets the font family.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.LOGFONT.FromFont(System.Drawing.Font)">
      <summary>Gets a <see cref="T:Vanara.PInvoke.Gdi32.LOGFONT" /> structure from a <see cref="T:System.Drawing.Font" />.</summary>
      <param name="font">The font.</param>
      <returns>A <see cref="T:Vanara.PInvoke.Gdi32.LOGFONT" /> structure.</returns>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfCharSet">
      <summary>The character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfClipPrecision">
      <summary>The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfEscapement">
      <summary>
            The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line
            of a row of text.
            <para>
            When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation angle of the
            string's characters.
            </para><para>
            When the graphics mode is set to GM_COMPATIBLE, lfEscapement specifies both the escapement and orientation. You should set lfEscapement and
            lfOrientation to the same value.
            </para></summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.LOGFONT.lfFaceName">
      <summary>
            A string that specifies the typeface name of the font. The length of this string must not exceed 31 characters. The EnumFontFamiliesEx function
            can be used to enumerate the typeface names of all currently available fonts. If lfFaceName is an empty string, GDI uses the first font that
            matches the other specified attributes.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfHeight">
      <summary>
            The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the
            character cell height value minus the internal-leading value. The font mapper interprets the value specified in lfHeight in the following manner.
            <list type="table"><listheader><term>Value</term><definition>Meaning</definition></listheader><item><term>&gt; 0</term><definition>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</definition></item><item><term>0</term><definition>The font mapper uses a default height value when it searches for a match.</definition></item><item><term>&lt; 0</term><definition>The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts.</definition></item></list><para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para><para>This mapping occurs when the font is used for the first time.</para><para>For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:</para></summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.LOGFONT.lfItalic">
      <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.Gdi32.LOGFONT" /> is italicized.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfOrientation">
      <summary>The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfOutPrecision">
      <summary>
            The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation,
            escapement, pitch, and font type.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfQuality">
      <summary>
            The output quality. The output quality defines how carefully the graphics device interface (GDI) must attempt to match the logical-font
            attributes to those of an actual physical font.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.LOGFONT.lfStrikeOut">
      <summary>Gets or sets a value indicating whether struck out.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.LOGFONT.lfUnderline">
      <summary>Gets or sets a value indicating whether this <see cref="T:Vanara.PInvoke.Gdi32.LOGFONT" /> is underlined.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.LOGFONT.lfWeight">
      <summary>
            The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LOGFONT.lfWidth">
      <summary>
            The average width, in logical units, of characters in the font. If lfWidth is zero, the aspect ratio of the device is matched against the
            digitization aspect ratio of the available fonts to find the closest match, determined by the absolute value of the difference.
            </summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.LOGFONT.Pitch">
      <summary>Gets or sets the font pitch.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.LOGFONT.ToFont">
      <summary>Converts this structure to a <see cref="T:System.Drawing.Font" />.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> matching the values of this structure.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.LOGFONT.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.LogFontCharSet">
      <summary>The character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.ANSI_CHARSET">
      <summary>Specifies the English character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.DEFAULT_CHARSET">
      <summary>
            Specifies a character set based on the current system locale; for example, when the system locale is United States English, the default character
            set is ANSI_CHARSET.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.SYMBOL_CHARSET">
      <summary>Specifies a character set of symbols.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.SHIFTJIS_CHARSET">
      <summary>Specifies the Japanese character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.HANGEUL_CHARSET">
      <summary>Specifies the Hangul Korean character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.HANGUL_CHARSET">
      <summary>Also spelled "Hangeul". Specifies the Hangul Korean character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.GB2312_CHARSET">
      <summary>Specifies the "simplified" Chinese character set for People's Republic of China.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.CHINESEBIG5_CHARSET">
      <summary>Specifies the "traditional" Chinese character set, used mostly in Taiwan and in the Hong Kong and Macao Special Administrative Regions.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.OEM_CHARSET">
      <summary>Specifies a mapping to one of the OEM code pages, according to the current system locale setting.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.JOHAB_CHARSET">
      <summary>Also spelled "Johap". Specifies the Johab Korean character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.HEBREW_CHARSET">
      <summary>Specifies the Hebrew character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.ARABIC_CHARSET">
      <summary>Specifies the Arabic character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.GREEK_CHARSET">
      <summary>Specifies the Greek character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.TURKISH_CHARSET">
      <summary>Specifies the Turkish character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.VIETNAMESE_CHARSET">
      <summary>Specifies the Vietnamese character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.THAI_CHARSET">
      <summary>Specifies the Thai character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.EASTEUROPE_CHARSET">
      <summary>Specifies a Eastern European character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.RUSSIAN_CHARSET">
      <summary>Specifies the Russian Cyrillic character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.MAC_CHARSET">
      <summary>Specifies the Apple Macintosh character set.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontCharSet.BALTIC_CHARSET">
      <summary>Specifies the Baltic (Northeastern European) character set.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.LogFontClippingPrecision">
      <summary>The clipping precision defines how to clip characters that are partially outside the clipping region.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_CHARACTER_PRECIS">
      <summary>Not used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_DEFAULT_PRECIS">
      <summary>Specifies default clipping behavior.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_DFA_DISABLE">
      <summary>
            Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows
            Server 2003.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_DFA_OVERRIDE">
      <summary>
            Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the recommended flag
            to use is CLIP_DFA_DISABLE.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_EMBEDDED">
      <summary>You must specify this flag to use an embedded read-only font.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_LH_ANGLES">
      <summary>
            When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.
            If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_MASK">
      <summary>Not used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_STROKE_PRECIS">
      <summary>
            Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated. For compatibility, this value is always
            returned when enumerating fonts.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontClippingPrecision.CLIP_TT_ALWAYS">
      <summary>Not used.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.LogFontFontFamily">
      <summary>
            Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface desired is not available.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontFontFamily.FF_DONTCARE">
      <summary>Use default font.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontFontFamily.FF_ROMAN">
      <summary>Fonts with variable stroke width (proportional) and with serifs. MS Serif is an example.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontFontFamily.FF_SWISS">
      <summary>Fonts with variable stroke width (proportional) and without serifs. MS Sans Serif is an example.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontFontFamily.FF_MODERN">
      <summary>
            Fonts with constant stroke width (monospace), with or without serifs. Monospace fonts are usually modern. Pica, Elite, and CourierNew are examples.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontFontFamily.FF_SCRIPT">
      <summary>Fonts designed to look like handwriting. Script and Cursive are examples.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontFontFamily.FF_DECORATIVE">
      <summary>Novelty fonts. Old English is an example.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.LogFontOutputPrecision">
      <summary>
            The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation,
            escapement, pitch, and font type.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_CHARACTER_PRECIS">
      <summary>Not used.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_DEFAULT_PRECIS">
      <summary>Specifies the default font mapper behavior.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_DEVICE_PRECIS">
      <summary>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_OUTLINE_PRECIS">
      <summary>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_PS_ONLY_PRECIS">
      <summary>
            Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns
            to default behavior.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_RASTER_PRECIS">
      <summary>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_SCREEN_OUTLINE_PRECIS">
      <summary>A value that specifies a preference for TrueType and other outline fonts.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_STRING_PRECIS">
      <summary>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_STROKE_PRECIS">
      <summary>This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_TT_ONLY_PRECIS">
      <summary>
            Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to
            default behavior.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputPrecision.OUT_TT_PRECIS">
      <summary>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.LogFontOutputQuality">
      <summary>
            The output quality defines how carefully the graphics device interface (GDI) must attempt to match the logical-font attributes to those of an actual
            physical font.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputQuality.DEFAULT_QUALITY">
      <summary>Appearance of the font does not matter.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputQuality.DRAFT_QUALITY">
      <summary>
            Appearance of the font is less important than when PROOF_QUALITY is used. For GDI raster fonts, scaling is enabled, which means that more font
            sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized if necessary.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputQuality.PROOF_QUALITY">
      <summary>
            Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and
            the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font
            is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are synthesized if necessary.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputQuality.NONANTIALIASED_QUALITY">
      <summary>Font is never antialiased.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputQuality.ANTIALIASED_QUALITY">
      <summary>Font is always antialiased if the font supports it and the size of the font is not too small or too large.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputQuality.CLEARTYPE_QUALITY">
      <summary>
            If set, text is rendered (when possible) using ClearType antialiasing method. The font quality is given less importance than maintaining the text size.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontOutputQuality.CLEARTYPE_NATURAL_QUALITY">
      <summary>
            If set, text is rendered (when possible) using ClearType antialiasing method. The font quality is given more importance than maintaining the text size.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.LogFontPitch">
      <summary>The pitch of the font.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontPitch.DEFAULT_PITCH">
      <summary>The default pitch.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontPitch.FIXED_PITCH">
      <summary>The pitch is fixed.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.LogFontPitch.VARIABLE_PITCH">
      <summary>The pitch is variable.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.RasterOperationMode">
      <summary>
            Defines how the color data for the source rectangle is to be combined with the color data for the destination rectangle to achieve the final color
            when using the <see cref="M:Vanara.PInvoke.Gdi32.BitBlt(Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.SafeDCHandle,System.Int32,System.Int32,Vanara.PInvoke.Gdi32.RasterOperationMode)" /> function.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCCOPY">
      <summary>Copies the source rectangle directly to the destination rectangle.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCPAINT">
      <summary>Combines the colors of the source and destination rectangles by using the Boolean OR operator.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCAND">
      <summary>Combines the colors of the source and destination rectangles by using the Boolean AND operator.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCINVERT">
      <summary>Combines the colors of the source and destination rectangles by using the Boolean XOR operator.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.SRCERASE">
      <summary>Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.NOTSRCCOPY">
      <summary></summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.NOTSRCERASE">
      <summary>Copies the inverted source rectangle to the destination.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.MERGECOPY">
      <summary>Merges the colors of the source rectangle with the brush currently selected in hdcDest, by using the Boolean AND operator.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.MERGEPAINT">
      <summary>Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.PATCOPY">
      <summary>Copies the brush currently selected in hdcDest, into the destination bitmap.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.PATPAINT">
      <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle by using the Boolean OR
            operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.PATINVERT">
      <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the destination rectangle by using the Boolean XOR operator.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.DSTINVERT">
      <summary>Inverts the destination rectangle.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.BLACKNESS">
      <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.WHITENESS">
      <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.NOMIRRORBITMAP">
      <summary>Prevents the bitmap from being mirrored.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RasterOperationMode.CAPTUREBLT">
      <summary>
            Includes any windows that are layered on top of your window in the resulting image.By default, the image only contains your window.Note that this
            generally cannot be used for printing device contexts.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.RGBQUAD">
      <summary>The RGBQUAD structure describes a color consisting of relative intensities of red, green, and blue.</summary>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.RGBQUAD.Color">
      <summary>Gets or sets the color associated with the <see cref="T:Vanara.PInvoke.Gdi32.RGBQUAD" /> structure.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RGBQUAD.rgbBlue">
      <summary>The intensity of blue in the color.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RGBQUAD.rgbGreen">
      <summary>The intensity of green in the color.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RGBQUAD.rgbRed">
      <summary>The intensity of red in the color.</summary>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.RGBQUAD.rgbReserved">
      <summary>This member is reserved and must be zero.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.SafeDCHandle">
      <summary>A SafeHandle to track DC handles.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCHandle.#ctor(System.Drawing.IDeviceContext)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeDCHandle" /> class.</summary>
      <param name="dc">An <see cref="T:System.Drawing.IDeviceContext" /> instance.</param>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.Gdi32.SafeDCHandle" /> class.</summary>
      <param name="hDC">The handle to the DC.</param>
      <param name="ownsHandle">
        <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized; <see langword="false" /> otherwise.
            </param>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCHandle.GetCompatibleDCHandle">
      <summary>Gets the compatible device context handle.</summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Gdi32.SafeDCHandle.GetCompatibleDCHandle</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:Vanara.PInvoke.Gdi32.SafeDCHandle.Null">
      <summary>A null handle.</summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCHandle.op_Explicit(Vanara.PInvoke.Gdi32.SafeDCHandle)~System.Drawing.Graphics">
      <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.Gdi32.SafeDCHandle" /> to <see cref="T:System.Drawing.Graphics" />.</summary>
      <param name="hdc">The HDC.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCHandle.op_Implicit(System.Drawing.Graphics)~Vanara.PInvoke.Gdi32.SafeDCHandle">
      <summary>Performs an implicit conversion from <see cref="T:System.Drawing.Graphics" /> to <see cref="T:Vanara.PInvoke.Gdi32.SafeDCHandle" />.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> instance.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCHandle.ReleaseHandle">
      <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
      <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</returns>
    </member>
    <member name="P:Vanara.PInvoke.Gdi32.SafeDCHandle.ScreenCompatibleDCHandle">
      <summary>Gets the screen compatible device context handle.</summary>
    </member>
    <member name="T:Vanara.PInvoke.Gdi32.SafeDCObjectHandle">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Vanara.PInvoke.Gdi32.SafeDCObjectHandle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCObjectHandle.#ctor(Vanara.PInvoke.Gdi32.SafeDCHandle,System.IntPtr)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Vanara.PInvoke.Gdi32.SafeDCObjectHandle</parameter>
          </include>
        </markup>
      </summary>
      <param name="hdc">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hdc</parameter>
            <parameter>M:Vanara.PInvoke.Gdi32.SafeDCObjectHandle.#ctor(Vanara.PInvoke.Gdi32.SafeDCHandle,System.IntPtr)</parameter>
          </include>
        </markup>
      </param>
      <param name="hObj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hObj</parameter>
            <parameter>M:Vanara.PInvoke.Gdi32.SafeDCObjectHandle.#ctor(Vanara.PInvoke.Gdi32.SafeDCHandle,System.IntPtr)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Vanara.PInvoke.Gdi32.SafeDCObjectHandle.ReleaseHandle">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Vanara.PInvoke.Gdi32.SafeDCObjectHandle.ReleaseHandle</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Vanara.PInvoke.Gdi32.SafeDCObjectHandle.ReleaseHandle</parameter>
          </include>
        </markup>
      </returns>
    </member>
  </members>
</doc>