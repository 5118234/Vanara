<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Vanara.PInvoke.NetApi32</name>
  </assembly>
  <members>
    <member name="T:Vanara.PInvoke.NetApi32">
      <summary>Platform invokable enumerated types, constants and functions from netapi32.h</summary>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.DsGetDcName(System.String,System.String,System.IntPtr,System.String,Vanara.PInvoke.NetApi32.DsGetDcNameFlags,Vanara.PInvoke.NetApi32.SafeNetApiBuffer@)">
      <summary>
            The DsGetDcName function returns the name of a domain controller in a specified domain. This function accepts additional domain controller selection
            criteria to indicate preference for a domain controller with particular characteristics.
            </summary>
      <param name="ComputerName">
            Pointer to a null-terminated string that specifies the name of the server to process this function. Typically, this parameter is NULL, which
            indicates that the local computer is used.
            </param>
      <param name="DomainName">
            Pointer to a null-terminated string that specifies the name of the domain or application partition to query. This name can either be a DNS style
            name, for example, fabrikam.com, or a flat-style name, for example, Fabrikam. If a DNS style name is specified, the name may be specified with or
            without a trailing period.
            <para>
            If the Flags parameter contains the DS_GC_SERVER_REQUIRED flag, DomainName must be the name of the forest. In this case, DsGetDcName fails if
            DomainName specifies a name that is not the forest root.
            </para><para>
            If the Flags parameter contains the DS_GC_SERVER_REQUIRED flag and DomainName is NULL, DsGetDcName attempts to find a global catalog in the forest of
            the computer identified by ComputerName, which is the local computer if ComputerName is NULL.
            </para><para>
            If DomainName is NULL and the Flags parameter does not contain the DS_GC_SERVER_REQUIRED flag, ComputerName is set to the default domain name of the
            primary domain of the computer identified by ComputerName.
            </para></param>
      <param name="DomainGuid">
            Pointer to a GUID structure that specifies the GUID of the domain queried. If DomainGuid is not NULL and the domain specified by DomainName or
            ComputerName cannot be found, DsGetDcName attempts to locate a domain controller in the domain having the GUID specified by DomainGuid.
            </param>
      <param name="SiteName">
            Pointer to a null-terminated string that specifies the name of the site where the returned domain controller should physically exist. If this
            parameter is NULL, DsGetDcName attempts to return a domain controller in the site closest to the site of the computer specified by ComputerName. This
            parameter should be NULL, by default.
            </param>
      <param name="Flags">
            Contains a set of flags that provide additional data used to process the request. This parameter can be a combination of the following values.
            </param>
      <param name="DomainControllerInfo">
            Pointer to a PDOMAIN_CONTROLLER_INFO value that receives a pointer to a DOMAIN_CONTROLLER_INFO structure that contains data about the domain
            controller selected. This structure is allocated by DsGetDcName. The caller must free the structure using the NetApiBufferFree function when it is no
            longer required.
            </param>
      <returns>
            If the function returns domain controller data, the return value is ERROR_SUCCESS.
            <para>If the function fails, the return value can be one of the following error codes.</para></returns>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.MAX_PREFERRED_LENGTH">
      <summary>
            A constant of type DWORD that is set to –1. This value is valid as an input parameter to any method that takes a PreferedMaximumLength parameter.
            When specified as an input parameter, this value indicates that the method MUST allocate as much space as the data requires.
            </summary>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.NetApiBufferFree(System.IntPtr)">
      <summary>
            The NetApiBufferFree function frees the memory that the NetApiBufferAllocate function allocates. Applications should also call NetApiBufferFree to
            free the memory that other network management functions use internally to return information.
            </summary>
      <param name="pBuf">
            A pointer to a buffer returned previously by another network management function or memory allocated by calling the NetApiBufferAllocate function.
            </param>
      <returns>If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code.</returns>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.NetServerEnum(System.String,System.Int32,Vanara.PInvoke.NetApi32.SafeNetApiBuffer@,System.Int32,System.Int32@,System.Int32@,Vanara.PInvoke.NetApi32.NetServerEnumFilter,System.String,System.IntPtr)">
      <summary>The NetServerEnum function lists all servers of the specified type that are visible in a domain.</summary>
      <param name="servernane">Reserved; must be NULL.</param>
      <param name="level">The information level of the data requested.</param>
      <param name="bufptr">
            A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the
            system and must be freed using the NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA.
            </param>
      <param name="prefmaxlen">
            The preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required
            for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is
            insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see Network Management Function Buffers and Network
            Management Function Buffer Lengths.
            </param>
      <param name="entriesread">A pointer to a value that receives the count of elements actually enumerated.</param>
      <param name="totalentries">
            A pointer to a value that receives the total number of visible servers and workstations on the network. Note that applications should consider this
            value only as a hint.
            </param>
      <param name="servertype">A value that filters the server entries to return from the enumeration.</param>
      <param name="domain">
            A pointer to a constant string that specifies the name of the domain for which a list of servers is to be returned. The domain name must be a NetBIOS
            domain name (for example, microsoft). The NetServerEnum function does not support DNS-style names (for example, microsoft.com). If this parameter is
            NULL, the primary domain is implied.
            </param>
      <param name="resume_handle">Reserved; must be set to zero.</param>
      <returns>If the function succeeds, the return value is NERR_Success.</returns>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.NetServerEnum``1(Vanara.PInvoke.NetApi32.NetServerEnumFilter,System.String,System.Int32)">
      <summary>The NetServerEnum function lists all servers of the specified type that are visible in a domain.</summary>
      <param name="netServerEnumFilter">A value that filters the server entries to return from the enumeration.</param>
      <param name="domain">
            A string that specifies the name of the domain for which a list of servers is to be returned. The domain name must be a NetBIOS domain name (for
            example, Microsoft). The NetServerEnum function does not support DNS-style names (for example, microsoft.com). If this parameter is NULL, the primary
            domain is implied.
            </param>
      <param name="level">
            The information level of the data requested. If this value is 0, then the method will extract all digits to form the level (e.g. SERVER_INFO_101
            produces 101).
            </param>
      <typeparam name="T">The type of the structure to have filled in for each server. This must be SERVER_INFO_100 or SERVER_INFO_101.</typeparam>
      <returns>A managed array of the requested type.</returns>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.NetServerGetInfo``1(System.String,System.Int32)">
      <summary>The NetServerGetInfo function retrieves current configuration information for the specified server.</summary>
      <param name="serverName">
            A string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.
            </param>
      <param name="level">
            The information level of the data requested. If this value is 0, then the method will extract all digits to form the level (e.g. SERVER_INFO_101
            produces 101).
            </param>
      <typeparam name="T">The type of the structure to have filled in for each server. This must be SERVER_INFO_100, SERVER_INFO_101, or SERVER_INFO_102.</typeparam>
      <returns>The requested type with returned information about the server.</returns>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.NetServerGetInfo(System.String,System.Int32,Vanara.PInvoke.NetApi32.SafeNetApiBuffer@)">
      <summary>The NetServerGetInfo function retrieves current configuration information for the specified server.</summary>
      <param name="servername">
            Pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer
            is used.
            </param>
      <param name="level">Specifies the information level of the data.</param>
      <param name="bufptr">
            Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the
            system and must be freed using the NetApiBufferFree function.
            </param>
      <returns>If the function succeeds, the return value is NERR_Success.</returns>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO">
      <summary>The DOMAIN_CONTROLLER_INFO structure is used with the DsGetDcName function to receive data about a domain controller.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.ClientSiteName">
      <summary>
            Pointer to a null-terminated string that specifies the name of the site that the computer belongs to. The computer is specified in the
            ComputerName parameter passed to DsGetDcName. This member may be NULL if the site that contains the computer cannot be found; for example, if the
            DS administrator has not associated the subnet that the computer is in with a valid site.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DcSiteName">
      <summary>
            Pointer to a null-terminated string that specifies the name of the site where the domain controller is located. This member may be NULL if the
            domain controller is not in a site; for example, the domain controller is a Windows NT 4.0 domain controller.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DnsForestName">
      <summary>
            Pointer to a null-terminated string that specifies the name of the domain at the root of the DS tree. The DNS-style name, for example,
            "fabrikam.com", is returned if available. Otherwise, the flat-style name, for example, "fabrikam" is returned.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DomainControllerAddress">
      <summary>
            Pointer to a null-terminated string that specifies the address of the discovered domain controller. The address is prefixed with "\\". This
            string is one of the types defined by the DomainControllerAddressType member.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DomainControllerAddressType">
      <summary>Indicates the type of string that is contained in the DomainControllerAddress member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DomainControllerName">
      <summary>
            Pointer to a null-terminated string that specifies the computer name of the discovered domain controller. The returned computer name is prefixed
            with "\\". The DNS-style name, for example, "\\phoenix.fabrikam.com", is returned, if available. If the DNS-style name is not available, the
            flat-style name (for example, "\\phoenix") is returned. This example would apply if the domain is a Windows NT 4.0 domain or if the domain does
            not support the IP family of protocols.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DomainGuid">
      <summary>
            The GUID of the domain. This member is zero if the domain controller does not have a Domain GUID; for example, the domain controller is not a
            Windows 2000 domain controller.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DomainName">
      <summary>
            Pointer to a null-terminated string that specifies the name of the domain. The DNS-style name, for example, "fabrikam.com", is returned if
            available. Otherwise, the flat-style name, for example, "fabrikam", is returned. This name may be different than the requested domain name if the
            domain has been renamed.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.Flags">
      <summary>Contains a set of flags that describe the domain controller. This can be zero or a combination of one or more of the following values.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.DomainControllerAddressType">
      <summary>Enumeration supporting <see cref="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.DomainControllerAddressType" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerAddressType.DS_INET_ADDRESS">
      <summary>The address is a string IP address (for example, "\\157.55.94.74") of the domain controller.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerAddressType.DS_NETBIOS_ADDRESS">
      <summary>The address is a NetBIOS name, for example, "\\phoenix", of the domain controller.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.DomainControllerType">
      <summary>Enumeration supporting <see cref="F:Vanara.PInvoke.NetApi32.DOMAIN_CONTROLLER_INFO.Flags" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_PDC_FLAG">
      <summary>The domain controller is PDC of Domain.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_GC_FLAG">
      <summary>The domain controller is a GC of forest.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_LDAP_FLAG">
      <summary>Server supports an LDAP server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_DS_FLAG">
      <summary>The domain controller supports a DS and is a Domain Controller.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_KDC_FLAG">
      <summary>The domain controller is running KDC service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_TIMESERV_FLAG">
      <summary>The domain controller is running time service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_CLOSEST_FLAG">
      <summary>The domain controller is in closest site to client.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_WRITABLE_FLAG">
      <summary>The domain controller has a writable DS.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_GOOD_TIMESERV_FLAG">
      <summary>The domain controller is running time service (and has clock hardware).</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_NDNC_FLAG">
      <summary>DomainName is non-domain NC serviced by the LDAP server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_SELECT_SECRET_DOMAIN_6_FLAG">
      <summary>The domain controller has some secrets.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_FULL_SECRET_DOMAIN_6_FLAG">
      <summary>The domain controller has all secrets.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_WS_FLAG">
      <summary>The domain controller is running web service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_DS_8_FLAG">
      <summary>The domain controller is running Win8 or later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_DS_9_FLAG">
      <summary>The domain controller is running Win8.1 or later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_DS_10_FLAG">
      <summary>The domain controller is running WinThreshold or later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_PING_FLAGS">
      <summary>Flags returned on ping.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_DNS_CONTROLLER_FLAG">
      <summary>The DomainControllerName is a DNS name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_DNS_DOMAIN_FLAG">
      <summary>The DomainName is a DNS name.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DomainControllerType.DS_DNS_FOREST_FLAG">
      <summary>The DnsForestName is a DNS name.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.DsGetDcNameFlags">
      <summary>Flags supporting behavior of <see cref="!:PInvoke.DsGetDcName" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_FORCE_REDISCOVERY">
      <summary>
            Forces cached domain controller data to be ignored. When the DS_FORCE_REDISCOVERY flag is not specified, DsGetDcName may return cached domain
            controller data. If this flag is specified, DsGetDcName will not use cached information (if any exists) but will instead perform a fresh domain
            controller discovery.
            <para>
            This flag should not be used under normal conditions, as using the cached domain controller information has better performance characteristics
            and helps to ensure that the same domain controller is used consistently by all applications. This flag should be used only after the application
            determines that the domain controller returned by DsGetDcName (when called without this flag) is not accessible. In that case, the application
            should repeat the DsGetDcName call with this flag to ensure that the unuseful cached information (if any) is ignored and a reachable domain
            controller is discovered.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_DIRECTORY_SERVICE_REQUIRED">
      <summary>Requires that the returned domain controller support directory services.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_DIRECTORY_SERVICE_PREFERRED">
      <summary>
            DsGetDcName attempts to find a domain controller that supports directory service functions. If a domain controller that supports directory
            services is not available, DsGetDcName returns the name of a non-directory service domain controller. However, DsGetDcName only returns a
            non-directory service domain controller after the attempt to find a directory service domain controller times out.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_GC_SERVER_REQUIRED">
      <summary>
            Requires that the returned domain controller be a global catalog server for the forest of domains with this domain as the root. If this flag is
            set and the DomainName parameter is not NULL, DomainName must specify a forest name. This flag cannot be combined with the DS_PDC_REQUIRED or
            DS_KDC_REQUIRED flags.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_PDC_REQUIRED">
      <summary>
            Requires that the returned domain controller be the primary domain controller for the domain. This flag cannot be combined with the
            DS_KDC_REQUIRED or DS_GC_SERVER_REQUIRED flags.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_BACKGROUND_ONLY">
      <summary>
            If the DS_FORCE_REDISCOVERY flag is not specified, this function uses cached domain controller data. If the cached data is more than 15 minutes
            old, the cache is refreshed by pinging the domain controller. If this flag is specified, this refresh is avoided even if the cached data is
            expired. This flag should be used if the DsGetDcName function is called periodically.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_IP_REQUIRED">
      <summary>
            This parameter indicates that the domain controller must have an IP address. In that case, DsGetDcName will place the Internet protocol address
            of the domain controller in the DomainControllerAddress member of DomainControllerInfo.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_KDC_REQUIRED">
      <summary>
            Requires that the returned domain controller be currently running the Kerberos Key Distribution Center service. This flag cannot be combined with
            the DS_PDC_REQUIRED or DS_GC_SERVER_REQUIRED flags.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_TIMESERV_REQUIRED">
      <summary>Requires that the returned domain controller be currently running the Windows Time Service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_WRITABLE_REQUIRED">
      <summary>Requires that the returned domain controller be writable; that is, host a writable copy of the directory service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_GOOD_TIMESERV_PREFERRED">
      <summary>
            DsGetDcName attempts to find a domain controller that is a reliable time server. The Windows Time Service can be configured to declare one or
            more domain controllers as a reliable time server. For more information, see the Windows Time Service documentation. This flag is intended to be
            used only by the Windows Time Service.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_AVOID_SELF">
      <summary>
            When called from a domain controller, specifies that the returned domain controller name should not be the current computer. If the current
            computer is not a domain controller, this flag is ignored. This flag can be used to obtain the name of another domain controller in the domain.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_ONLY_LDAP_NEEDED">
      <summary>
            Specifies that the server returned is an LDAP server. The server returned is not necessarily a domain controller. No other services are implied
            to be present at the server. The server returned does not necessarily have a writable config container nor a writable schema container. The
            server returned may not necessarily be used to create or modify security principles. This flag may be used with the DS_GC_SERVER_REQUIRED flag to
            return an LDAP server that also hosts a global catalog server. The returned global catalog server is not necessarily a domain controller. No
            other services are implied to be present at the server. If this flag is specified, the DS_PDC_REQUIRED, DS_TIMESERV_REQUIRED,
            DS_GOOD_TIMESERV_PREFERRED, DS_DIRECTORY_SERVICES_PREFERED, DS_DIRECTORY_SERVICES_REQUIRED, and DS_KDC_REQUIRED flags are ignored.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_IS_FLAT_NAME">
      <summary>Specifies that the DomainName parameter is a flat name. This flag cannot be combined with the DS_IS_DNS_NAME flag.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_IS_DNS_NAME">
      <summary>
            Specifies that the DomainName parameter is a DNS name. This flag cannot be combined with the DS_IS_FLAT_NAME flag.
            <para>
            Specify either DS_IS_DNS_NAME or DS_IS_FLAT_NAME. If neither flag is specified, DsGetDcName may take longer to find a domain controller because
            it may have to search for both the DNS-style and flat name.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_TRY_NEXTCLOSEST_SITE">
      <summary>
            When this flag is specified, DsGetDcName attempts to find a domain controller in the same site as the caller. If no such domain controller is
            found, it will find a domain controller that can provide topology information and call DsBindToISTG to obtain a bind handle, then call
            DsQuerySitesByCost over UDP to determine the "next closest site," and finally cache the name of the site found. If no domain controller is found
            in that site, then DsGetDcName falls back on the default method of locating a domain controller.
            <para>If this flag is used in conjunction with a non-NULL value in the input parameter SiteName, then ERROR_INVALID_FLAGS is thrown.</para><para>
            Also, the kind of search employed with DS_TRY_NEXT_CLOSEST_SITE is site-specific, so this flag is ignored if it is used in conjunction with
            DS_PDC_REQUIRED. Finally, DS_TRY_NEXTCLOSEST_SITE is ignored when used in conjunction with DS_RETURN_FLAT_NAME because that uses NetBIOS to
            resolve the name, but the domain of the domain controller found won't necessarily match the domain to which the client is joined.
            </para><note>Note This flag is Group Policy enabled. If you enable the "Next Closest Site" policy setting, Next Closest Site DC Location will be turned
            on for the machine across all available but un-configured network adapters. If you disable the policy setting, Next Closest Site DC Location will
            not be used by default for the machine across all available but un-configured network adapters. However, if a DC Locator call is made using the
            DS_TRY_NEXTCLOSEST_SITE flag explicitly, DsGetDcName honors the Next Closest Site behavior. If you do not configure this policy setting, Next
            Closest Site DC Location will be not be used by default for the machine across all available but un-configured network adapters. If the
            DS_TRY_NEXTCLOSEST_SITE flag is used explicitly, the Next Closest Site behavior will be used.</note></summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_DIRECTORY_SERVICE_6_REQUIRED">
      <summary>Requires that the returned domain controller be running Windows Server 2008 or later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_WEB_SERVICE_REQUIRED">
      <summary>Requires that the returned domain controller be currently running the Active Directory web service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_DIRECTORY_SERVICE_8_REQUIRED">
      <summary>Requires that the returned domain controller be running Windows Server 2012 or later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_DIRECTORY_SERVICE_9_REQUIRED">
      <summary>Requires that the returned domain controller be running Windows Server 2012 R2 or later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_DIRECTORY_SERVICE_10_REQUIRED">
      <summary>Requires that the returned domain controller be running Windows Server 2016 or later.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_RETURN_DNS_NAME">
      <summary>
            Specifies that the names returned in the DomainControllerName and DomainName members of DomainControllerInfo should be DNS names. If a DNS name
            is not available, an error is returned. This flag cannot be specified with the DS_RETURN_FLAT_NAME flag. This flag implies the DS_IP_REQUIRED flag.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.DsGetDcNameFlags.DS_RETURN_FLAT_NAME">
      <summary>
            Specifies that the names returned in the DomainControllerName and DomainName members of DomainControllerInfo should be flat names. If a flat name
            is not available, an error is returned. This flag cannot be specified with the DS_RETURN_DNS_NAME flag.
            </summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.INetServerInfo">
      <summary>Inherit from this interface for any implementation of the SERVER_INFO_XXXX structures to use the helper functions.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.NetServerEnumFilter">
      <summary>Filters used by <see cref="M:Vanara.PInvoke.NetApi32.NetServerEnum(System.String,System.Int32,Vanara.PInvoke.NetApi32.SafeNetApiBuffer@,System.Int32,System.Int32@,System.Int32@,Vanara.PInvoke.NetApi32.NetServerEnumFilter,System.String,System.IntPtr)" />.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_WORKSTATION">
      <summary>All workstations.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_SERVER">
      <summary>All computers that run the Server service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_SQLSERVER">
      <summary>Any server that runs an instance of Microsoft SQL Server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DOMAIN_CTRL">
      <summary>A server that is primary domain controller.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DOMAIN_BAKCTRL">
      <summary>Any server that is a backup domain controller.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_TIME_SOURCE">
      <summary>Any server that runs the Timesource service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_AFP">
      <summary>Any server that runs the Apple Filing Protocol (AFP) file service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_NOVELL">
      <summary>Any server that is a Novell server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DOMAIN_MEMBER">
      <summary>Any computer that is LAN Manager 2.x domain member.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_PRINTQ_SERVER">
      <summary>Any computer that shares a print queue.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DIALIN_SERVER">
      <summary>Any server that runs a dial-in service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_XENIX_SERVER">
      <summary>Any server that is a Xenix server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_SERVER_UNIX">
      <summary>Any server that is a UNIX server. This is the same as the SV_TYPE_XENIX_SERVER.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_NT">
      <summary>A workstation or server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_WFW">
      <summary>Any computer that runs Windows for Workgroups.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_SERVER_MFPN">
      <summary>Any server that runs the Microsoft File and Print for NetWare service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_SERVER_NT">
      <summary>Any server that is not a domain controller.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_POTENTIAL_BROWSER">
      <summary>Any computer that can run the browser service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_BACKUP_BROWSER">
      <summary>A computer that runs a browser service as backup.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_MASTER_BROWSER">
      <summary>A computer that runs the master browser service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DOMAIN_MASTER">
      <summary>A computer that runs the domain master browser.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_SERVER_OSF">
      <summary>A computer that runs OSF/1.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_SERVER_VMS">
      <summary>A computer that runs Open Virtual Memory System (VMS).</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_WINDOWS">
      <summary>A computer that runs Windows.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DFS">
      <summary>A computer that is the root of Distributed File System (DFS) tree.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_CLUSTER_NT">
      <summary>Server clusters available in the domain.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_TERMINALSERVER">
      <summary>A server running the Terminal Server service.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_CLUSTER_VS_NT">
      <summary>
            Cluster virtual servers available in the domain.
            <para>Windows 2000: This value is not supported.</para></summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DCE">
      <summary>A computer that runs IBM Directory and Security Services (DSS) or equivalent.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_ALTERNATE_XPORT">
      <summary>A computer that over an alternate transport.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_LOCAL_LIST_ONLY">
      <summary>Any computer maintained in a list by the browser. See the following Remarks section.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_DOMAIN_ENUM">
      <summary>The primary domain.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.NetServerEnumFilter.SV_TYPE_ALL">
      <summary>All servers. This is a convenience that will return all possible servers.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.SafeNetApiBuffer">
      <summary>Provides a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for buffers that must be freed using <see cref="M:Vanara.PInvoke.NetApi32.NetApiBufferFree(System.IntPtr)" />.</summary>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.SafeNetApiBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NetApi32.SafeNetApiBuffer" /> class.</summary>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.SafeNetApiBuffer.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.NetApi32.SafeNetApiBuffer" /> class with an existing pointer.</summary>
      <param name="ptr">The pointer to the buffer.</param>
      <param name="own">if set to <c>true</c> this <see cref="T:System.Runtime.InteropServices.SafeHandle" /> will release the buffer behind the pointer when its scope ends.</param>
    </member>
    <member name="M:Vanara.PInvoke.NetApi32.SafeNetApiBuffer.ToStructure``1">
      <summary>Returns an extracted structure from this buffer.</summary>
      <typeparam name="T">The structure type to extract.</typeparam>
      <returns>Extracted structure or default(T) if the buffer is invalid.</returns>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.SERVER_INFO_100">
      <summary>The <c>SERVER_INFO_100</c> structure contains information about the specified server, including the name and platform.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_100.sv100_name">
      <summary>A pointer to a Unicode string that specifies the name of the server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_100.sv100_platform_id">
      <summary>The information level to use for platform-specific information.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.SERVER_INFO_101">
      <summary>
            The <c>SERVER_INFO_101</c> structure contains information about the specified server, including name, platform, type of server, and associated software.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_comment">
      <summary>A pointer to a Unicode string specifying a comment describing the server. The comment can be null.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_name">
      <summary>A pointer to a Unicode string specifying the name of a server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_platform_id">
      <summary>The information level to use for platform-specific information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_type">
      <summary>The type of software the computer is running.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_version_major">
      <summary>
            The major version number and the server type.
            <para>
            The major release version number of the operating system is specified in the least significant 4 bits. The server type is specified in the most
            significant 4 bits. The <c>MAJOR_VERSION_MASK</c> bitmask defined in the Lmserver.h header should be used by an application to obtain the major
            version number from this member.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_version_minor">
      <summary>The minor release version number of the operating system.</summary>
    </member>
    <member name="P:Vanara.PInvoke.NetApi32.SERVER_INFO_101.Version">
      <summary>Gets the version composed of both <see cref="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_version_major" /> and <see cref="F:Vanara.PInvoke.NetApi32.SERVER_INFO_101.sv101_version_minor" />.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.SERVER_INFO_102">
      <summary>
            The SERVER_INFO_102 structure contains information about the specified server, including name, platform, type of server, attributes, and associated software.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_anndelta">
      <summary>
            The delta value for the announce rate, in milliseconds. This value specifies how much the announce rate can vary from the period of time
            specified in the sv102_announce member.
            <para>
            The delta value allows randomly varied announce rates. For example, if the sv102_announce member has the value 10 and the sv102_anndelta member
            has the value 1, the announce rate can vary from 9.999 seconds to 10.001 seconds.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_announce">
      <summary>The network announce rate, in seconds. This rate determines how often the server is announced to other computers on the network.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_comment">
      <summary>A pointer to a Unicode string specifying a comment describing the server. The comment can be null.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_disc">
      <summary>
            The auto-disconnect time, in minutes. A session is disconnected if it is idle longer than the period of time specified by the sv102_disc member.
            If the value of sv102_disc is SV_NODISC, auto-disconnect is not enabled.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_hidden">
      <summary>A value that indicates whether the server is visible to other computers in the same network domain.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_licenses">
      <summary>The number of users per license. By default, this number is SV_USERS_PER_LICENSE.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_name">
      <summary>A pointer to a Unicode string specifying the name of a server.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_platform_id">
      <summary>The information level to use for platform-specific information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_type">
      <summary>The type of software the computer is running.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_userpath">
      <summary>A pointer to a Unicode string specifying the path to user directories.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_users">
      <summary>
            The number of users who can attempt to log on to the system server. Note that it is the license server that determines how many of these users
            can actually log on.
            </summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_version_major">
      <summary>
            The major version number and the server type.
            <para>
            The major release version number of the operating system is specified in the least significant 4 bits. The server type is specified in the most
            significant 4 bits. The <c>MAJOR_VERSION_MASK</c> bitmask defined in the Lmserver.h header should be used by an application to obtain the major
            version number from this member.
            </para></summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_version_minor">
      <summary>The minor release version number of the operating system.</summary>
    </member>
    <member name="P:Vanara.PInvoke.NetApi32.SERVER_INFO_102.Version">
      <summary>Gets the version composed of both <see cref="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_version_major" /> and <see cref="F:Vanara.PInvoke.NetApi32.SERVER_INFO_102.sv102_version_minor" />.</summary>
    </member>
    <member name="T:Vanara.PInvoke.NetApi32.ServerPlatform">
      <summary>The information level to use for platform-specific information.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.ServerPlatform.PLATFORM_ID_DOS">
      <summary>The MS-DOS platform.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.ServerPlatform.PLATFORM_ID_OS2">
      <summary>The OS/2 platform.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.ServerPlatform.PLATFORM_ID_NT">
      <summary>The Windows NT platform.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.ServerPlatform.PLATFORM_ID_OSF">
      <summary>The OSF platform.</summary>
    </member>
    <member name="F:Vanara.PInvoke.NetApi32.ServerPlatform.PLATFORM_ID_VMS">
      <summary>The VMS platform.</summary>
    </member>
  </members>
</doc>